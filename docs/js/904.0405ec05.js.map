{"version":3,"file":"js/904.0405ec05.js","mappings":"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","sources":["webpack://matrix-chat-spa/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js","webpack://matrix-chat-spa/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/index.mjs","webpack://matrix-chat-spa/../../src/rust-crypto/RoomEncryptor.ts","webpack://matrix-chat-spa/../../src/rust-crypto/DehydratedDeviceManager.ts","webpack://matrix-chat-spa/../../src/rust-crypto/OutgoingRequestProcessor.ts","webpack://matrix-chat-spa/../../src/rust-crypto/KeyClaimManager.ts","webpack://matrix-chat-spa/../../src/rust-crypto/device-converter.ts","webpack://matrix-chat-spa/../../src/rust-crypto/CrossSigningIdentity.ts","webpack://matrix-chat-spa/../../src/rust-crypto/secret-storage.ts","webpack://matrix-chat-spa/../../src/rust-crypto/verification.ts","webpack://matrix-chat-spa/../../src/rust-crypto/backup.ts","webpack://matrix-chat-spa/../../src/rust-crypto/OutgoingRequestsManager.ts","webpack://matrix-chat-spa/../../src/rust-crypto/PerSessionKeyBackupDownloader.ts","webpack://matrix-chat-spa/../../src/rust-crypto/rust-crypto.ts","webpack://matrix-chat-spa/../../src/rust-crypto/libolm_migration.ts","webpack://matrix-chat-spa/../../src/rust-crypto/index.ts"],"sourcesContent":["let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_4.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_4.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    const mem = getDataViewMemory0();\n    for (let i = 0; i < array.length; i++) {\n        mem.setUint32(ptr + 4 * i, addToExternrefTable0(array[i]), true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n * Get the versions of the Rust libraries we are using.\n * @returns {Versions}\n */\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n * Run some stuff when the Wasm module is instantiated.\n *\n * Right now, it does the following:\n *\n * * Redirect Rust panics to JavaScript console.\n */\nexport function start() {\n    wasm.start();\n}\n\nfunction __wbg_adapter_58(arg0, arg1, arg2) {\n    const ret = wasm.closure29_externref_shim_multivalue_shim(arg0, arg1, arg2);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\nfunction __wbg_adapter_61(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__heca5c4426cc7e703(arg0, arg1);\n}\n\nfunction __wbg_adapter_64(arg0, arg1, arg2) {\n    wasm.closure735_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_67(arg0, arg1, arg2) {\n    wasm.closure415_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_70(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h41d552962a79dfb4(arg0, arg1);\n}\n\nfunction __wbg_adapter_758(arg0, arg1, arg2, arg3) {\n    wasm.closure431_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * Decryption error codes\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const DecryptionErrorCode = Object.freeze({\n    /**\n     * The room key is not known\n     */\n    MissingRoomKey: 0, \"0\": \"MissingRoomKey\",\n    /**\n     * The room key is known but ratcheted\n     */\n    UnknownMessageIndex: 1, \"1\": \"UnknownMessageIndex\",\n    /**\n     * Decryption failed because of a mismatch between the identity keys of the\n     * device we received the room key from and the identity keys recorded in\n     * the plaintext of the room key to-device message.\n     */\n    MismatchedIdentityKeys: 2, \"2\": \"MismatchedIdentityKeys\",\n    /**\n     * We weren't able to link the message back to any known device.\n     */\n    UnknownSenderDevice: 3, \"3\": \"UnknownSenderDevice\",\n    /**\n     * The sender device is not cross-signed.\n     */\n    UnsignedSenderDevice: 4, \"4\": \"UnsignedSenderDevice\",\n    /**\n     * The sender's identity is unverified, but was previously verified.\n     */\n    SenderIdentityVerificationViolation: 5, \"5\": \"SenderIdentityVerificationViolation\",\n    /**\n     * Other failure.\n     */\n    UnableToDecrypt: 6, \"6\": \"UnableToDecrypt\",\n});\n/**\n * The basic key algorithm names in the specification.\n * @enum {0 | 1 | 3}\n */\nexport const DeviceKeyAlgorithmName = Object.freeze({\n    /**\n     * The Ed25519 signature algorithm.\n     */\n    Ed25519: 0, \"0\": \"Ed25519\",\n    /**\n     * The Curve25519 ECDH algorithm.\n     */\n    Curve25519: 1, \"1\": \"Curve25519\",\n    /**\n     * An unknown device key algorithm.\n     */\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n * @enum {0 | 1 | 2}\n */\nexport const DeviceKeyName = Object.freeze({\n    /**\n     * The curve25519 device key.\n     */\n    Curve25519: 0, \"0\": \"Curve25519\",\n    /**\n     * The ed25519 device key.\n     */\n    Ed25519: 1, \"1\": \"Ed25519\",\n    /**\n     * An unknown device key.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * An encryption algorithm to be used to encrypt messages sent to a\n * room.\n * @enum {0 | 1 | 2}\n */\nexport const EncryptionAlgorithm = Object.freeze({\n    /**\n     * Olm version 1 using Curve25519, AES-256, and SHA-256.\n     */\n    OlmV1Curve25519AesSha2: 0, \"0\": \"OlmV1Curve25519AesSha2\",\n    /**\n     * Megolm version 1 using AES-256 and SHA-256.\n     */\n    MegolmV1AesSha2: 1, \"1\": \"MegolmV1AesSha2\",\n    /**\n     * Unsupported algorithm.\n     *\n     * Applications should ignore this value if it is received, and should\n     * never set it.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * Who can see a room's history.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const HistoryVisibility = Object.freeze({\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they were invited onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *invite* or *join*.\n     */\n    Invited: 0, \"0\": \"Invited\",\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they joined the room onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *join*.\n     */\n    Joined: 1, \"1\": \"Joined\",\n    /**\n     * Previous events are always accessible to newly joined members.\n     *\n     * All events in the room are accessible, even those sent when\n     * the member was not a part of the room.\n     */\n    Shared: 2, \"2\": \"Shared\",\n    /**\n     * All events while this is the `HistoryVisibility` value may be\n     * shared by any participating homeserver with anyone, regardless\n     * of whether they have ever joined the room.\n     */\n    WorldReadable: 3, \"3\": \"WorldReadable\",\n});\n/**\n * The local trust state of a device.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const LocalTrust = Object.freeze({\n    /**\n     * The device has been verified and is trusted.\n     */\n    Verified: 0, \"0\": \"Verified\",\n    /**\n     * The device been blacklisted from communicating.\n     */\n    BlackListed: 1, \"1\": \"BlackListed\",\n    /**\n     * The trust state of the device is being ignored.\n     */\n    Ignored: 2, \"2\": \"Ignored\",\n    /**\n     * The trust state is unset.\n     */\n    Unset: 3, \"3\": \"Unset\",\n});\n/**\n * Logger level.\n * @enum {0 | 1 | 2 | 3 | 4}\n */\nexport const LoggerLevel = Object.freeze({\n    /**\n     * `TRACE` level.\n     *\n     * Designate very low priority, often extremely verbose,\n     * information.\n     */\n    Trace: 0, \"0\": \"Trace\",\n    /**\n     * `DEBUG` level.\n     *\n     * Designate lower priority information.\n     */\n    Debug: 1, \"1\": \"Debug\",\n    /**\n     * `INFO` level.\n     *\n     * Designate useful information.\n     */\n    Info: 2, \"2\": \"Info\",\n    /**\n     * `WARN` level.\n     *\n     * Designate hazardous situations.\n     */\n    Warn: 3, \"3\": \"Warn\",\n    /**\n     * `ERROR` level.\n     *\n     * Designate very serious errors.\n     */\n    Error: 4, \"4\": \"Error\",\n});\n/**\n * The mode of the QR code login.\n *\n * The QR code login mechanism supports both, the new device, as well as the\n * existing device to display the QR code.\n *\n * The different modes have an explicit one-byte identifier which gets added to\n * the QR code data.\n * @enum {0 | 1}\n */\nexport const QrCodeMode = Object.freeze({\n    /**\n     * The new device is displaying the QR code.\n     */\n    Login: 0, \"0\": \"Login\",\n    /**\n     * The existing device is displaying the QR code.\n     */\n    Reciprocate: 1, \"1\": \"Reciprocate\",\n});\n/**\n * List of `Qr` states\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const QrState = Object.freeze({\n    /**\n     * We have received the other device's details (from the\n     * `m.key.verification.request` or `m.key.verification.ready`) and\n     * established the shared secret, so can\n     * display the QR code.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The other side has scanned our QR code and sent an\n     * `m.key.verification.start` message with `method: m.reciprocate.v1` with\n     * matching shared secret.\n     */\n    Scanned: 1, \"1\": \"Scanned\",\n    /**\n     * Our user has confirmed that the other device scanned successfully. We\n     * have sent an `m.key.verification.done`.\n     */\n    Confirmed: 2, \"2\": \"Confirmed\",\n    /**\n     * We have scanned the other side's QR code and are able to send a\n     * `m.key.verification.start` message with `method: m.reciprocate.v1`.\n     *\n     * Call `Qr::reciprocate` to build the start message.\n     *\n     * Note that, despite the name of this state, we have not necessarily\n     * yet sent the `m.reciprocate.v1` message.\n     */\n    Reciprocated: 3, \"3\": \"Reciprocated\",\n    /**\n     * Verification complete: we have received an `m.key.verification.done`\n     * from the other side.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * Verification cancelled or failed.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n/**\n * Represent the type of a request.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RequestType = Object.freeze({\n    /**\n     * Represents a `KeysUploadRequest`.\n     */\n    KeysUpload: 0, \"0\": \"KeysUpload\",\n    /**\n     * Represents a `KeysQueryRequest`.\n     */\n    KeysQuery: 1, \"1\": \"KeysQuery\",\n    /**\n     * Represents a `KeysClaimRequest`.\n     */\n    KeysClaim: 2, \"2\": \"KeysClaim\",\n    /**\n     * Represents a `ToDeviceRequest`.\n     */\n    ToDevice: 3, \"3\": \"ToDevice\",\n    /**\n     * Represents a `SignatureUploadRequest`.\n     */\n    SignatureUpload: 4, \"4\": \"SignatureUpload\",\n    /**\n     * Represents a `RoomMessageRequest`.\n     */\n    RoomMessage: 5, \"5\": \"RoomMessage\",\n    /**\n     * Represents a `KeysBackupRequest`.\n     */\n    KeysBackup: 6, \"6\": \"KeysBackup\",\n});\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n * @enum {0 | 1 | 2}\n */\nexport const ShieldColor = Object.freeze({\n    /**\n     * Important warning\n     */\n    Red: 0, \"0\": \"Red\",\n    /**\n     * Low warning\n     */\n    Grey: 1, \"1\": \"Grey\",\n    /**\n     * No warning\n     */\n    None: 2, \"2\": \"None\",\n});\n/**\n * A machine-readable representation of the authenticity for a `ShieldState`.\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const ShieldStateCode = Object.freeze({\n    /**\n     * Not enough information available to check the authenticity.\n     */\n    AuthenticityNotGuaranteed: 0, \"0\": \"AuthenticityNotGuaranteed\",\n    /**\n     * The sending device isn't yet known by the Client.\n     */\n    UnknownDevice: 1, \"1\": \"UnknownDevice\",\n    /**\n     * The sending device hasn't been verified by the sender.\n     */\n    UnsignedDevice: 2, \"2\": \"UnsignedDevice\",\n    /**\n     * The sender hasn't been verified by the Client's user.\n     */\n    UnverifiedIdentity: 3, \"3\": \"UnverifiedIdentity\",\n    /**\n     * An unencrypted event in an encrypted room.\n     */\n    SentInClear: 4, \"4\": \"SentInClear\",\n    /**\n     * The sender was previously verified but changed their identity.\n     */\n    VerificationViolation: 5, \"5\": \"VerificationViolation\",\n});\n/**\n * The result of a signature check.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const SignatureState = Object.freeze({\n    /**\n     * The signature is missing.\n     */\n    Missing: 0, \"0\": \"Missing\",\n    /**\n     * The signature is invalid.\n     */\n    Invalid: 1, \"1\": \"Invalid\",\n    /**\n     * The signature is valid but the device or user identity that created the\n     * signature is not trusted.\n     */\n    ValidButNotTrusted: 2, \"2\": \"ValidButNotTrusted\",\n    /**\n     * The signature is valid and the device or user identity that created the\n     * signature is trusted.\n     */\n    ValidAndTrusted: 3, \"3\": \"ValidAndTrusted\",\n});\n/**\n * The trust level required to decrypt an event\n * @enum {0 | 1 | 2}\n */\nexport const TrustRequirement = Object.freeze({\n    /**\n     * Decrypt events from everyone regardless of trust\n     */\n    Untrusted: 0, \"0\": \"Untrusted\",\n    /**\n     * Only decrypt events from cross-signed or legacy devices\n     */\n    CrossSignedOrLegacy: 1, \"1\": \"CrossSignedOrLegacy\",\n    /**\n     * Only decrypt events from cross-signed devices\n     */\n    CrossSigned: 2, \"2\": \"CrossSigned\",\n});\n/**\n * List of available verification methods.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const VerificationMethod = Object.freeze({\n    /**\n     * The `m.sas.v1` verification method.\n     *\n     * SAS means Short Authentication String.\n     */\n    SasV1: 0, \"0\": \"SasV1\",\n    /**\n     * The `m.qr_code.scan.v1` verification method.\n     */\n    QrCodeScanV1: 1, \"1\": \"QrCodeScanV1\",\n    /**\n     * The `m.qr_code.show.v1` verification method.\n     */\n    QrCodeShowV1: 2, \"2\": \"QrCodeShowV1\",\n    /**\n     * The `m.reciprocate.v1` verification method.\n     */\n    ReciprocateV1: 3, \"3\": \"ReciprocateV1\",\n});\n/**\n * List of VerificationRequestState phases\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const VerificationRequestPhase = Object.freeze({\n    /**\n     * The verification request has been newly created by us.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The verification request was received from the other party.\n     */\n    Requested: 1, \"1\": \"Requested\",\n    /**\n     * The verification request is ready to start a verification flow.\n     */\n    Ready: 2, \"2\": \"Ready\",\n    /**\n     * The verification request has transitioned into a concrete verification\n     * flow. For example it transitioned into the emoji based SAS\n     * verification.\n     */\n    Transitioned: 3, \"3\": \"Transitioned\",\n    /**\n     * The verification flow that was started with this request has finished.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * The verification process has been cancelled.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n\nconst __wbindgen_enum_IdbRequestReadyState = [\"pending\", \"done\"];\n\nconst __wbindgen_enum_IdbTransactionMode = [\"readonly\", \"readwrite\", \"versionchange\", \"readwriteflush\", \"cleanup\"];\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n * A type to encrypt and to decrypt anything that can fit in an\n * `Uint8Array`, usually big buffer.\n */\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n     * Encrypt the content of the `Uint8Array`.\n     *\n     * It produces an `EncryptedAttachment`, which can be used to\n     * retrieve the media encryption information, or the encrypted\n     * data.\n     * @param {Uint8Array} array\n     * @returns {EncryptedAttachment}\n     */\n    static encrypt(array) {\n        const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.attachment_encrypt(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return EncryptedAttachment.__wrap(ret[0]);\n    }\n    /**\n     * Decrypt an `EncryptedAttachment`.\n     *\n     * The encrypted attachment can be created manually, or from the\n     * `encrypt` method.\n     *\n     * **Warning**: The encrypted attachment can be used only\n     * **once**! The encrypted data will still be present, but the\n     * media encryption info (which contain secrets) will be\n     * destroyed. It is still possible to get a JSON-encoded backup\n     * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n     * @param {EncryptedAttachment} attachment\n     * @returns {Uint8Array}\n     */\n    static decrypt(attachment) {\n        _assertClass(attachment, EncryptedAttachment);\n        const ret = wasm.attachment_decrypt(attachment.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n * The private part of the backup key, the one used for recovery.\n */\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n     * Create a new random [`BackupDecryptionKey`].\n     * @returns {BackupDecryptionKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n     * @param {string} key\n     * @returns {BackupDecryptionKey}\n     */\n    static fromBase64(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.backupdecryptionkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return BackupDecryptionKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the backup decryption key to a base 64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public part of the backup key.\n     * @returns {MegolmV1BackupKey}\n     */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n     * Try to decrypt a message that was encrypted using the public part of the\n     * backup key.\n     * @param {string} ephemeral_key\n     * @param {string} mac\n     * @param {string} ciphertext\n     * @returns {string}\n     */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            const ret = wasm.backupdecryptionkey_decryptV1(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var ptr4 = ret[0];\n            var len4 = ret[1];\n            if (ret[3]) {\n                ptr4 = 0; len4 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n * Stored versions of the backup keys.\n */\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @returns {BackupDecryptionKey | undefined}\n     */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @param {BackupDecryptionKey | undefined} [arg0]\n     */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The version that we are using for backups.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_backupkeys_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The version that we are using for backups.\n     * @param {string | undefined} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The key used to decrypt backed up room keys, encoded as base64\n     *\n     * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n     * @returns {string | undefined}\n     */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n * The backup-specific parts of a secrets bundle.\n */\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @returns {string}\n     */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @param {string} arg0\n     */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @returns {string}\n     */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_backup_version(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @param {string} arg0\n     */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n * The base dataset that is important to migrate to the Rust SDK.\n *\n * Can be imported into the rust store with {@link #migrateBaseData}.\n */\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n     * The user id of the account owner.\n     * @returns {UserId | undefined}\n     */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The user id of the account owner.\n     * @param {UserId | undefined} [arg0]\n     */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the account owner.\n     * @returns {DeviceId | undefined}\n     */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the account owner.\n     * @param {DeviceId | undefined} [arg0]\n     */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @returns {string}\n     */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_basemigrationdata_pickledAccount(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @param {string} arg0\n     */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version that is currently active.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup version that is currently active.\n     * @param {string | undefined} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @returns {string | undefined}\n     */\n    get backupRecoveryKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupRecoveryKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @param {string | undefined} [arg0]\n     */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningMasterKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @param {string | undefined} [arg0]\n     */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningSelfSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @param {string | undefined} [arg0]\n     */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningUserSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @param {string | undefined} [arg0]\n     */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Create a new `BaseMigrationData` with default values.\n     */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n * Information about the cancellation of a verification request or\n * verification flow.\n */\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n     * Get the human readable reason of the cancellation.\n     * @returns {string}\n     */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the `code` (e.g. `m.user`) that was used to cancel the\n     * verification.\n     * @returns {string}\n     */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.cancelinfo_cancelCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Was the verification cancelled by us?\n     * @returns {boolean}\n     */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n * A check code that can be used to confirm that two [`EstablishedEcies`]\n * objects share the same secret. This is supposed to be shared out-of-band to\n * protect against active Man-in-the-middle (MITM) attacks.\n *\n * Since the initiator device can always tell whether a MITM attack is in\n * progress after channel establishment, this code technically carries only a\n * single bit of information, representing whether the initiator has determined\n * that the channel is \"secure\" or \"not secure\".\n *\n * However, given this will need to be interactively confirmed by the user,\n * there is risk that the user would confirm the dialogue without paying\n * attention to its content. By expanding this single bit into a deterministic\n * two-digit check code, the user is forced to pay more attention by having to\n * enter it instead of just clicking through a dialogue.\n */\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n     * Convert the check code to an array of two bytes.\n     *\n     * The bytes can be converted to a more user-friendly representation. The\n     * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        const ret = wasm.checkcode_as_bytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Convert the check code to two base-10 numbers.\n     *\n     * The number should be displayed with a leading 0 in case the first digit\n     * is a 0.\n     * @returns {number}\n     */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n * Strategy to collect the devices that should receive room keys for the\n * current discussion.\n */\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n     * Tests for equality between two [`CollectStrategy`]s.\n     * @param {CollectStrategy} other\n     * @returns {boolean}\n     */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Device based sharing strategy.\n     *\n     * If `only_allow_trusted_devices` is `true`, devices that are not trusted\n     * will be excluded from the conversation. A device is trusted if any of\n     * the following is true:\n     *     - It was manually marked as trusted.\n     *     - It was marked as verified via interactive verification.\n     *     - It is signed by its owner identity, and this identity has been\n     *       trusted via interactive verification.\n     *     - It is the current own device of the user.\n     *\n     * If `error_on_verified_user` is `true`, and a verified user has an\n     * unsigned device, key sharing will fail with an error.\n     *\n     * If `error_on_verified_user` is `true`, and a verified user has replaced\n     * their identity, key sharing will fail with an error.\n     *\n     * Otherwise, keys are shared with unsigned devices as normal.\n     *\n     * Once the problematic devices are blacklisted or whitelisted the\n     * caller can retry to share a second time.\n     * @param {boolean} only_allow_trusted_devices\n     * @param {boolean} error_on_verified_user_problem\n     * @returns {CollectStrategy}\n     */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share based on identity. Only distribute to devices signed by their\n     * owner. If a user has no published identity he will not receive\n     * any room keys.\n     * @returns {CollectStrategy}\n     */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n * A set of requests to be executed when bootstrapping cross-signing using\n * {@link OlmMachine.bootstrapCrossSigning}.\n */\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n     * An optional request to upload a device key.\n     *\n     * This will either be `undefined`, or an \"outgoing request\" as returned by\n     * {@link OlmMachine.outgoingRequests}.\n     *\n     * If it is defined, the request should be sent first, and the result sent\n     * back with {@link OlmMachine.markRequestAsSent}.\n     * @returns {any}\n     */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Request to upload the cross-signing keys.\n     *\n     * Should be sent second.\n     * @returns {UploadSigningKeysRequest}\n     */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n     * Request to upload key signatures, including those for the cross-signing\n     * keys, and maybe some for the optional uploaded key too.\n     *\n     * Should be sent last.\n     * @returns {SignatureUploadRequest}\n     */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n * A struct containing private cross signing keys that can be backed\n * up or uploaded to the secret store.\n */\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get masterKey() {\n        const ret = wasm.crosssigningkeyexport_masterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get self_signing_key() {\n        const ret = wasm.crosssigningkeyexport_self_signing_key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get userSigningKey() {\n        const ret = wasm.crosssigningkeyexport_userSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n * Struct representing the state of our private cross signing keys,\n * it shows which private cross signing keys we have locally stored.\n */\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n     * Do we have the master key?\n     * @returns {boolean}\n     */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the self signing key? This one is necessary to sign\n     * our own devices.\n     * @returns {boolean}\n     */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the user signing key? This one is necessary to sign\n     * other users.\n     * @returns {boolean}\n     */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 public key.\n */\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n     * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n     * @param {string} key\n     */\n    constructor(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519publickey_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The number of bytes a Curve25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Curve25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n * A decrypted room event.\n */\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n     * The JSON-encoded decrypted event.\n     * @returns {string}\n     */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The user ID of the event sender, note this is untrusted data\n     * unless the `verification_state` is as well trusted.\n     * @returns {UserId | undefined}\n     */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event, note this\n     * is untrusted data unless `verification_state` is as well\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that have created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Returns an empty array\n     *\n     * Previously, this returned the chain of Curve25519 keys through which\n     * this session was forwarded, via `m.forwarded_room_key` events.\n     * However, that is not cryptographically reliable, and clients should not\n     * be using it.\n     *\n     * @see https://github.com/matrix-org/matrix-spec/issues/1089\n     * @returns {Array<any>}\n     */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     * @param {boolean} strict\n     * @returns {ShieldState | undefined}\n     */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ret === 0 ? undefined : ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for decrypting messages\n */\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @returns {TrustRequirement}\n     */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @param {TrustRequirement} arg0\n     */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Create a new `DecryptionSettings` with the given trust requirement.\n     * @param {TrustRequirement} sender_device_trust_requirement\n     */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A dehydrated device that can be uploaded to the server\n */\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Create the request to upload the dehydrated device\n     * @param {string} initial_device_display_name\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<PutDehydratedDeviceRequest>}\n     */\n    keysForUpload(initial_device_display_name, dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, initial_device_display_name, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevicekey_free(ptr >>> 0, 1));\n/**\n * Dehydrated device key\n */\nexport class DehydratedDeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevicekey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random dehydrated device key.\n     * @returns {DehydratedDeviceKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.dehydrateddevicekey_createRandomKey();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Generates a dehydrated device key from a given array.\n     * @param {Uint8Array} array\n     * @returns {DehydratedDeviceKey}\n     */\n    static createKeyFromArray(array) {\n        const ret = wasm.dehydrateddevicekey_createKeyFromArray(array);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the dehydrated device key to a base64-encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.dehydrateddevicekey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n * Struct collecting methods to create and rehydrate dehydrated devices.\n */\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n     * Create a new {@link DehydratedDevice} which can be uploaded to the\n     * server.\n     * @returns {Promise<DehydratedDevice>}\n     */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Rehydrate a dehydrated device.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @param {DeviceId} device_id\n     * @param {string} device_data\n     * @returns {Promise<RehydratedDevice>}\n     */\n    rehydrate(dehydrated_device_key, device_id, device_data) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the cached dehydrated device key if any.\n     *\n     * `None` if the key was not previously cached (via\n     * {@link DehydratedDevices.saveDehydratedDeviceKey}).\n     * @returns {Promise<DehydratedDeviceKey | undefined>}\n     */\n    getDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_getDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store the dehydrated device key in the crypto store.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<void>}\n     */\n    saveDehydratedDeviceKey(dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevices_saveDehydratedDeviceKey(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Clear the dehydrated device key saved in the crypto store.\n     * @returns {Promise<void>}\n     */\n    deleteDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_deleteDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n * A device represents a E2EE capable client of an user.\n */\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n     * Request an interactive verification with this device.\n     *\n     * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n     * @param {any[] | undefined} [methods]\n     * @returns {Array<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a to-device message to be sent to this device, using Olm\n     * encryption.\n     *\n     * Prior to calling this method you must ensure that an Olm session is\n     * available for the target device. This can be done by calling\n     * {@link OlmMachine.getMissingSessions}.\n     *\n     * The caller is responsible for sending the encrypted\n     * event to the target device. If multiple messages are\n     * encrypted for the same device using this method they should be sent in\n     * the same order as they are encrypted.\n     *\n     * # Returns\n     *\n     * Returns a promise for a JSON string containing the `content` of an\n     * encrypted event, which be used to create the payload for a\n     * `/sendToDevice` API.\n     * @param {string} event_type\n     * @param {any} content\n     * @returns {Promise<string>}\n     */\n    encryptToDeviceEvent(event_type, content) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, content);\n        return ret;\n    }\n    /**\n     * Is this device considered to be verified.\n     *\n     * This method returns true if either the `is_locally_trusted`\n     * method returns `true` or if the `is_cross_signing_trusted`\n     * method returns `true`.\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device considered to be verified using cross signing.\n     * @returns {boolean}\n     */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device cross-signed by its owner?\n     * @returns {boolean}\n     */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Set the local trust state of the device to the given state.\n     *\n     * This won’t affect any cross signing trust state, this only\n     * sets a flag marking to have the given trust state.\n     *\n     * `trust_state` represents the new trust state that should be\n     * set for the device.\n     * @param {LocalTrust} local_state\n     * @returns {Promise<any>}\n     */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return ret;\n    }\n    /**\n     * The user ID of the device owner.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique ID of the device.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the human readable name of the device.\n     * @returns {string | undefined}\n     */\n    get displayName() {\n        const ret = wasm.device_displayName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the key of the given key algorithm belonging to this device.\n     * @param {DeviceKeyAlgorithmName} algorithm\n     * @returns {DeviceKey | undefined}\n     */\n    getKey(algorithm) {\n        const ret = wasm.device_getKey(this.__wbg_ptr, algorithm);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : DeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Get the Curve25519 key of the given device.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the Ed25519 key of the given device.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get a map containing all the device keys.\n     * @returns {Map<any, any>}\n     */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the list of algorithms this device supports.\n     *\n     * Returns `Array<EncryptionAlgorithm>`.\n     * @returns {Array<any>}\n     */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get a map containing all the device signatures.\n     * @returns {Signatures}\n     */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n     * Get the trust state of the device.\n     * @returns {LocalTrust}\n     */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the device locally marked as trusted?\n     * @returns {boolean}\n     */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device locally marked as blacklisted?\n     *\n     * Blacklisted devices won’t receive any group sessions.\n     * @returns {boolean}\n     */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device deleted?\n     * @returns {boolean}\n     */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Timestamp representing the first time this device has been seen (in\n     * milliseconds).\n     * @returns {bigint}\n     */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * Mark this device as verified.\n     * Works only if the device is owned by the current user.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether or not the device is a dehydrated device.\n     * @returns {boolean}\n     */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n * A Matrix key ID.\n *\n * Device identifiers in Matrix are completely opaque character\n * sequences. This type is provided simply for its semantic value.\n */\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n     * Create a new `DeviceId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the device ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.deviceid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n */\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n     * Get the name of the device key.\n     * @returns {DeviceKeyName}\n     */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the value associated to the `Curve25519` device key name.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Ed25519` device key name.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Unknown` device key name.\n     * @returns {string | undefined}\n     */\n    get unknown() {\n        const ret = wasm.devicekey_unknown(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Convert the `DeviceKey` into a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n * The basic key algorithms in the specification.\n */\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n     * Read the device key algorithm's name. If the name is\n     * `Unknown`, one may be interested by the `to_string` method to\n     * read the original name.\n     * @returns {DeviceKeyAlgorithmName}\n     */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Return the device key algorithm as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyalgorithm_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n * A Matrix device key ID.\n *\n * A key algorithm and a device ID, combined with a ‘:’.\n */\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `DeviceKeyId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.devicekeyid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns key algorithm of the device key ID.\n     * @returns {DeviceKeyAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n     * Returns device ID of the device key ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Return the device key ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n * Information on E2E device updates.\n */\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n     * Create an empty `DeviceLists`.\n     *\n     * `changed` and `left` must be an array of `UserId`.\n     *\n     * Items inside `changed` and `left` will be invalidated by this method. Be\n     * careful not to use the `UserId`s after this method has been called.\n     * @param {(UserId)[] | undefined} [changed]\n     * @param {(UserId)[] | undefined} [left]\n     */\n    constructor(changed, left) {\n        var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.devicelists_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns true if there are no device list updates.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * List of users who have updated their device identity keys or\n     * who now share an encrypted room with the client since the\n     * previous sync\n     * @returns {(UserId)[]}\n     */\n    get changed() {\n        const ret = wasm.devicelists_changed(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * List of users who no longer share encrypted rooms since the\n     * previous sync response.\n     * @returns {(UserId)[]}\n     */\n    get left() {\n        const ret = wasm.devicelists_left(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n * An unestablished ECIES session.\n */\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n     * Create a new, random, unestablished ECIES session.\n     *\n     * This method will use the\n     * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n     * info for domain separation when creating the session.\n     */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side to be able to\n     * establish an ECIES channel.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Create a [`EstablishedEcies`] from an initial message encrypted by the\n     * other side.\n     * @param {string} initial_message\n     * @returns {InboundCreationResult}\n     */\n    establish_inbound_channel(initial_message) {\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_inbound_channel(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return InboundCreationResult.__wrap(ret[0]);\n    }\n    /**\n     * Create an [`EstablishedEcies`] session using the other side's Curve25519\n     * public key and an initial plaintext.\n     *\n     * After the channel has been established, we can encrypt messages to send\n     * to the other side. The other side uses the initial message to\n     * establishes the same channel on its side.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} initial_message\n     * @returns {OutboundCreationResult}\n     */\n    establish_outbound_channel(public_key, initial_message) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_outbound_channel(this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return OutboundCreationResult.__wrap(ret[0]);\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n * An Ed25519 public key, used to verify digital signatures.\n */\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n     * The number of bytes an Ed25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Ed25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n * An Ed25519 digital signature, can be used to verify the\n * authenticity of a message.\n */\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n     * Try to create an Ed25519 signature from an unpadded base64\n     * representation.\n     * @param {string} signature\n     */\n    constructor(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ed25519signature_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Serialize a Ed25519 signature to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n * An emoji that is used for interactive verification using a short\n * auth string.\n *\n * This will contain a single emoji and description from the list of\n * emojis from [the specification].\n *\n * [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n */\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n     * The emoji symbol that represents a part of the short auth\n     * string, for example: 🐶\n     * @returns {string}\n     */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The description of the emoji, for example ‘Dog’.\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n * An encrypted attachment, usually created from `Attachment.encrypt`.\n */\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n     * Create a new encrypted attachment manually.\n     *\n     * It needs encrypted data, stored in an `Uint8Array`, and a\n     * [media encryption\n     * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n     * as a JSON-encoded string.\n     *\n     * The media encryption information aren't stored as a string:\n     * they are parsed, validated and fully deserialized.\n     *\n     * See [the specification to learn\n     * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n     * @param {Uint8Array} encrypted_data\n     * @param {string} media_encryption_info\n     */\n    constructor(encrypted_data, media_encryption_info) {\n        const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.encryptedattachment_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The actual encrypted data.\n     *\n     * **Warning**: It returns a **copy** of the entire encrypted\n     * data; be nice with your memory.\n     * @returns {Uint8Array}\n     */\n    get encryptedData() {\n        const ret = wasm.encryptedattachment_encryptedData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Return the media encryption info as a JSON-encoded string. The\n     * structure is fully valid.\n     *\n     * If the media encryption info have been consumed already, it\n     * will return `null`.\n     * @returns {string | undefined}\n     */\n    get mediaEncryptionInfo() {\n        const ret = wasm.encryptedattachment_mediaEncryptionInfo(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Check whether the media encryption info has been consumed by\n     * `Attachment.decrypt` already.\n     * @returns {boolean}\n     */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how an event was decrypted.\n */\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The user ID of the event sender. Note this is untrusted data\n     * unless `verification_state` is also trusted.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event. Note this\n     * is untrusted data unless `verification_state` is also\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     *\n     * # Arguments\n     *\n     * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n     *   mode, unverified users are given no shield, and keys that have been\n     *   forwarded or restored from an insecure backup are given a grey shield\n     *   (both get a red shield in strict mode).\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for an encrypted room.\n *\n * This determines the algorithm and rotation periods of a group\n * session.\n */\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @returns {bigint}\n     */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @param {bigint} arg0\n     */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @returns {bigint}\n     */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @param {bigint} arg0\n     */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @returns {HistoryVisibility}\n     */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @param {HistoryVisibility} arg0\n     */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @returns {CollectStrategy}\n     */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @param {CollectStrategy} arg0\n     */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Create a new `EncryptionSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n * An established ECIES session.\n *\n * This session can be used to encrypt and decrypt messages between the two\n * sides of the channel.\n */\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side so that it can\n     * complete the ECIES channel establishment.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_encrypt(this.__wbg_ptr, ptr0, len0);\n            deferred2_0 = ret[0];\n            deferred2_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypt the given message using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_decrypt(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the [`CheckCode`] which uniquely identifies this\n     * [`EstablishedEcies`] session.\n     *\n     * This check code can be used to verify and confirm that both sides of the\n     * session are indeed using the same shared secret.\n     * @returns {CheckCode}\n     */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n * A Matrix [event ID].\n *\n * An `EventId` is generated randomly or converted from a string\n * slice, and can be converted back into a string as needed.\n *\n * [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `EventId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.eventid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EventIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the event's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the event ID.\n     * @returns {ServerName | undefined}\n     */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n     * Return the event ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n * Struct holding the two public identity keys of an account.\n */\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @returns {Ed25519PublicKey}\n     */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @param {Ed25519PublicKey} arg0\n     */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @returns {Curve25519PublicKey}\n     */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @param {Curve25519PublicKey} arg0\n     */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an inbound ECIES channel establishment.\n */\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The plaintext of the initial message.\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_inboundcreationresult_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The plaintext of the initial message.\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n * Inbound group session.\n *\n * Inbound group sessions are used to exchange room messages between a group of\n * participants. Inbound group sessions are used to decrypt the room messages.\n */\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The room where this session is used in.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the sender of this session, as a\n     * [Curve25519PublicKey].\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Returns the unique identifier for this session.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.inboundgroupsession_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Has the session been imported from a file or server-side backup? As\n     * opposed to being directly received as an `m.room_key` event.\n     * @returns {boolean}\n     */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n * A request that will back up a batch of room keys to the server\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n */\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The backup version that these room keys should be part of.\n     * @returns {string}\n     */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysBackupRequest`.\n     * @param {string} id\n     * @param {string} body\n     * @param {string} version\n     */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(id, body, version);\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/claim` API endpoint\n * ([specification]).\n *\n * Claims one-time keys that can be used to establish 1-to-1 E2EE\n * sessions.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n */\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysclaimrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `one_time_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysclaimrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysClaimRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/query` API endpoint\n * ([specification]).\n *\n * Returns the current devices and identity keys for the given users.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n */\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysqueryrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `device_keys`, `token`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysqueryrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysQueryRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysqueryrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n * Outgoing Requests *\n * Data for a request to the `/keys/upload` API endpoint\n * ([specification]).\n *\n * Publishes end-to-end encryption keys for the device.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n */\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `device_keys`,\n     * `one_time_keys`, `fallback_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysUploadRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysuploadrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n * Represents a signature that is either valid _or_ that could not be\n * decoded.\n */\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n     * Check whether the signature has been successfully decoded.\n     * @returns {boolean}\n     */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Check whether the signature could not be successfully decoded.\n     * @returns {boolean}\n     */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The signature, if successfully decoded.\n     * @returns {Signature | undefined}\n     */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n     * The base64 encoded string that is claimed to contain a\n     * signature but could not be decoded, if any.\n     * @returns {string | undefined}\n     */\n    get invalidSignatureSource() {\n        const ret = wasm.maybesignature_invalidSignatureSource(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n * Js Decryption error with code.\n */\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n     * Description code for the error. See `DecryptionErrorCode`\n     * @returns {DecryptionErrorCode}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * detailed description\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_description(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Withheld code if any. Only for `UnknownMessageIndex` error code\n     * @returns {string | undefined}\n     */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n * The public part of the backup key.\n */\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n     * The actual base64 encoded public key.\n     * @returns {string}\n     */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the full name of the backup algorithm this backup key supports.\n     * @returns {string}\n     */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n * Migration routines\n *\n * The public methods are exposed as static methods on this class, for\n * namespacing and to enable easier mocking in unit tests.\n */\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n     * Import the base dataset from a libolm-based setup to a vodozemac-based\n     * setup stored in IndexedDB.\n     *\n     * Populates the user credentials, Olm account, backup data, etc. This is\n     * the first step in the migration process. Once this base data is\n     * imported, further data can be imported with {@link\n     * #migrateOlmSessions}, {@link #migrateMegolmSessions}, and TODO room settings.\n     *\n     * # Arguments\n     *\n     * * `data` - The data to be migrated\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   account objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {BaseMigrationData} data\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateBaseData(data, pickle_key, store_handle) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n     * stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link #migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n     *   inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {(PickledSession)[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateOlmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n     * setup stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link #migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n     *   import. Items inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the\n     *   megolm session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {(PickledInboundGroupSession)[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n * State machine implementation of the Olm/Megolm encryption protocol\n * used for Matrix end to end encryption.\n */\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n     * Constructor will always fail. To create a new `OlmMachine`, please use\n     * the `initialize` method.\n     *\n     * Why this pattern? `initialize` returns a `Promise`. Returning a\n     */\n    constructor() {\n        const ret = wasm.olmmachine_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Create a new `OlmMachine`.\n     *\n     * The created machine will keep the encryption keys either in a IndexedDB\n     * based store, or in a memory store and once the objects is dropped,\n     * the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `OlmMachine` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   IndexedDB-based store.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {string | undefined} [store_name]\n     * @param {string | undefined} [store_passphrase]\n     * @returns {Promise<any>}\n     */\n    static initialize(user_id, device_id, store_name, store_passphrase) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Create a new `OlmMachine` backed by an existing store.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_handle` - the connection to the crypto store to be used for\n     *   this machine.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static initFromStore(user_id, device_id, store_handle) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The unique user ID that owns this `OlmMachine` instance.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique device ID that identifies this `OlmMachine`.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * The time, in milliseconds since the unix epoch, at which the `Account`\n     * backing this `OlmMachine` was created.\n     *\n     * An `Account` is created when an `OlmMachine` is first instantiated\n     * against a given `Store`, at which point it creates identity keys etc.\n     * This method returns the timestamp, according to the local clock, at\n     * which that happened.\n     * @returns {number}\n     */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public parts of our Olm identity keys.\n     * @returns {IdentityKeys}\n     */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n     * Get the display name of our own device.\n     * @returns {Promise<any>}\n     */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether automatic transmission of room key requests is enabled.\n     *\n     * Room key requests allow the device to request room keys that it might\n     * have missed in the original share using `m.room_key_request`\n     * events.\n     * @returns {boolean}\n     */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable automatic transmission of room key requests.\n     * @param {boolean} enabled\n     */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Whether room key forwarding is enabled.\n     *\n     * If room key forwarding is enabled, we will automatically reply to\n     * incoming `m.room_key_request` messages from verified devices by\n     * forwarding the requested key (if we have it).\n     * @returns {boolean}\n     */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable room key forwarding.\n     * @param {boolean} enabled\n     */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Get the list of users whose devices we are currently tracking.\n     *\n     * A user can be marked for tracking using the\n     * [`update_tracked_users`](#method.update_tracked_users) method.\n     *\n     * Returns a `Set<UserId>`.\n     * @returns {Promise<any>}\n     */\n    trackedUsers() {\n        const ret = wasm.olmmachine_trackedUsers(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Update the list of tracked users.\n     *\n     * The OlmMachine maintains a list of users whose devices we are keeping\n     * track of: these are known as \"tracked users\". These must be users\n     * that we share a room with, so that the server sends us updates for\n     * their device lists.\n     *\n     * # Arguments\n     *\n     * * `users` - An array of user ids that should be added to the list of\n     *   tracked users\n     *\n     * Any users that hadn't been seen before will be flagged for a key query\n     * immediately, and whenever `receive_sync_changes` receives a\n     * \"changed\" notification for that user in the future.\n     *\n     * Users that were already in the list are unaffected.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {(UserId)[]} users\n     * @returns {Promise<any>}\n     */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Mark all tracked users as dirty.\n     *\n     * All users *whose device lists we are tracking* are flagged as needing a\n     * key query. Users whose devices we are not tracking are ignored.\n     * @returns {Promise<void>}\n     */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Handle to-device events and one-time key counts from a sync\n     * response.\n     *\n     * This will decrypt and handle to-device events returning the\n     * decrypted versions of them.\n     *\n     * To decrypt an event from the room timeline call\n     * `decrypt_room_event`.\n     *\n     * # Arguments\n     *\n     * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n     *   response\n     * * `changed_devices`: the mapping of changed and left devices, from the\n     *   `/sync` response\n     * * `one_time_keys_counts`: The number of one-time keys on the server,\n     *   from the `/sync` response. A `Map` from string (encryption algorithm)\n     *   to number (number of keys).\n     * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n     *   the server, from the `/sync` response. If this is set, it is used to\n     *   determine if new fallback keys should be uploaded.\n     *\n     * # Returns\n     *\n     * A list of JSON strings, containing the decrypted to-device events.\n     * @param {string} to_device_events\n     * @param {DeviceLists} changed_devices\n     * @param {Map<any, any>} one_time_keys_counts\n     * @param {Set<any> | undefined} [unused_fallback_keys]\n     * @returns {Promise<any>}\n     */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(changed_devices, DeviceLists);\n        const ret = wasm.olmmachine_receiveSyncChanges(this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, one_time_keys_counts, isLikeNone(unused_fallback_keys) ? 0 : addToExternrefTable0(unused_fallback_keys));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the outgoing requests that need to be sent out.\n     *\n     * This returns a list of values, each of which can be any of:\n     *   * {@link KeysUploadRequest},\n     *   * {@link KeysQueryRequest},\n     *   * {@link KeysClaimRequest},\n     *   * {@link ToDeviceRequest},\n     *   * {@link SignatureUploadRequest},\n     *   * {@link RoomMessageRequest}, or\n     *   * {@link KeysBackupRequest}.\n     *\n     * Those requests need to be sent out to the server and the\n     * responses need to be passed back to the state machine\n     * using {@link OlmMachine.markRequestAsSent}.\n     * @returns {Promise<any>}\n     */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Mark the request with the given request ID as sent (see\n     * `outgoing_requests`).\n     *\n     * Arguments are:\n     *\n     * * `request_id` represents the unique ID of the request that was sent\n     *   out. This is needed to couple the response with the now sent out\n     *   request.\n     * * `response_type` represents the type of the request that was sent out.\n     * * `response` represents the response that was received from the server\n     *   after the outgoing request was sent out.\n     * @param {string} request_id\n     * @param {RequestType} request_type\n     * @param {string} response\n     * @returns {Promise<any>}\n     */\n    markRequestAsSent(request_id, request_type, response) {\n        const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_markRequestAsSent(this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a room message for the given room.\n     *\n     * **Note**: A room key needs to be shared with the group of users that are\n     * members in the given room. If this is not done this method will panic.\n     *\n     * The usual flow to encrypt an event using this state machine is as\n     * follows:\n     *\n     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n     *    the room members of the room we wish to participate in. This is done\n     *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n     *    method. This method call should be locked per call.\n     *\n     * 2. Share a room key with all the room members using the\n     *    [`share_room_key()`](Self::share_room_key). This method call should\n     *    be locked per room.\n     *\n     * 3. Encrypt the event using this method.\n     *\n     * 4. Send the encrypted event to the server.\n     *\n     * After the room key is shared steps 1 and 2 will become noops, unless\n     * there's some changes in the room membership or in the list of devices a\n     * member has.\n     *\n     *\n     * `room_id` is the ID of the room for which the message should\n     * be encrypted. `event_type` is the type of the event. `content`\n     * is the plaintext content of the message that should be\n     * encrypted.\n     *\n     * # Panics\n     *\n     * Panics if a group session for the given room wasn't shared\n     * beforehand.\n     * @param {RoomId} room_id\n     * @param {string} event_type\n     * @param {string} content\n     * @returns {Promise<any>}\n     */\n    encryptRoomEvent(room_id, event_type, content) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_encryptRoomEvent(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Decrypt an event from a room timeline.\n     *\n     * # Arguments\n     *\n     * * `event`, the event that should be decrypted.\n     * * `room_id`, the ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n     * rejects with a {@link MegolmDecryptionError} instance.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @param {DecryptionSettings} decryption_settings\n     * @returns {Promise<any>}\n     */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        _assertClass(decryption_settings, DecryptionSettings);\n        const ret = wasm.olmmachine_decryptRoomEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get encryption info for a decrypted timeline event.\n     *\n     * This recalculates the `EncryptionInfo` data that is returned by\n     * `decryptRoomEvent`, based on the current\n     * verification status of the sender, etc.\n     *\n     * Returns an error for an unencrypted event.\n     *\n     * # Arguments\n     *\n     * * `event` - The event to get information for.\n     * * `room_id` - The ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * {@link EncryptionInfo}\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomEventEncryptionInfo(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomEventEncryptionInfo(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the status of the private cross signing keys.\n     *\n     * This can be used to check which private cross signing keys we\n     * have stored locally.\n     * @returns {Promise<any>}\n     */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Export all the secrets we have in the store into a {@link\n     * SecretsBundle}.\n     *\n     * This method will export all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version.\n     *\n     * The method will fail if we don't have all three private cross-signing\n     * keys available.\n     *\n     * **Warning**: Only export this and share it with a trusted recipient,\n     * i.e. if an existing device is sharing this with a new device.\n     * @returns {Promise<SecretsBundle>}\n     */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import and persists secrets from a {@link SecretsBundle}.\n     *\n     * This method will import all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version into the store.\n     *\n     * **Warning**: Only import this from a trusted source, i.e. if an existing\n     * device is sharing this with a new device. The imported cross-signing\n     * keys will create a {@link OwnUserIdentity} and mark it as verified.\n     *\n     * The backup key will be persisted in the store and can be enabled using\n     * the {@link BackupMachine}.\n     *\n     * The provided `SecretsBundle` is freed by this method; be careful not to\n     * use it once this method has been called.\n     * @param {SecretsBundle} bundle\n     * @returns {Promise<void>}\n     */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return ret;\n    }\n    /**\n     * Export all the private cross signing keys we have.\n     *\n     * The export will contain the seeds for the ed25519 keys as\n     * unpadded base64 encoded strings.\n     *\n     * Returns `null` if we don’t have any private cross signing keys;\n     * otherwise returns a `CrossSigningKeyExport`.\n     * @returns {Promise<any>}\n     */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import our private cross signing keys.\n     *\n     * The keys should be provided as unpadded-base64-encoded strings.\n     *\n     * Returns a `CrossSigningStatus`.\n     * @param {string | undefined} [master_key]\n     * @param {string | undefined} [self_signing_key]\n     * @param {string | undefined} [user_signing_key]\n     * @returns {Promise<any>}\n     */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return ret;\n    }\n    /**\n     * Create a new cross signing identity and get the upload request\n     * to push the new public keys to the server.\n     *\n     * Warning: This will delete any existing cross signing keys that\n     * might exist on the server and thus will reset the trust\n     * between all the devices.\n     *\n     * Uploading these keys will require user interactive auth.\n     *\n     * # Arguments\n     *\n     * * `reset`, whether the method should create a new identity or use the\n     *   existing one during the request. If set to true, the request will\n     *   attempt to upload a new identity. If set to false, the request will\n     *   attempt to upload the existing identity. Since the uploading process\n     *   requires user interactive authentication, which involves sending out\n     *   the same request multiple times, setting this argument to false\n     *   enables you to reuse the same request.\n     *\n     * Returns a {@link CrossSigningBootstrapRequests}.\n     * @param {boolean} reset\n     * @returns {Promise<any>}\n     */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return ret;\n    }\n    /**\n     * Get the cross signing user identity of a user.\n     *\n     * Returns a promise for an {@link identities.OwnUserIdentity}, a\n     * {@link identities.OtherUserIdentity}, or `undefined`.\n     * @param {UserId} user_id\n     * @returns {Promise<any>}\n     */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sign the given message using our device key and if available\n     * cross-signing master key.\n     * @param {string} message\n     * @returns {Promise<any>}\n     */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Invalidate the currently active outbound group session for the\n     * given room.\n     *\n     * Returns true if a session was invalidated, false if there was\n     * no session to invalidate.\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get to-device requests to share a room key with users in a room.\n     *\n     * `room_id` is the room ID. `users` is an array of `UserId`\n     * objects. `encryption_settings` are an `EncryptionSettings`\n     * object.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight for the same room, e.g. using a lock.\n     *\n     * Returns an array of `ToDeviceRequest`s.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {RoomId} room_id\n     * @param {(UserId)[]} users\n     * @param {EncryptionSettings} encryption_settings\n     * @returns {Promise<any>}\n     */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate an \"out-of-band\" key query request for the given set of users.\n     *\n     * This can be useful if we need the results from `getIdentity` or\n     * `getUserDevices` to be as up-to-date as possible.\n     *\n     * Returns a `KeysQueryRequest` object. The response of the request should\n     * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {(UserId)[]} users\n     * @returns {KeysQueryRequest}\n     */\n    queryKeysForUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_queryKeysForUsers(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return KeysQueryRequest.__wrap(ret[0]);\n    }\n    /**\n     * Get the a key claiming request for the user/device pairs that\n     * we are missing Olm sessions for.\n     *\n     * Returns `null` if no key claiming request needs to be sent\n     * out, otherwise it returns a `KeysClaimRequest` object.\n     *\n     * Sessions need to be established between devices so group\n     * sessions for a room can be shared with them.\n     *\n     * This should be called every time a group session needs to be\n     * shared as well as between sync calls. After a sync some\n     * devices may request room keys without us having a valid Olm\n     * session with them, making it impossible to server the room key\n     * request, thus it’s necessary to check for missing sessions\n     * between sync as well.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight, e.g. using a lock.\n     *\n     * The response of a successful key claiming requests needs to be\n     * passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * `users` represents the list of users that we should check if\n     * we lack a session with one of their devices. This can be an\n     * empty iterator when calling this method between sync requests.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {(UserId)[]} users\n     * @returns {Promise<any>}\n     */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get a map holding all the devices of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * A {@link UserDevices} object.\n     * @param {UserId} user_id\n     * @param {number | undefined} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a specific device of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `device_id` - The unique ID of the device.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * If the device is known, a {@link Device}. Otherwise, `undefined`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {number | undefined} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a verification object for the given user ID with the given\n     * flow ID (a to-device request ID if the verification has been\n     * requested by a to-device request, or a room event ID if the\n     * verification has been requested by a room event).\n     *\n     * It returns a “`Verification` object”, which is either a `Sas`\n     * or `Qr` object.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {any}\n     */\n    getVerification(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerification(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get a verification request object with the given flow ID.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {VerificationRequest | undefined}\n     */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n     * Get all the verification requests of a given user.\n     * @param {UserId} user_id\n     * @returns {Array<any>}\n     */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Receive a verification event.\n     *\n     * This method can be used to pass verification events that are happening\n     * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    receiveVerificationEvent(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_receiveVerificationEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Export the keys that match the given predicate.\n     *\n     * `predicate` is a closure that will be called for every known\n     * `InboundGroupSession`, which represents a room key. If the closure\n     * returns `true`, the `InboundGroupSession` will be included in the\n     * export; otherwise it won't.\n     *\n     * Returns a Promise containing a Result containing a String which is a\n     * JSON-encoded array of ExportedRoomKey objects.\n     * @param {Function} predicate\n     * @returns {Promise<any>}\n     */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, predicate);\n        return ret;\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n     * return type is different.\n     *\n     * Returns a String containing a JSON-encoded object, holding three\n     * properties:\n     *  * `total_count` (the total number of keys found in the export data).\n     *  * `imported_count` (the number of keys that were imported).\n     *  * `keys` (the keys that were imported; a map from room id to a map of\n     *    the sender key to a list of session ids).\n     *\n     * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * `exported_keys` is a JSON-encoded list of previously exported keys that\n     * should be imported into our store. If we already have a better\n     * version of a key, the key will _not_ be imported.\n     *\n     * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n     * `progress` and `total`, and returns nothing.\n     *\n     * Returns a {@link RoomKeyImportResult}.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importExportedRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * # Arguments\n     *\n     * * `backed_up_room_keys`: keys that were retrieved from backup and that\n     *   should be added to our store (provided they are better than our\n     *   current versions of those keys). Specifically, it should be a Map from\n     *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n     *   structure.\n     *\n     * * `progress_listener`: an optional callback that takes 3 arguments:\n     *   `progress` (the number of keys that have successfully been imported),\n     *   `total` (the total number of keys), and `failures` (the number of keys\n     *   that failed to import), and returns nothing.\n     *\n     * # Returns\n     *\n     * A {@link RoomKeyImportResult}.\n     * @param {Map<any, any>} backed_up_room_keys\n     * @param {Function | undefined} progress_listener\n     * @param {string} backup_version\n     * @returns {Promise<any>}\n     */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importBackedUpRoomKeys(this.__wbg_ptr, backed_up_room_keys, isLikeNone(progress_listener) ? 0 : addToExternrefTable0(progress_listener), ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Store the backup decryption key in the crypto store.\n     *\n     * This is useful if the client wants to support gossiping of the backup\n     * key.\n     *\n     * Returns `Promise<void>`.\n     * @param {BackupDecryptionKey} decryption_key\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the backup keys we have saved in our store.\n     * Returns a `Promise` for {@link BackupKeys}.\n     * @returns {Promise<any>}\n     */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Check if the given backup has been verified by us or by another of our\n     * devices that we trust.\n     *\n     * The `backup_info` should be a Javascript object with the following\n     * format:\n     *\n     * ```json\n     * {\n     *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n     *     \"auth_data\": {\n     *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n     *         \"signatures\": {}\n     *     }\n     * }\n     * ```\n     *\n     * Returns a {@link SignatureVerification} object.\n     * @param {any} backup_info\n     * @returns {Promise<any>}\n     */\n    verifyBackup(backup_info) {\n        const ret = wasm.olmmachine_verifyBackup(this.__wbg_ptr, backup_info);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Activate the given backup key to be used with the given backup version.\n     *\n     * **Warning**: The caller needs to make sure that the given `BackupKey` is\n     * trusted, otherwise we might be encrypting room keys that a malicious\n     * party could decrypt.\n     *\n     * The {@link #verifyBackup} method can be used to do so.\n     *\n     * Returns `Promise<void>`.\n     * @param {string} public_key_base_64\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    enableBackupV1(public_key_base_64, version) {\n        const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_enableBackupV1(this.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Are we able to encrypt room keys.\n     *\n     * This returns true if we have an active `BackupKey` and backup version\n     * registered with the state machine.\n     *\n     * Returns `Promise<bool>`.\n     * @returns {Promise<any>}\n     */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Disable and reset our backup state.\n     *\n     * This will remove any pending backup request, remove the backup key and\n     * reset the backup state of each room key we have.\n     *\n     * Returns `Promise<void>`.\n     * @returns {Promise<any>}\n     */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt a batch of room keys and return a request that needs to be sent\n     * out to backup the room keys.\n     *\n     * Returns an optional {@link KeysBackupRequest}.\n     * @returns {Promise<any>}\n     */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the number of backed up room keys and the total number of room keys.\n     * Returns a {@link RoomKeyCounts}.\n     * @returns {Promise<any>}\n     */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt the list of exported room keys using the given passphrase.\n     *\n     * `exported_room_keys` is a list of sessions that should be encrypted\n     * (it's generally returned by `export_room_keys`). `passphrase` is the\n     * passphrase that will be used to encrypt the exported room keys. And\n     * `rounds` is the number of rounds that should be used for the key\n     * derivation when the passphrase gets turned into an AES key. More rounds\n     * are increasingly computationnally intensive and as such help against\n     * brute-force attacks. Should be at least `10_000`, while values in the\n     * `100_000` ranges should be preferred.\n     * @param {string} exported_room_keys\n     * @param {string} passphrase\n     * @param {number} rounds\n     * @returns {string}\n     */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_encryptExportedRoomKeys(ptr0, len0, ptr1, len1, rounds);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Try to decrypt a reader into a list of exported room keys.\n     *\n     * `encrypted_exported_room_keys` is the result from\n     * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n     * used when calling `encrypt_exported_room_keys`.\n     * @param {string} encrypted_exported_room_keys\n     * @param {string} passphrase\n     * @returns {string}\n     */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_decryptExportedRoomKeys(ptr0, len0, ptr1, len1);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a room key.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeyUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever we receive a\n     * notification that some room keys have been withheld.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeysWithheldCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a user identity.\n     *\n     * `callback` should be a function that takes a single argument (a {@link\n     * UserId}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerUserIdentityUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a device.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of user IDs as strings) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerDevicesUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever a secret\n     * (`m.secret.send`) is received.\n     *\n     * The only secret this will currently broadcast is the\n     * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n     *\n     * To request a secret from other devices, a client sends an\n     * `m.secret.request` device event with `action` set to `request` and\n     * `name` set to the identifier of the secret. A device that wishes to\n     * share the secret will reply with an `m.secret.send` event, encrypted\n     * using olm.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from a one of the user's own verified devices.\n     *\n     * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n     *\n     * `callback` should be a function that takes 2 arguments: the secret name\n     * (string) and value (string).\n     *\n     * **Note**: if the secret is valid and handled on the javascript side, the\n     * secret inbox should be cleared by calling\n     * `delete_secrets_from_inbox`.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerReceiveSecretCallback(callback) {\n        const ret = wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Get all the secrets with the given secret_name we have currently\n     * stored.\n     * The only secret this will currently return is the\n     * `m.megolm_backup.v1` secret.\n     *\n     * Usually you would just register a callback with\n     * [`register_receive_secret_callback`], but if the client is shut down\n     * before handling them, this method can be used to retrieve them.\n     * This method should therefore be called at client startup to retrieve any\n     * secrets received during the previous session.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from one of the user's own verified devices.\n     *\n     * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n     * values.\n     *\n     * If the secret is valid and handled, the secret inbox should be cleared\n     * by calling `delete_secrets_from_inbox`.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Delete all secrets with the given secret name from the inbox.\n     *\n     * Should be called after handling the secrets with\n     * `get_secrets_from_inbox`.\n     *\n     * # Arguments\n     *\n     * * `secret_name` - The name of the secret to delete.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Request missing local secrets from our other trusted devices.\n     *\n     * \"Local secrets\" refers to secrets which can be shared between trusted\n     * devices, such as private cross-signing keys, and the megolm backup\n     * decryption key.\n     *\n     * This method will cause the sdk to generated outgoing secret requests\n     * (`m.secret.request`) to get the missing secrets. These requests will\n     * then be returned by a future call to {@link\n     * OlmMachine#outgoing_requests}.\n     *\n     * # Returns\n     *\n     * A `Promise` for a `bool` result, which will be true if  secrets were\n     * missing, and a request was generated.\n     * @returns {Promise<Promise<any>>}\n     */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the stored room settings, such as the encryption algorithm or\n     * whether to encrypt only for trusted devices.\n     *\n     * These settings can be modified via {@link #setRoomSettings}.\n     *\n     * # Returns\n     *\n     * `Promise<RoomSettings|undefined>`\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store encryption settings for the given room.\n     *\n     * This method checks if the new settings are \"safe\" -- ie, that they do\n     * not represent a downgrade in encryption security from any previous\n     * settings. Attempts to downgrade security will result in an error.\n     *\n     * If the settings are valid, they will be persisted to the crypto store.\n     * These settings are not used directly by this library, but the saved\n     * settings can be retrieved via {@link #getRoomSettings}.\n     * @param {RoomId} room_id\n     * @param {RoomSettings} room_settings\n     * @returns {Promise<void>}\n     */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Manage dehydrated devices\n     * @returns {DehydratedDevices}\n     */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n     * Shut down the `OlmMachine`.\n     *\n     * The `OlmMachine` cannot be used after this method has been called.\n     *\n     * All associated resources will be closed too, like IndexedDB\n     * connections.\n     */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that isn't our own. Other users will\n * only contain a master key and a self signing key, meaning that only device\n * signatures can be checked with this identity.\n *\n * This struct wraps a read-only version of the struct and allows verifications\n * to be requested to verify our own device with the user identity.\n */\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Manually verify this user.\n     *\n     * This method will attempt to sign the user identity using our private\n     * cross signing key.\n     *\n     * This method fails if we don't have the private part of our user-signing\n     * key.\n     *\n     * Returns a request that needs to be sent out for the user to be marked as\n     * verified.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a `VerificationRequest` object after the verification\n     * request content has been sent out.\n     * @param {RoomId} room_id\n     * @param {EventId} request_event_id\n     * @param {any[] | undefined} [methods]\n     * @returns {VerificationRequest}\n     */\n    requestVerification(room_id, request_event_id, methods) {\n        _assertClass(room_id, RoomId);\n        _assertClass(request_event_id, EventId);\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.otheruseridentity_requestVerification(this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return VerificationRequest.__wrap(ret[0]);\n    }\n    /**\n     * Send a verification request to the given user.\n     *\n     * The returned content needs to be sent out into a DM room with the given\n     * user.\n     *\n     * After the content has been sent out a VerificationRequest can be started\n     * with the `request_verification` method.\n     * @param {any[] | undefined} [methods]\n     * @returns {string}\n     */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.otheruseridentity_verificationRequestContent(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Pin the current identity (public part of the master signing key).\n     * @returns {Promise<any>}\n     */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the identity changed in a way that requires approval from the user?\n     *\n     * A user identity needs approval if it changed after the crypto machine\n     * has already observed (\"pinned\") a different identity for that user,\n     * unless it is an explicitly verified identity (using for example\n     * interactive verification).\n     *\n     * This situation can be resolved by:\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n     * @returns {boolean}\n     */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * True if we verified this identity (with any own identity, at any\n     * point).\n     *\n     * To set this latch back to false, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not anymore it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an outbound ECIES channel establishment.\n */\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The initial encrypted message.\n     * @returns {string}\n     */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_outboundcreationresult_initial_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The initial encrypted message.\n     * @param {string} arg0\n     */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that is our own.\n */\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Mark our user identity as verified.\n     *\n     * This will mark the identity locally as verified and sign it with our own\n     * device.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Send a verification request to our other devices.\n     * @param {any[] | undefined} [methods]\n     * @returns {Promise<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ownuseridentity_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Does our user identity trust our own device, i.e. have we signed our own\n     * device keys with our self-signing key?\n     * @returns {Promise<any>}\n     */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the user-signing key of the identity. This is only present for our\n     * own user identity.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_userSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * True if we verified our own identity at some point in the past.\n     *\n     * To reset this latch back to `false`, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not any longer, it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of an `InboundGroupSession`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an InboundGroupSession.\n */\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @returns {string | undefined}\n     */\n    get senderSigningKey() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_senderSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @param {string | undefined} [arg0]\n     */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @param {RoomId | undefined} [arg0]\n     */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @returns {boolean}\n     */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @param {boolean} arg0\n     */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @returns {boolean}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @param {boolean} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledInboundGroupSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of a `Session`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an Olm Session. Can be imported into the rust store with {@link\n * #migrateOlmSessions}.\n */\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @returns {boolean}\n     */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @param {boolean} arg0\n     */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was created.\n     * @returns {Date}\n     */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was created.\n     * @param {Date} arg0\n     */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was last used.\n     * @returns {Date}\n     */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was last used.\n     * @param {Date} arg0\n     */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n * A request that will upload a dehydrated device to the server.\n */\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `PutDehydratedDeviceRequest`\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n * QR code based verification.\n */\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n     * Get the current state of this request.\n     *\n     * Returns a `QrState`.\n     * @returns {QrState}\n     */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the QR verification been scanned by the other side.\n     *\n     * When the verification object is in this state it’s required\n     * that the user confirms that the other side has scanned the QR\n     * code.\n     * @returns {boolean}\n     */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the scanning of the QR code been confirmed by us?\n     * @returns {boolean}\n     */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other user that is participating in\n     * this verification flow.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification flow completed?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we successfully scanned the QR code and are able to send\n     * a reciprocation event?\n     * @returns {boolean}\n     */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the unique ID that identifies this QR verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qr_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room id if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Generate a QR code object that is representing this\n     * verification flow.\n     *\n     * The QrCode can then be rendered as an image or as an unicode\n     * string.\n     *\n     * The `to_bytes` method can be used to instead output the raw\n     * bytes that should be encoded as a QR code.\n     *\n     * Returns a `QrCode`.\n     * @returns {QrCode}\n     */\n    toQrCode() {\n        const ret = wasm.qr_toQrCode(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCode.__wrap(ret[0]);\n    }\n    /**\n     * Generate a the raw bytes that should be encoded as a QR code\n     * is representing this verification flow.\n     *\n     * The `to_qr_code` method can be used to instead output a QrCode\n     * object that can be rendered.\n     * @returns {Uint8ClampedArray}\n     */\n    toBytes() {\n        const ret = wasm.qr_toBytes(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Notify the other side that we have successfully scanned the QR\n     * code and that the QR verification flow can start.\n     *\n     * This will return some OutgoingContent if the object is in the\n     * correct state to start the verification flow, otherwise None.\n     * @returns {any}\n     */\n    reciprocate() {\n        const ret = wasm.qr_reciprocate(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm that the other side has scanned our QR code.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already confirmed.\n     * @returns {any}\n     */\n    confirmScanning() {\n        const ret = wasm.qr_confirmScanning(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification flow.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.qr_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qr_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n * A QR code.\n */\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n     * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n     * dark pixel and 0 a white pixel.\n     * @returns {Uint8ClampedArray}\n     */\n    renderIntoBuffer() {\n        const ret = wasm.qrcode_renderIntoBuffer(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n * Data for the QR code login mechanism.\n *\n * The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n * be decoded from a QR code.\n */\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n     * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n     * and, optionally, a server name for the homeserver.\n     *\n     * If a server name is given, then the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n     * the existing device to display the QR code.\n     *\n     * If no server name is given, the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n     * new device to display the QR code.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} rendezvous_url\n     * @param {string | undefined} [server_name]\n     */\n    constructor(public_key, rendezvous_url, server_name) {\n        _assertClass(public_key, Curve25519PublicKey);\n        var ptr0 = public_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_new(ptr0, ptr1, len1, ptr2, len2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n     *\n     * The slice of bytes would generally be returned by a QR code decoder.\n     * @param {Uint8Array} bytes\n     * @returns {QrCodeData}\n     */\n    static fromBytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBytes(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a list of bytes.\n     *\n     * The list of bytes can be used by a QR code generator to create an image\n     * containing a QR code.\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        const ret = wasm.qrcodedata_toBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n     * object.\n     * @param {string} data\n     * @returns {QrCodeData}\n     */\n    static fromBase64(data) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a string using base64.\n     *\n     * This format can be used for debugging purposes and the\n     * [`QrcodeData::from_base64()`] method can be used to parse the string\n     * again.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n     *\n     * This Curve25519 public key should be used to establish an\n     * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n     * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n     * device.\n     * @returns {Curve25519PublicKey}\n     */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the URL of the rendezvous server which will be used to exchange\n     * messages between the two devices.\n     * @returns {string}\n     */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_rendezvousUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the server name of the homeserver which the new device will be\n     * logged in to.\n     *\n     * This will be only available if the existing device has generated the QR\n     * code and the new device is the one scanning the QR code.\n     * @returns {string | undefined}\n     */\n    get serverName() {\n        const ret = wasm.qrcodedata_serverName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the mode of this {@link QrCodeData} instance.\n     * @returns {QrCodeMode}\n     */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n * A scanned QR code.\n */\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n     * Parse the decoded payload of a QR code in byte slice form.\n     *\n     * This method is useful if you would like to do your own custom QR code\n     * decoding.\n     * @param {Uint8ClampedArray} buffer\n     * @returns {QrCodeScan}\n     */\n    static fromBytes(buffer) {\n        const ret = wasm.qrcodescan_fromBytes(buffer);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeScan.__wrap(ret[0]);\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A rehydrated device\n *\n * This device can receive to-device events to get room keys that were send to\n * it.\n */\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Receive the to-device events that sent to the dehydrated device\n     *\n     * The rehydrated device will decrypt the events and pass the room keys\n     * into the `OlmMachine`.\n     *\n     * `to_device_events` is a JSON-encoded result of the `events` array from\n     * `/dehydrated_device/{device_id}/events`.\n     *\n     * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n     * received.\n     * @param {string} to_device_events\n     * @returns {Promise<Array<any>>}\n     */\n    receiveEvents(to_device_events) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n * A Matrix [room ID].\n *\n * [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `RoomId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.roomid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        RoomIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the room ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n * Struct holding the number of room keys we have.\n */\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n     * The total number of room keys.\n     * @returns {number}\n     */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The total number of room keys.\n     * @param {number} arg0\n     */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The number of backed up room keys.\n     * @returns {number}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The number of backed up room keys.\n     * @param {number} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n * The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n * {@link OlmMachine.importBackedUpRoomKeys}.\n */\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n     * The number of room keys that were imported.\n     * @returns {number}\n     */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The total number of room keys that were found in the export.\n     * @returns {number}\n     */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The keys that were imported.\n     *\n     * A Map from room id to a Map of the sender key to a Set of session ids.\n     *\n     * Typescript type: `Map<string, Map<string, Set<string>>`.\n     * @returns {Map<any, any>}\n     */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n * Information on a room key that has been received or imported.\n */\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n     * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n     * of the `m.megolm.*` algorithms.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The room where the key is used.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device which initiated the session originally.\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The ID of the session that the key is for.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeyinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n * Information on a received `m.room_key.withheld` event.\n */\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n     * The User ID of the user that sent us the `m.room_key.withheld` message.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The encryption algorithm of the session that is being withheld.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `code` from the `m.room_key.withheld` message, such as\n     * `m.unverified`.\n     * @returns {string}\n     */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_withheldCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The room ID of the session that is being withheld.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The session ID of the session that is being withheld.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n * A customized owned request type for sending out room messages\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n */\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_roommessagerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the room to send the event to.\n     * @returns {string}\n     */\n    get room_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_room_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the transaction ID for this event.\n     *\n     * Clients should generate an ID unique across requests with the same\n     * access token; it will be used by the server to ensure idempotency of\n     * requests.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event to be sent.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_roommessagerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the message's content.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `RoomMessageRequest`.\n     * @param {string} id\n     * @param {string} room_id\n     * @param {string} txn_id\n     * @param {string} event_type\n     * @param {string} content\n     */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(id, room_id, txn_id, event_type, content);\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n * Room encryption settings which are modified by state events or user options\n */\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @returns {boolean}\n     */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @param {boolean} arg0\n     */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMs() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @param {number | undefined} [arg0]\n     */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMessages() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @param {number | undefined} [arg0]\n     */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * Create a new `RoomSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n * Short Authentication String (SAS) verification.\n */\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get our own device ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other side.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the unique ID that identifies this SAS verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.sas_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Does this verification flow support displaying emoji for the\n     * short authentication string?\n     * @returns {boolean}\n     */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did this verification flow start from a verification request?\n     * @returns {boolean}\n     */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we confirmed that the short auth string matches?\n     * @returns {boolean}\n     */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification been accepted by both parties?\n     * @returns {boolean}\n     */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * True if we initiated the verification flow (ie, we sent the\n     * `m.key.verification.request`).\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the SAS verification.\n     *\n     * This does nothing (and returns `undefined`) if the verification was\n     * already accepted, otherwise it returns an `OutgoingRequest`\n     * that needs to be sent out.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.sas_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm the SAS verification.\n     *\n     * This confirms that the short auth strings match on both sides.\n     *\n     * Does nothing if we’re not in a state where we can confirm the\n     * short auth string.\n     *\n     * Returns a `Promise` for an array of `OutgoingRequest`s.\n     * @returns {Promise<any>}\n     */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Cancel the verification.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.sas_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.sas_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Has the SAS verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Are we in a state where we can show the short auth string?\n     * @returns {boolean}\n     */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow done?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the emoji version of the short auth string.\n     *\n     * Returns `undefined` if we can't yet present the short auth string,\n     * otherwise an array of seven `Emoji` objects.\n     * @returns {(Emoji)[] | undefined}\n     */\n    emoji() {\n        const ret = wasm.sas_emoji(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the index of the emoji representing the short auth string\n     *\n     * Returns `undefined` if we can’t yet present the short auth\n     * string, otherwise seven `u8` numbers in the range from 0 to 63\n     * inclusive which can be converted to an emoji using [the\n     * relevant specification\n     * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n     * @returns {Uint8Array | undefined}\n     */\n    emojiIndex() {\n        const ret = wasm.sas_emojiIndex(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the decimal version of the short auth string.\n     *\n     * Returns None if we can’t yet present the short auth string,\n     * otherwise a tuple containing three 4-digit integers that\n     * represent the short auth string.\n     * @returns {Uint16Array | undefined}\n     */\n    decimals() {\n        const ret = wasm.sas_decimals(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU16FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 2, 2);\n        }\n        return v1;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n * Struct containing the bundle of secrets to fully activate a new device for\n * end-to-end encryption.\n */\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_masterKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_selfSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_userSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The bundle of the backup decryption key and backup version if any.\n     * @returns {BackupSecretsBundle | undefined}\n     */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n     * Serialize the [`SecretsBundle`] to a JSON object.\n     * @returns {any}\n     */\n    to_json() {\n        const ret = wasm.secretsbundle_to_json(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Deserialize the [`SecretsBundle`] from a JSON object.\n     * @param {any} json\n     * @returns {SecretsBundle}\n     */\n    static from_json(json) {\n        const ret = wasm.secretsbundle_from_json(json);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return SecretsBundle.__wrap(ret[0]);\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n * A Matrix-spec compliant [server name].\n *\n * It consists of a host and an optional port (separated by a colon if\n * present).\n *\n * [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n */\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `ServerName`.\n     * @param {string} name\n     */\n    constructor(name) {\n        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.servername_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ServerNameFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the host of the server name.\n     *\n     * That is: Return the part of the server before `:<port>` or the\n     * full server name if there is no port.\n     * @returns {string}\n     */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.servername_host(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the port of the server name if any.\n     * @returns {number | undefined}\n     */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * Returns true if and only if the server name is an IPv4 or IPv6\n     * address.\n     * @returns {boolean}\n     */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n */\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n     * The shield color\n     * @returns {ShieldColor}\n     */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The shield color\n     * @param {ShieldColor} arg0\n     */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @returns {ShieldStateCode | undefined}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 6 ? undefined : ret;\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @param {ShieldStateCode | undefined} [arg0]\n     */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 6 : arg0);\n    }\n    /**\n     * Error message that can be displayed as a tooltip\n     * @returns {string | undefined}\n     */\n    get message() {\n        const ret = wasm.shieldstate_message(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n * Represents a potentially decoded signature (but not a validated\n * one).\n */\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n     * Get the Ed25519 signature, if this is one.\n     * @returns {Ed25519Signature | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Convert the signature to a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/signatures/upload` API endpoint\n * ([specification]).\n *\n * Publishes cross-signing signatures for the user.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n */\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * Some signature upload will have to an `id` field, some won't.\n     * They have one when they are created automatically during an interactive\n     * verification, otherwise they don't.\n     * @returns {string | undefined}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the payload of the request\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `SignatureUploadRequest`.\n     * @param {string} id\n     * @param {string} signed_keys\n     */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(id, signed_keys);\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n * The result of a signature verification of a signed JSON object.\n */\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n     * Give the backup signature state from the current device.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Give the backup signature state from the current user identity.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the result considered to be trusted?\n     *\n     * This tells us if the result has a valid signature from any of the\n     * following:\n     *\n     * * Our own device\n     * * Our own user identity, provided the identity is trusted as well\n     * * Any of our own devices, provided the device is trusted as well\n     * @returns {boolean}\n     */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n * A collection of `Signature`.\n */\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n     * Creates a new, empty, signatures collection.\n     */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Add the given signature from the given signer and the given key ID to\n     * the collection.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @param {Ed25519Signature} signature\n     * @returns {MaybeSignature | undefined}\n     */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n     * Try to find an Ed25519 signature from the given signer with\n     * the given key ID.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @returns {Ed25519Signature | undefined}\n     */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Get the map of signatures that belong to the given user.\n     * @param {UserId} signer\n     * @returns {Map<any, any> | undefined}\n     */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Remove all the signatures we currently hold.\n     */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n     * Do we hold any signatures or is our collection completely\n     * empty.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * How many signatures do we currently hold.\n     * @returns {number}\n     */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Get the json with all signatures\n     * @returns {string}\n     */\n    asJSON() {\n        const ret = wasm.signatures_asJSON(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n * A struct containing an open connection to a CryptoStore.\n *\n * Opening the CryptoStore can take some time, due to the PBKDF calculation\n * involved, so if multiple operations are being done on the same store, it is\n * more efficient to open it once.\n */\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n     * Open a crypto store.\n     *\n     * The created store will be based on IndexedDB if a `store_name` is\n     * provided; otherwise it will be based on a memory store and once the\n     * objects is dropped, the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `StoreHandle` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   store, for IndexedDB-based stores\n     * @param {string | undefined} [store_name]\n     * @param {string | undefined} [store_passphrase]\n     * @returns {Promise<StoreHandle>}\n     */\n    static open(store_name, store_passphrase) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Open a crypto store based on IndexedDB, using the given key for\n     * encryption.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database.\n     *\n     * * `store_key` - The key that should be used to encrypt the store, for\n     *   IndexedDB-based stores. Must be a 32-byte array.\n     * @param {string} store_name\n     * @param {Uint8Array} store_key\n     * @returns {Promise<StoreHandle>}\n     */\n    static openWithKey(store_name, store_key) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/sendToDevice` API endpoint\n * ([specification]).\n *\n * Send an event to a single device or to a group of devices.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n */\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * For to-device request this would be the same value as `txn_id`. It is\n     * exposed also as `id` so that the js bindings are consistent with the\n     * other request types by using this field to mark as sent.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_todevicerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event being sent to each devices.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_todevicerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing a request identifier unique to the access token\n     * used to send the request.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_todevicerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `messages`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_todevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `ToDeviceRequest`.\n     * @param {string} id\n     * @param {string} event_type\n     * @param {string} txn_id\n     * @param {string} body\n     */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(id, event_type, txn_id, body);\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n * Type to install and to manipulate the tracing layer.\n */\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n     * Check whether the `tracing` feature has been enabled.\n     *\n     * @deprecated: `tracing` is now always enabled.\n     * @returns {boolean}\n     */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n     * Install the tracing layer.\n     * @param {LoggerLevel} min_level\n     */\n    constructor(min_level) {\n        const ret = wasm.tracing_new(min_level);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        TracingFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Re-define the minimum logger level.\n     * @param {LoggerLevel} min_level\n     */\n    set minLevel(min_level) {\n        const ret = wasm.tracing_set_minLevel(this.__wbg_ptr, min_level);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger on, i.e. it emits logs again if it was turned\n     * off.\n     */\n    turnOn() {\n        const ret = wasm.tracing_turnOn(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger off, i.e. it no longer emits logs.\n     */\n    turnOff() {\n        const ret = wasm.tracing_turnOff(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n * Other Requests *\n * Request that will publish a cross signing identity.\n *\n * This uploads the public cross signing key triplet.\n */\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `master_key`,\n     * `self_signing_key`, `user_signing_key`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_uploadsigningkeysrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `UploadSigningKeysRequest`.\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.uploadsigningkeysrequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n * A read only view over all devices belonging to a user.\n */\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n     * Get the specific device with the given device ID.\n     * @param {DeviceId} device_id\n     * @returns {Device | undefined}\n     */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n     * Returns true if there is at least one devices of this user\n     * that is considered to be verified, false otherwise.\n     *\n     * This won't consider your own device as verified, as your own\n     * device is always implicitly verified.\n     * @returns {boolean}\n     */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Array over all the device IDs of the user devices.\n     * @returns {Array<any>}\n     */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Iterator over all the devices of the user devices.\n     * @returns {Array<any>}\n     */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n * A Matrix [user ID].\n *\n * [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n */\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `UserId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.userid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        UserIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the user's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the user ID.\n     * @returns {ServerName}\n     */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n     * Whether this user ID is a historical one.\n     *\n     * A historical user ID is one that doesn't conform to the latest\n     * specification of the user ID grammar but is still accepted\n     * because it was previously allowed.\n     * @returns {boolean}\n     */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Return the user ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Create a clone of this `UserId`.\n     *\n     * This can be useful when passing a `UserId` instance to methods such as\n     * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n     * @returns {UserId}\n     */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n * An object controlling key verification requests.\n *\n * Interactive verification flows usually start with a verification\n * request, this object lets you send and reply to such a\n * verification request.\n *\n * After the initial handshake the verification flow transitions into\n * one of the verification methods.\n */\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n     * Create an event content that can be sent as a room event to\n     * request verification from the other side. This should be used\n     * only for verifications of other users and it should be sent to\n     * a room we consider to be a DM with the other user.\n     * @param {UserId} own_user_id\n     * @param {DeviceId} own_device_id\n     * @param {UserId} other_user_id\n     * @param {any[] | undefined} [methods]\n     * @returns {string}\n     */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.verificationrequest_request(own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Our own user id.\n     * @returns {UserId}\n     */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other user that is participating in this\n     * verification request.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other device that is participating in this\n     * verification.\n     * @returns {DeviceId | undefined}\n     */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Get info about the cancellation if the verification request\n     * has been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification request been answered by another device?\n     * @returns {boolean}\n     */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the verification request ready to start a verification flow?\n     * @returns {boolean}\n     */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The number of milliseconds remaining before this verification flow times\n     * out.\n     *\n     * Returns zero if the time has already passed.\n     * @returns {number}\n     */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the supported verification methods of the other side.\n     *\n     * Will be present only if the other side requested the\n     * verification or if we’re in the ready state.\n     *\n     * # Returns\n     *\n     * `undefined` if we do not yet know the supported methods; otherwise, an\n     * array of `VerificationMethod`s.\n     * @returns {any[] | undefined}\n     */\n    get theirSupportedMethods() {\n        const ret = wasm.verificationrequest_theirSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get our own supported verification methods that we advertised.\n     *\n     * Will be present only we requested the verification or if we’re\n     * in the ready state.\n     * @returns {any[] | undefined}\n     */\n    get ourSupportedMethods() {\n        const ret = wasm.verificationrequest_ourSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the unique ID of this verification request.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.verificationrequest_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * finished?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the current phase of this request.\n     *\n     * Returns a `VerificationRequestPhase`.\n     * @returns {VerificationRequestPhase}\n     */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * If this request has transitioned into a concrete verification\n     * flow (and not yet been completed or cancelled), returns a `Verification`\n     * object.\n     *\n     * Returns: a `Sas`, a `Qr`, or `undefined`.\n     * @returns {any}\n     */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the verification request signaling that our client\n     * supports the given verification methods.\n     *\n     * `methods` represents the methods that we should advertise as\n     * supported by us.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @param {any[]} methods\n     * @returns {any}\n     */\n    acceptWithMethods(methods) {\n        const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.verificationrequest_acceptWithMethods(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Accept the verification request.\n     *\n     * This method will accept the request and signal that it\n     * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n     * `m.reciprocate.v1` method.\n     *\n     * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n     * feature is enabled. This feature is disabled by default. If\n     * it's enabled and QR code scanning should be supported or QR\n     * code showing shouldn't be supported the `accept_with_methods`\n     * method should be used instead.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.verificationrequest_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification request.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.verificationrequest_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Transition from this verification request into a SAS verification flow.\n     *\n     * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n     * @returns {Promise<any>}\n     */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate a QR code that can be used by another client to start\n     * a QR code based verification.\n     *\n     * Returns a `Qr` or `undefined`.\n     * @returns {Promise<any>}\n     */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Start a QR code verification by providing a scanned QR code\n     * for this verification flow.\n     * @param {QrCodeScan} data\n     * @returns {Promise<any>}\n     */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n * Object containing the versions of the Rust libraries we are using.\n */\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n     * The version of the vodozemac crate.\n     * @returns {string}\n     */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_versions_vodozemac(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The version of the matrix-sdk-crypto crate.\n     * @returns {string}\n     */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_versions_matrix_sdk_crypto(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The Git commit hash of the crate's source tree at build time.\n     * @returns {string}\n     */\n    get git_sha() {\n        const ret = wasm.__wbg_get_versions_git_sha(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The build-time output of the `git describe` command of the source tree\n     * of crate.\n     * @returns {string}\n     */\n    get git_description() {\n        const ret = wasm.__wbg_get_versions_git_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nexport function __wbg_String_8f0eb39a4a4c2f66(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_String_eecc4a11987127d6(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_Window_b0044ac7db258535(arg0) {\n    const ret = arg0.Window;\n    return ret;\n};\n\nexport function __wbg_WorkerGlobalScope_b74cefefc62a37da(arg0) {\n    const ret = arg0.WorkerGlobalScope;\n    return ret;\n};\n\nexport function __wbg_add_0d9e99fb9c2d2cc5(arg0, arg1) {\n    const ret = arg0.add(arg1);\n    return ret;\n};\n\nexport function __wbg_add_c836e3d4b14cd062() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.add(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_at_479807bfddde3a33(arg0, arg1) {\n    const ret = arg0.at(arg1);\n    return ret;\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_bound_1918c0826c5b9363() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(arg0, arg1, arg2 !== 0, arg3 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_bound_324dfb8899c9798c() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_buffer_61b7ce01341d7f88(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_call_3b770f0d6eb4720e() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.call(arg1, arg2, arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_500db948e69c7330() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.call(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_9bd6f269d4835e33() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.call(arg1, arg2, arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_b0d8e36992d9900d() { return handleError(function (arg0, arg1) {\n    const ret = arg0.call(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_clearTimeout_5a54f8841c30079a(arg0) {\n    const ret = clearTimeout(arg0);\n    return ret;\n};\n\nexport function __wbg_clear_da83758e0bea0eb6() { return handleError(function (arg0) {\n    const ret = arg0.clear();\n    return ret;\n}, arguments) };\n\nexport function __wbg_close_f6e618ed8b0326a3(arg0) {\n    arg0.close();\n};\n\nexport function __wbg_code_71136b86e2aa7f41(arg0) {\n    const ret = arg0.code;\n    return ret;\n};\n\nexport function __wbg_continue_bd44561c014cacea() { return handleError(function (arg0) {\n    arg0.continue();\n}, arguments) };\n\nexport function __wbg_count_244aa4118e005b59() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_count_4df50ef6c1ddd770() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_14571b3c4eec1628() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_1d4b2bbb6b21b8f8() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createObjectStore_b6f14aa10f83a300() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.createObjectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crypto_ed58b8e10a292839(arg0) {\n    const ret = arg0.crypto;\n    return ret;\n};\n\nexport function __wbg_debug_156ca727dbc3150f(arg0) {\n    console.debug(arg0);\n};\n\nexport function __wbg_debug_3acd668e6e6c6087(arg0, arg1) {\n    arg0.debug(arg1);\n};\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevicekey_new(arg0) {\n    const ret = DehydratedDeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deleteObjectStore_1f50ba0263875deb() { return handleError(function (arg0, arg1, arg2) {\n    arg0.deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_delete_5c33e4966f59624d() { return handleError(function (arg0, arg1) {\n    const ret = arg0.delete(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_delete_d97b2b4ff716c553() { return handleError(function (arg0) {\n    const ret = arg0.delete();\n    return ret;\n}, arguments) };\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_done_f22c1561fa919baa(arg0) {\n    const ret = arg0.done;\n    return ret;\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_4f2bb9b0d701c0f6(arg0) {\n    const ret = Object.entries(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_82bf0e755ef54a5f(arg0) {\n    const ret = arg0.entries();\n    return ret;\n};\n\nexport function __wbg_error_32fda676ae978f6e(arg0, arg1) {\n    arg0.error(arg1);\n};\n\nexport function __wbg_error_7534b8e9a36f1ab4(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_error_77233c625ed0c533() { return handleError(function (arg0) {\n    const ret = arg0.error;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_error_fab41a42d22bf2bc(arg0) {\n    console.error(arg0);\n};\n\nexport function __wbg_from_d68eaa96dba25449(arg0) {\n    const ret = Array.from(arg0);\n    return ret;\n};\n\nexport function __wbg_getAllKeys_ad97dc28822a6891() { return handleError(function (arg0) {\n    const ret = arg0.getAllKeys();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_72e2faaa06d1a8cf() { return handleError(function (arg0) {\n    const ret = arg0.getAll();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_8f38031e5969c7f5() { return handleError(function (arg0, arg1) {\n    const ret = arg0.getAll(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_8fa84589faccab36() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.getAll(arg1, arg2 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getRandomValues_bcb4912f16000dc4() { return handleError(function (arg0, arg1) {\n    arg0.getRandomValues(arg1);\n}, arguments) };\n\nexport function __wbg_getTime_ab8b72009983c537(arg0) {\n    const ret = arg0.getTime();\n    return ret;\n};\n\nexport function __wbg_get_6a4f854f5cca7403() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_7081edc0440983a5() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_9aa3dff3f0266054(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nexport function __wbg_get_bbccf8970793c087() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getwithrefkey_1dc361bd10053bfe(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_6550b2c093d2eb18(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_global_b6f5c73312f62313(arg0) {\n    const ret = arg0.global;\n    return ret;\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_index_871d874253bae760() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.index(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_indexedDB_601ec26c63e333de() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_72e2ca071222fd9e() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_e34a5e9b3d2fcfa1() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_info_c3044c86ae29faab(arg0) {\n    console.info(arg0);\n};\n\nexport function __wbg_info_ed71056bef15b91a(arg0, arg1) {\n    arg0.info(arg1);\n};\n\nexport function __wbg_instanceof_ArrayBuffer_670ddde44cdb2602(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Map_98ecb30afec5acdb(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Promise_0aa3a90cfe6672c9(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_28af5bc19d6acad8(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_isArray_1ba11a930108ec51(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_12f5549b2fca23f4(arg0) {\n    const ret = Number.isSafeInteger(arg0);\n    return ret;\n};\n\nexport function __wbg_item_7156a8ffa4d816bc(arg0, arg1, arg2) {\n    const ret = arg1.item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_iterator_23604bb983791576() {\n    const ret = Symbol.iterator;\n    return ret;\n};\n\nexport function __wbg_key_87db8226759da642() { return handleError(function (arg0) {\n    const ret = arg0.key;\n    return ret;\n}, arguments) };\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_length_65d1cd11729ced11(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_d65cf0786bfc5739(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_f4d79409aa324811(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_lowerBound_3aa47caa33c7e1e6() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(arg0, arg1 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_message_d19bdb65f0a41cf5(arg0, arg1) {\n    const ret = arg1.message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_msCrypto_0a36e2ec3a343d26(arg0) {\n    const ret = arg0.msCrypto;\n    return ret;\n};\n\nexport function __wbg_name_8862cd49ad807c59(arg0, arg1) {\n    const ret = arg1.name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_new_0f1bd659dcd47068(arg0) {\n    const ret = new Set(arg0);\n    return ret;\n};\n\nexport function __wbg_new_254fa9eac11932ae() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_new_3d446df9155128ef(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_758(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return ret;\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_3ff5b33b1ce712df(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nexport function __wbg_new_41257536af60ed14(arg0) {\n    const ret = new Date(arg0);\n    return ret;\n};\n\nexport function __wbg_new_688846f374351c92() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_8a6f238a6ece86ea() {\n    const ret = new Error();\n    return ret;\n};\n\nexport function __wbg_new_9451f3dcb42e0e37(arg0) {\n    const ret = new Uint8ClampedArray(arg0);\n    return ret;\n};\n\nexport function __wbg_new_bc96c6a1c0786643() {\n    const ret = new Map();\n    return ret;\n};\n\nexport function __wbg_newnoargs_fd9e4bf8be2bc16d(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_ba35896968751d91(arg0, arg1, arg2) {\n    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_c0c90653f73c7dfb(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_2aede0ef4e6e97ec(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_34ce8f1051e74449(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithmessage_80e6436058862fd4() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_01dd9234a5bf6d05() { return handleError(function (arg0) {\n    const ret = arg0.next();\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_137428deb98342b0(arg0) {\n    const ret = arg0.next;\n    return ret;\n};\n\nexport function __wbg_node_02999533c4ea02e3(arg0) {\n    const ret = arg0.node;\n    return ret;\n};\n\nexport function __wbg_now_2c95c9de01293173(arg0) {\n    const ret = arg0.now();\n    return ret;\n};\n\nexport function __wbg_now_64d0bb151e5d3889() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_objectStoreNames_cb00c8113b3cf5df(arg0) {\n    const ret = arg0.objectStoreNames;\n    return ret;\n};\n\nexport function __wbg_objectStore_cdbc73ee600a2cfa() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.objectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_oldVersion_a31d9f8577239dd8(arg0) {\n    const ret = arg0.oldVersion;\n    return ret;\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_openCursor_37e21d9af1a61159() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_da08cc74542711ad() { return handleError(function (arg0, arg1) {\n    const ret = arg0.openCursor(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_e7a3f6453a0f6725() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_4588c85c0c43671d() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_5c51d4d6d7ab6da6() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_parse_161c68378e086ae1() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_performance_7a3ffd0b17f663ad(arg0) {\n    const ret = arg0.performance;\n    return ret;\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_process_5c1d670bc53614b8(arg0) {\n    const ret = arg0.process;\n    return ret;\n};\n\nexport function __wbg_push_6edad0df4b546b2c(arg0, arg1) {\n    const ret = arg0.push(arg1);\n    return ret;\n};\n\nexport function __wbg_put_5393e88dbe742e8f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.put(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_queueMicrotask_2181040e064c0dc8(arg0) {\n    queueMicrotask(arg0);\n};\n\nexport function __wbg_queueMicrotask_ef9ac43769cbcc4f(arg0) {\n    const ret = arg0.queueMicrotask;\n    return ret;\n};\n\nexport function __wbg_randomFillSync_ab2cfe79ebbf2740() { return handleError(function (arg0, arg1) {\n    arg0.randomFillSync(arg1);\n}, arguments) };\n\nexport function __wbg_readyState_8428fa7c5e093401(arg0) {\n    const ret = arg0.readyState;\n    return (__wbindgen_enum_IdbRequestReadyState.indexOf(ret) + 1 || 3) - 1;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_require_79b1e9274cde3c87() { return handleError(function () {\n    const ret = module.require;\n    return ret;\n}, arguments) };\n\nexport function __wbg_resolve_0bf7c44d641804f9(arg0) {\n    const ret = Promise.resolve(arg0);\n    return ret;\n};\n\nexport function __wbg_result_e6ba6a347dcb7470() { return handleError(function (arg0) {\n    const ret = arg0.result;\n    return ret;\n}, arguments) };\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_setTimeout_db2dbaeefb6f39c7() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_set_1d80752d0d5f0b21(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_set_23d69db4e5c66a6e(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_3807d5f0bfc24aa7(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_3f1d0b984ed272ed(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_76818dc3c59a63d5(arg0, arg1, arg2) {\n    const ret = arg0.set(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_set_9592f7d5b752cae3(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_setonabort_ade6cac5c35a572f(arg0, arg1) {\n    arg0.onabort = arg1;\n};\n\nexport function __wbg_setonblocked_d13048be9383f4dc(arg0, arg1) {\n    arg0.onblocked = arg1;\n};\n\nexport function __wbg_setoncomplete_2747fb71ae0af4a8(arg0, arg1) {\n    arg0.oncomplete = arg1;\n};\n\nexport function __wbg_setonerror_72b33e31f9edb045(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonerror_e4beb2652cf66635(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonsuccess_57167b1c2650357c(arg0, arg1) {\n    arg0.onsuccess = arg1;\n};\n\nexport function __wbg_setonupgradeneeded_887c7a5fca66011e(arg0, arg1) {\n    arg0.onupgradeneeded = arg1;\n};\n\nexport function __wbg_setonversionchange_a6f60bd1d110795d(arg0, arg1) {\n    arg0.onversionchange = arg1;\n};\n\nexport function __wbg_setunique_cfc477dc5825e1c4(arg0, arg1) {\n    arg0.unique = arg1 !== 0;\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stack_0ed75d68575b0f3c(arg0, arg1) {\n    const ret = arg1.stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_static_accessor_GLOBAL_0be7472e492ad3e3() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_GLOBAL_THIS_1a6eb482d12c9bfb() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_SELF_1dc398a895c82351() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_WINDOW_ae1c80c7eea8d64a() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stringify_f4f701bc34ceda61() { return handleError(function (arg0) {\n    const ret = JSON.stringify(arg0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_subarray_46adeb9b86949d12(arg0, arg1, arg2) {\n    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_target_a8fe593e7ee79c21(arg0) {\n    const ret = arg0.target;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_then_0438fad860fe38e1(arg0, arg1) {\n    const ret = arg0.then(arg1);\n    return ret;\n};\n\nexport function __wbg_then_0ffafeddf0e182a4(arg0, arg1, arg2) {\n    const ret = arg0.then(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_transaction_bc71c2aaaf467420() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.transaction(getStringFromWasm0(arg1, arg2), __wbindgen_enum_IdbTransactionMode[arg3]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_d2b6d520837fbe7f(arg0) {\n    const ret = arg0.transaction;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_transaction_dbab9cd9ea849958() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.transaction(arg1, __wbindgen_enum_IdbTransactionMode[arg2]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_update_211ddccaf2cec6ee() { return handleError(function (arg0, arg1) {\n    const ret = arg0.update(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_value_0ad6f37677c8ee74() { return handleError(function (arg0) {\n    const ret = arg0.value;\n    return ret;\n}, arguments) };\n\nexport function __wbg_value_4c32fd138a88eee2(arg0) {\n    const ret = arg0.value;\n    return ret;\n};\n\nexport function __wbg_values_7aa03dd078978c86(arg0) {\n    const ret = arg0.values();\n    return ret;\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_version_2b650c9d4f0a2438(arg0) {\n    const ret = arg0.version;\n    return ret;\n};\n\nexport function __wbg_versions_c71aa1626a93e0a1(arg0) {\n    const ret = arg0.versions;\n    return ret;\n};\n\nexport function __wbg_warn_123db6aa8948382e(arg0) {\n    console.warn(arg0);\n};\n\nexport function __wbg_warn_9d038df1589cb1bd(arg0, arg1) {\n    arg0.warn(arg1);\n};\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return ret;\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = arg1;\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = arg0.original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper1050(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 30, __wbg_adapter_58);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper2213(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 410, __wbg_adapter_61);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper5386(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 410, __wbg_adapter_64);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper6843(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 416, __wbg_adapter_67);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper6848(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 416, __wbg_adapter_70);\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = arg0 in arg1;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_4;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_is_array(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(arg0) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(arg0) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = arg0 === null;\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = arg0;\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(arg0) === 'string';\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = arg0 === arg1;\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = arg0 == arg1;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\n    try { result = +arg0 } catch (e) { result = e }\n    const ret = result;\n    return ret;\n};\n\n","// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entrypoint on non-node ESM environments.\n * `asyncLoad` will load the WASM module using a `fetch` call.\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\nconst moduleUrl = new URL(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\", import.meta.url);\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync() {\n    const { instance } = await WebAssembly.instantiateStreaming(fetch(moduleUrl), {\n        // @ts-expect-error: The bindings don't exactly match the 'ExportValue' type\n        \"./matrix_sdk_crypto_wasm_bg.js\": bindings,\n    });\n\n    bindings.__wbg_set_wasm(instance.exports);\n    // @ts-expect-error: Typescript doesn't know what the module exports are\n    instance.exports.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @returns {Promise<void>}\n */\nexport async function initAsync() {\n    if (!modPromise) modPromise = loadModuleAsync();\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport {\n    CollectStrategy,\n    EncryptionAlgorithm,\n    EncryptionSettings,\n    HistoryVisibility as RustHistoryVisibility,\n    OlmMachine,\n    RoomId,\n    ToDeviceRequest,\n    UserId,\n} from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { EventType } from \"../@types/event.ts\";\nimport { IContent, MatrixEvent } from \"../models/event.ts\";\nimport { Room } from \"../models/room.ts\";\nimport { Logger, logger, LogSpan } from \"../logger.ts\";\nimport { KeyClaimManager } from \"./KeyClaimManager.ts\";\nimport { RoomMember } from \"../models/room-member.ts\";\nimport { HistoryVisibility } from \"../@types/partials.ts\";\nimport { OutgoingRequestsManager } from \"./OutgoingRequestsManager.ts\";\nimport { logDuration } from \"../utils.ts\";\nimport { KnownMembership } from \"../@types/membership.ts\";\nimport { DeviceIsolationMode, DeviceIsolationModeKind } from \"../crypto-api/index.ts\";\n\n/**\n * RoomEncryptor: responsible for encrypting messages to a given room\n *\n * @internal\n */\nexport class RoomEncryptor {\n    private readonly prefixedLogger: Logger;\n\n    /** whether the room members have been loaded and tracked for the first time */\n    private lazyLoadedMembersResolved = false;\n\n    /**\n     * Ensures that there is only one encryption operation at a time for that room.\n     *\n     * An encryption operation is either a {@link prepareForEncryption} or an {@link encryptEvent} call.\n     */\n    private currentEncryptionPromise: Promise<void> = Promise.resolve();\n\n    /**\n     * @param olmMachine - The rust-sdk's OlmMachine\n     * @param keyClaimManager - Our KeyClaimManager, which manages the queue of one-time-key claim requests\n     * @param outgoingRequestManager - The OutgoingRequestManager, which manages the queue of outgoing requests.\n     * @param room - The room we want to encrypt for\n     * @param encryptionSettings - body of the m.room.encryption event currently in force in this room\n     */\n    public constructor(\n        private readonly olmMachine: OlmMachine,\n        private readonly keyClaimManager: KeyClaimManager,\n        private readonly outgoingRequestManager: OutgoingRequestsManager,\n        private readonly room: Room,\n        private encryptionSettings: IContent,\n    ) {\n        this.prefixedLogger = logger.getChild(`[${room.roomId} encryption]`);\n\n        // start tracking devices for any users already known to be in this room.\n        // Do not load members here, would defeat lazy loading.\n        const members = room.getJoinedMembers();\n\n        // At this point just mark the known members as tracked, it might not be the full list of members\n        // because of lazy loading. This is fine, because we will get a member list update when sending a message for\n        // the first time, see `RoomEncryptor#ensureEncryptionSession`\n        this.olmMachine\n            .updateTrackedUsers(members.map((u) => new RustSdkCryptoJs.UserId(u.userId)))\n            .catch((e) => this.prefixedLogger.error(\"Error initializing tracked users\", e));\n    }\n\n    /**\n     * Handle a new `m.room.encryption` event in this room\n     *\n     * @param config - The content of the encryption event\n     */\n    public onCryptoEvent(config: IContent): void {\n        if (JSON.stringify(this.encryptionSettings) != JSON.stringify(config)) {\n            // This should currently be unreachable, since the Rust SDK will reject any attempts to change config.\n            throw new Error(\"Cannot reconfigure an active RoomEncryptor\");\n        }\n    }\n\n    /**\n     * Handle a new `m.room.member` event in this room\n     *\n     * @param member - new membership state\n     */\n    public onRoomMembership(member: RoomMember): void {\n        if (\n            member.membership == KnownMembership.Join ||\n            (member.membership == KnownMembership.Invite && this.room.shouldEncryptForInvitedMembers())\n        ) {\n            // make sure we are tracking the deviceList for this user\n            this.olmMachine.updateTrackedUsers([new UserId(member.userId)]).catch((e) => {\n                this.prefixedLogger.error(\"Unable to update tracked users\", e);\n            });\n        }\n\n        // TODO: handle leaves (including our own)\n    }\n\n    /**\n     * Prepare to encrypt events in this room.\n     *\n     * This ensures that we have a megolm session ready to use and that we have shared its key with all the devices\n     * in the room.\n     * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n     * will not send encrypted messages to unverified devices.\n     * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n     * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n     */\n    public async prepareForEncryption(\n        globalBlacklistUnverifiedDevices: boolean,\n        deviceIsolationMode: DeviceIsolationMode,\n    ): Promise<void> {\n        // We consider a prepareForEncryption as an encryption promise as it will potentially share keys\n        // even if it doesn't send an event.\n        // Usually this is called when the user starts typing, so we want to make sure we have keys ready when the\n        // message is finally sent.\n        // If `encryptEvent` is invoked before `prepareForEncryption` has completed, the `encryptEvent` call will wait for\n        // `prepareForEncryption` to complete before executing.\n        // The part where `encryptEvent` shares the room key will then usually be a no-op as it was already performed by `prepareForEncryption`.\n        await this.encryptEvent(null, globalBlacklistUnverifiedDevices, deviceIsolationMode);\n    }\n\n    /**\n     * Encrypt an event for this room, or prepare for encryption.\n     *\n     * This will ensure that we have a megolm session for this room, share it with the devices in the room, and\n     * then, if an event is provided, encrypt it using the session.\n     *\n     * @param event - Event to be encrypted, or null if only preparing for encryption (in which case we will pre-share the room key).\n     * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n     * will not send encrypted messages to unverified devices.\n     * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n     * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n     */\n    public encryptEvent(\n        event: MatrixEvent | null,\n        globalBlacklistUnverifiedDevices: boolean,\n        deviceIsolationMode: DeviceIsolationMode,\n    ): Promise<void> {\n        const logger = new LogSpan(this.prefixedLogger, event ? (event.getTxnId() ?? \"\") : \"prepareForEncryption\");\n        // Ensure order of encryption to avoid message ordering issues, as the scheduler only ensures\n        // events order after they have been encrypted.\n        const prom = this.currentEncryptionPromise\n            .catch(() => {\n                // Any errors in the previous call will have been reported already, so there is nothing to do here.\n                // we just throw away the error and start anew.\n            })\n            .then(async () => {\n                await logDuration(logger, \"ensureEncryptionSession\", async () => {\n                    await this.ensureEncryptionSession(logger, globalBlacklistUnverifiedDevices, deviceIsolationMode);\n                });\n                if (event) {\n                    await logDuration(logger, \"encryptEventInner\", async () => {\n                        await this.encryptEventInner(logger, event);\n                    });\n                }\n            });\n\n        this.currentEncryptionPromise = prom;\n        return prom;\n    }\n\n    /**\n     * Prepare to encrypt events in this room.\n     *\n     * This ensures that we have a megolm session ready to use and that we have shared its key with all the devices\n     * in the room.\n     *\n     * @param logger - a place to write diagnostics to\n     * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n     * will not send encrypted messages to unverified devices.\n     * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n     * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n     */\n    private async ensureEncryptionSession(\n        logger: LogSpan,\n        globalBlacklistUnverifiedDevices: boolean,\n        deviceIsolationMode: DeviceIsolationMode,\n    ): Promise<void> {\n        if (this.encryptionSettings.algorithm !== \"m.megolm.v1.aes-sha2\") {\n            throw new Error(\n                `Cannot encrypt in ${this.room.roomId} for unsupported algorithm '${this.encryptionSettings.algorithm}'`,\n            );\n        }\n        logger.debug(\"Starting encryption\");\n\n        const members = await this.room.getEncryptionTargetMembers();\n\n        // If this is the first time we are sending a message to the room, we may not yet have seen all the members\n        // (so the Crypto SDK might not have a device list for them). So, if this is the first time we are encrypting\n        // for this room, give the SDK the full list of members, to be on the safe side.\n        //\n        // This could end up being racy (if two calls to ensureEncryptionSession happen at the same time), but that's\n        // not a particular problem, since `OlmMachine.updateTrackedUsers` just adds any users that weren't already tracked.\n        if (!this.lazyLoadedMembersResolved) {\n            await logDuration(this.prefixedLogger, \"loadMembersIfNeeded: updateTrackedUsers\", async () => {\n                await this.olmMachine.updateTrackedUsers(members.map((u) => new RustSdkCryptoJs.UserId(u.userId)));\n            });\n            logger.debug(`Updated tracked users`);\n            this.lazyLoadedMembersResolved = true;\n\n            // Query keys in case we don't have them for newly tracked members.\n            // It's important after loading members for the first time, as likely most of them won't be\n            // known yet and will be unable to decrypt messages despite being in the room for long.\n            // This must be done before ensuring sessions. If not the devices of these users are not\n            // known yet and will not get the room key.\n            // We don't have API to only get the keys queries related to this member list, so we just\n            // process the pending requests from the olmMachine. (usually these are processed\n            // at the end of the sync, but we can't wait for that).\n            // XXX future improvement process only KeysQueryRequests for the users that have never been queried.\n            logger.debug(`Processing outgoing requests`);\n\n            await logDuration(this.prefixedLogger, \"doProcessOutgoingRequests\", async () => {\n                await this.outgoingRequestManager.doProcessOutgoingRequests();\n            });\n        } else {\n            // If members are already loaded it's less critical to await on key queries.\n            // We might still want to trigger a processOutgoingRequests here.\n            // The call to `ensureSessionsForUsers` below will wait a bit on in-flight key queries we are\n            // interested in. If a sync handling happens in the meantime, and some new members are added to the room\n            // or have new devices it would give us a chance to query them before sending.\n            // It's less critical due to the racy nature of this process.\n            logger.debug(`Processing outgoing requests in background`);\n            this.outgoingRequestManager.doProcessOutgoingRequests();\n        }\n\n        logger.debug(\n            `Encrypting for users (shouldEncryptForInvitedMembers: ${this.room.shouldEncryptForInvitedMembers()}):`,\n            members.map((u) => `${u.userId} (${u.membership})`),\n        );\n\n        const userList = members.map((u) => new UserId(u.userId));\n\n        await logDuration(this.prefixedLogger, \"ensureSessionsForUsers\", async () => {\n            await this.keyClaimManager.ensureSessionsForUsers(logger, userList);\n        });\n\n        const rustEncryptionSettings = new EncryptionSettings();\n        rustEncryptionSettings.historyVisibility = toRustHistoryVisibility(this.room.getHistoryVisibility());\n\n        // We only support megolm\n        rustEncryptionSettings.algorithm = EncryptionAlgorithm.MegolmV1AesSha2;\n\n        // We need to convert the rotation period from milliseconds to microseconds\n        // See https://spec.matrix.org/v1.8/client-server-api/#mroomencryption and\n        // https://matrix-org.github.io/matrix-rust-sdk-crypto-wasm/classes/EncryptionSettings.html#rotationPeriod\n        if (typeof this.encryptionSettings.rotation_period_ms === \"number\") {\n            rustEncryptionSettings.rotationPeriod = BigInt(this.encryptionSettings.rotation_period_ms * 1000);\n        }\n\n        if (typeof this.encryptionSettings.rotation_period_msgs === \"number\") {\n            rustEncryptionSettings.rotationPeriodMessages = BigInt(this.encryptionSettings.rotation_period_msgs);\n        }\n\n        switch (deviceIsolationMode.kind) {\n            case DeviceIsolationModeKind.AllDevicesIsolationMode:\n                {\n                    // When this.room.getBlacklistUnverifiedDevices() === null, the global settings should be used\n                    // See Room#getBlacklistUnverifiedDevices\n                    const onlyAllowTrustedDevices =\n                        this.room.getBlacklistUnverifiedDevices() ?? globalBlacklistUnverifiedDevices;\n                    rustEncryptionSettings.sharingStrategy = CollectStrategy.deviceBasedStrategy(\n                        onlyAllowTrustedDevices,\n                        deviceIsolationMode.errorOnVerifiedUserProblems,\n                    );\n                }\n                break;\n            case DeviceIsolationModeKind.OnlySignedDevicesIsolationMode:\n                rustEncryptionSettings.sharingStrategy = CollectStrategy.identityBasedStrategy();\n                break;\n        }\n\n        await logDuration(this.prefixedLogger, \"shareRoomKey\", async () => {\n            const shareMessages: ToDeviceRequest[] = await this.olmMachine.shareRoomKey(\n                new RoomId(this.room.roomId),\n                // safe to pass without cloning, as it's not reused here (before or after)\n                userList,\n                rustEncryptionSettings,\n            );\n            if (shareMessages) {\n                for (const m of shareMessages) {\n                    await this.outgoingRequestManager.outgoingRequestProcessor.makeOutgoingRequest(m);\n                }\n            }\n        });\n    }\n\n    /**\n     * Discard any existing group session for this room\n     */\n    public async forceDiscardSession(): Promise<void> {\n        const r = await this.olmMachine.invalidateGroupSession(new RoomId(this.room.roomId));\n        if (r) {\n            this.prefixedLogger.info(\"Discarded existing group session\");\n        }\n    }\n\n    private async encryptEventInner(logger: LogSpan, event: MatrixEvent): Promise<void> {\n        logger.debug(\"Encrypting actual message content\");\n        const encryptedContent = await this.olmMachine.encryptRoomEvent(\n            new RoomId(this.room.roomId),\n            event.getType(),\n            JSON.stringify(event.getContent()),\n        );\n\n        event.makeEncrypted(\n            EventType.RoomMessageEncrypted,\n            JSON.parse(encryptedContent),\n            this.olmMachine.identityKeys.curve25519.toBase64(),\n            this.olmMachine.identityKeys.ed25519.toBase64(),\n        );\n\n        logger.debug(\"Encrypted event successfully\");\n    }\n}\n\n/**\n * Convert a HistoryVisibility to a RustHistoryVisibility\n * @param visibility - HistoryVisibility enum\n * @returns a RustHistoryVisibility enum\n */\nexport function toRustHistoryVisibility(visibility: HistoryVisibility): RustHistoryVisibility {\n    switch (visibility) {\n        case HistoryVisibility.Invited:\n            return RustHistoryVisibility.Invited;\n        case HistoryVisibility.Joined:\n            return RustHistoryVisibility.Joined;\n        case HistoryVisibility.Shared:\n            return RustHistoryVisibility.Shared;\n        case HistoryVisibility.WorldReadable:\n            return RustHistoryVisibility.WorldReadable;\n    }\n}\n","/*\nCopyright 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { encodeUri } from \"../utils.ts\";\nimport { IHttpOpts, MatrixError, MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { IToDeviceEvent } from \"../sync-accumulator.ts\";\nimport { ServerSideSecretStorage } from \"../secret-storage.ts\";\nimport { decodeBase64 } from \"../base64.ts\";\nimport { Logger } from \"../logger.ts\";\nimport { CryptoEvent, CryptoEventHandlerMap, StartDehydrationOpts } from \"../crypto-api/index.ts\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\n\n/**\n * The response body of `GET /_matrix/client/unstable/org.matrix.msc3814.v1/dehydrated_device`.\n */\ninterface DehydratedDeviceResp {\n    device_id: string;\n    device_data: {\n        algorithm: string;\n    };\n}\n/**\n * The response body of `POST /_matrix/client/unstable/org.matrix.msc3814.v1/dehydrated_device/events`.\n */\ninterface DehydratedDeviceEventsResp {\n    events: IToDeviceEvent[];\n    next_batch: string;\n}\n\n/**\n * The unstable URL prefix for dehydrated device endpoints\n */\nexport const UnstablePrefix = \"/_matrix/client/unstable/org.matrix.msc3814.v1\";\n/**\n * The name used for the dehydration key in Secret Storage\n */\nconst SECRET_STORAGE_NAME = \"org.matrix.msc3814\";\n\n/**\n * The interval between creating dehydrated devices. (one week)\n */\nconst DEHYDRATION_INTERVAL = 7 * 24 * 60 * 60 * 1000;\n\n/**\n * Manages dehydrated devices\n *\n * We have one of these per `RustCrypto`.  It's responsible for\n *\n * * determining server support for dehydrated devices\n * * creating new dehydrated devices when requested, including periodically\n *   replacing the dehydrated device with a new one\n * * rehydrating a device when requested, and when present\n *\n * @internal\n */\nexport class DehydratedDeviceManager extends TypedEventEmitter<DehydratedDevicesEvents, DehydratedDevicesEventMap> {\n    /** the ID of the interval for periodically replacing the dehydrated device */\n    private intervalId?: ReturnType<typeof setInterval>;\n\n    public constructor(\n        private readonly logger: Logger,\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n        private readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n        private readonly secretStorage: ServerSideSecretStorage,\n    ) {\n        super();\n    }\n\n    private async cacheKey(key: RustSdkCryptoJs.DehydratedDeviceKey): Promise<void> {\n        await this.olmMachine.dehydratedDevices().saveDehydratedDeviceKey(key);\n        this.emit(CryptoEvent.DehydrationKeyCached);\n    }\n\n    /**\n     * Return whether the server supports dehydrated devices.\n     */\n    public async isSupported(): Promise<boolean> {\n        // call the endpoint to get a dehydrated device.  If it returns an\n        // M_UNRECOGNIZED error, then dehydration is unsupported.  If it returns\n        // a successful response, or an M_NOT_FOUND, then dehydration is supported.\n        // Any other exceptions are passed through.\n        try {\n            await this.http.authedRequest<DehydratedDeviceResp>(\n                Method.Get,\n                \"/dehydrated_device\",\n                undefined,\n                undefined,\n                {\n                    prefix: UnstablePrefix,\n                },\n            );\n        } catch (error) {\n            const err = error as MatrixError;\n            if (err.errcode === \"M_UNRECOGNIZED\") {\n                return false;\n            } else if (err.errcode === \"M_NOT_FOUND\") {\n                return true;\n            }\n            throw error;\n        }\n        return true;\n    }\n\n    /**\n     * Start using device dehydration.\n     *\n     * - Rehydrates a dehydrated device, if one is available and `opts.rehydrate`\n     *   is `true`.\n     * - Creates a new dehydration key, if necessary, and stores it in Secret\n     *   Storage.\n     *   - If `opts.createNewKey` is set to true, always creates a new key.\n     *   - If a dehydration key is not available, creates a new one.\n     * - Creates a new dehydrated device, and schedules periodically creating\n     *   new dehydrated devices.\n     *\n     * @param opts - options for device dehydration. For backwards compatibility\n     *     with old code, a boolean can be given here, which will be treated as\n     *     the `createNewKey` option. However, this is deprecated.\n     */\n    public async start(opts: StartDehydrationOpts | boolean = {}): Promise<void> {\n        if (typeof opts === \"boolean\") {\n            opts = { createNewKey: opts };\n        }\n\n        if (opts.onlyIfKeyCached && !(await this.olmMachine.dehydratedDevices().getDehydratedDeviceKey())) {\n            return;\n        }\n        this.stop();\n        if (opts.rehydrate !== false) {\n            try {\n                await this.rehydrateDeviceIfAvailable();\n            } catch (e) {\n                // If rehydration fails, there isn't much we can do about it.  Log\n                // the error, and create a new device.\n                this.logger.info(\"dehydration: Error rehydrating device:\", e);\n                this.emit(CryptoEvent.RehydrationError, (e as Error).message);\n            }\n        }\n        if (opts.createNewKey) {\n            await this.resetKey();\n        }\n        await this.scheduleDeviceDehydration();\n    }\n\n    /**\n     * Return whether the dehydration key is stored in Secret Storage.\n     */\n    public async isKeyStored(): Promise<boolean> {\n        return Boolean(await this.secretStorage.isStored(SECRET_STORAGE_NAME));\n    }\n\n    /**\n     * Reset the dehydration key.\n     *\n     * Creates a new key and stores it in secret storage.\n     *\n     * @returns The newly-generated key.\n     */\n    public async resetKey(): Promise<RustSdkCryptoJs.DehydratedDeviceKey> {\n        const key = RustSdkCryptoJs.DehydratedDeviceKey.createRandomKey();\n        await this.secretStorage.store(SECRET_STORAGE_NAME, key.toBase64());\n        // Also cache it in the rust SDK's crypto store.\n        await this.cacheKey(key);\n        return key;\n    }\n\n    /**\n     * Get and cache the encryption key from secret storage.\n     *\n     * If `create` is `true`, creates a new key if no existing key is present.\n     *\n     * @returns the key, if available, or `null` if no key is available\n     */\n    private async getKey(create: boolean): Promise<RustSdkCryptoJs.DehydratedDeviceKey | null> {\n        const cachedKey = await this.olmMachine.dehydratedDevices().getDehydratedDeviceKey();\n        if (cachedKey) return cachedKey;\n        const keyB64 = await this.secretStorage.get(SECRET_STORAGE_NAME);\n        if (keyB64 === undefined) {\n            if (!create) {\n                return null;\n            }\n            return await this.resetKey();\n        }\n\n        // We successfully found the key in secret storage: decode it, and cache it in\n        // the rust SDK's crypto store.\n        const bytes = decodeBase64(keyB64);\n        try {\n            const key = RustSdkCryptoJs.DehydratedDeviceKey.createKeyFromArray(bytes);\n            await this.cacheKey(key);\n            return key;\n        } finally {\n            bytes.fill(0);\n        }\n    }\n\n    /**\n     * Rehydrate the dehydrated device stored on the server.\n     *\n     * Checks if there is a dehydrated device on the server.  If so, rehydrates\n     * the device and processes the to-device events.\n     *\n     * Returns whether or not a dehydrated device was found.\n     */\n    public async rehydrateDeviceIfAvailable(): Promise<boolean> {\n        const key = await this.getKey(false);\n        if (!key) {\n            return false;\n        }\n\n        let dehydratedDeviceResp;\n        try {\n            dehydratedDeviceResp = await this.http.authedRequest<DehydratedDeviceResp>(\n                Method.Get,\n                \"/dehydrated_device\",\n                undefined,\n                undefined,\n                {\n                    prefix: UnstablePrefix,\n                },\n            );\n        } catch (error) {\n            const err = error as MatrixError;\n            // We ignore M_NOT_FOUND (there is no dehydrated device, so nothing\n            // us to do) and M_UNRECOGNIZED (the server does not understand the\n            // endpoint).  We pass through any other errors.\n            if (err.errcode === \"M_NOT_FOUND\" || err.errcode === \"M_UNRECOGNIZED\") {\n                this.logger.info(\"dehydration: No dehydrated device\");\n                return false;\n            }\n            throw err;\n        }\n\n        this.logger.info(\"dehydration: dehydrated device found\");\n        this.emit(CryptoEvent.RehydrationStarted);\n\n        const rehydratedDevice = await this.olmMachine\n            .dehydratedDevices()\n            .rehydrate(\n                key,\n                new RustSdkCryptoJs.DeviceId(dehydratedDeviceResp.device_id),\n                JSON.stringify(dehydratedDeviceResp.device_data),\n            );\n\n        this.logger.info(\"dehydration: device rehydrated\");\n\n        let nextBatch: string | undefined = undefined;\n        let toDeviceCount = 0;\n        let roomKeyCount = 0;\n        const path = encodeUri(\"/dehydrated_device/$device_id/events\", {\n            $device_id: dehydratedDeviceResp.device_id,\n        });\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const eventResp: DehydratedDeviceEventsResp = await this.http.authedRequest<DehydratedDeviceEventsResp>(\n                Method.Post,\n                path,\n                undefined,\n                nextBatch ? { next_batch: nextBatch } : {},\n                {\n                    prefix: UnstablePrefix,\n                },\n            );\n\n            if (eventResp.events.length === 0) {\n                break;\n            }\n            toDeviceCount += eventResp.events.length;\n            nextBatch = eventResp.next_batch;\n            const roomKeyInfos = await rehydratedDevice.receiveEvents(JSON.stringify(eventResp.events));\n            roomKeyCount += roomKeyInfos.length;\n\n            this.emit(CryptoEvent.RehydrationProgress, roomKeyCount, toDeviceCount);\n        }\n        this.logger.info(`dehydration: received ${roomKeyCount} room keys from ${toDeviceCount} to-device events`);\n        this.emit(CryptoEvent.RehydrationCompleted);\n\n        return true;\n    }\n\n    /**\n     * Creates and uploads a new dehydrated device.\n     *\n     * Creates and stores a new key in secret storage if none is available.\n     */\n    public async createAndUploadDehydratedDevice(): Promise<void> {\n        const key = (await this.getKey(true))!;\n\n        const dehydratedDevice = await this.olmMachine.dehydratedDevices().create();\n        this.emit(CryptoEvent.DehydratedDeviceCreated);\n        const request = await dehydratedDevice.keysForUpload(\"Dehydrated device\", key);\n\n        await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n        this.emit(CryptoEvent.DehydratedDeviceUploaded);\n\n        this.logger.info(\"dehydration: uploaded device\");\n    }\n\n    /**\n     * Schedule periodic creation of dehydrated devices.\n     */\n    public async scheduleDeviceDehydration(): Promise<void> {\n        // cancel any previously-scheduled tasks\n        this.stop();\n\n        await this.createAndUploadDehydratedDevice();\n        this.intervalId = setInterval(() => {\n            this.createAndUploadDehydratedDevice().catch((error) => {\n                this.emit(CryptoEvent.DehydratedDeviceRotationError, error.message);\n                this.logger.error(\"Error creating dehydrated device:\", error);\n            });\n        }, DEHYDRATION_INTERVAL);\n    }\n\n    /**\n     * Stop the dehydrated device manager.\n     *\n     * Cancels any scheduled dehydration tasks.\n     */\n    public stop(): void {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        }\n    }\n}\n\n/**\n * The events fired by the DehydratedDeviceManager\n * @internal\n */\ntype DehydratedDevicesEvents =\n    | CryptoEvent.DehydratedDeviceCreated\n    | CryptoEvent.DehydratedDeviceUploaded\n    | CryptoEvent.RehydrationStarted\n    | CryptoEvent.RehydrationProgress\n    | CryptoEvent.RehydrationCompleted\n    | CryptoEvent.RehydrationError\n    | CryptoEvent.DehydrationKeyCached\n    | CryptoEvent.DehydratedDeviceRotationError;\n\n/**\n * A map of the {@link DehydratedDeviceEvents} fired by the {@link DehydratedDeviceManager} and their payloads.\n * @internal\n */\ntype DehydratedDevicesEventMap = Pick<CryptoEventHandlerMap, DehydratedDevicesEvents>;\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport {\n    KeysBackupRequest,\n    KeysClaimRequest,\n    KeysQueryRequest,\n    KeysUploadRequest,\n    OlmMachine,\n    PutDehydratedDeviceRequest,\n    RoomMessageRequest,\n    SignatureUploadRequest,\n    ToDeviceRequest,\n    UploadSigningKeysRequest,\n} from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { logger } from \"../logger.ts\";\nimport { calculateRetryBackoff, IHttpOpts, MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { logDuration, QueryDict, sleep } from \"../utils.ts\";\nimport { AuthDict, UIAuthCallback } from \"../interactive-auth.ts\";\nimport { UIAResponse } from \"../@types/uia.ts\";\nimport { ToDeviceMessageId } from \"../@types/event.ts\";\nimport { UnstablePrefix as DehydrationUnstablePrefix } from \"./DehydratedDeviceManager.ts\";\n\n/**\n * Common interface for all the request types returned by `OlmMachine.outgoingRequests`.\n *\n * @internal\n */\nexport interface OutgoingRequest {\n    readonly id: string | undefined;\n    readonly type: number;\n}\n\n/**\n * OutgoingRequestManager: turns `OutgoingRequest`s from the rust sdk into HTTP requests\n *\n * We have one of these per `RustCrypto` (and hence per `MatrixClient`), not that it does anything terribly complicated.\n * It's responsible for:\n *\n *   * holding the reference to the `MatrixHttpApi`\n *   * turning `OutgoingRequest`s from the rust backend into HTTP requests, and sending them\n *   * sending the results of such requests back to the rust backend.\n *\n * @internal\n */\nexport class OutgoingRequestProcessor {\n    public constructor(\n        private readonly olmMachine: OlmMachine,\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n    ) {}\n\n    public async makeOutgoingRequest<T>(\n        msg: OutgoingRequest | UploadSigningKeysRequest | PutDehydratedDeviceRequest,\n        uiaCallback?: UIAuthCallback<T>,\n    ): Promise<void> {\n        let resp: string;\n\n        /* refer https://docs.rs/matrix-sdk-crypto/0.6.0/matrix_sdk_crypto/requests/enum.OutgoingRequests.html\n         * for the complete list of request types\n         */\n        if (msg instanceof KeysUploadRequest) {\n            resp = await this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/upload\", {}, msg.body);\n        } else if (msg instanceof KeysQueryRequest) {\n            resp = await this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/query\", {}, msg.body);\n        } else if (msg instanceof KeysClaimRequest) {\n            resp = await this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/claim\", {}, msg.body);\n        } else if (msg instanceof SignatureUploadRequest) {\n            resp = await this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/signatures/upload\", {}, msg.body);\n        } else if (msg instanceof KeysBackupRequest) {\n            resp = await this.requestWithRetry(\n                Method.Put,\n                \"/_matrix/client/v3/room_keys/keys\",\n                { version: msg.version },\n                msg.body,\n            );\n        } else if (msg instanceof ToDeviceRequest) {\n            resp = await this.sendToDeviceRequest(msg);\n        } else if (msg instanceof RoomMessageRequest) {\n            const path =\n                `/_matrix/client/v3/rooms/${encodeURIComponent(msg.room_id)}/send/` +\n                `${encodeURIComponent(msg.event_type)}/${encodeURIComponent(msg.txn_id)}`;\n            resp = await this.requestWithRetry(Method.Put, path, {}, msg.body);\n        } else if (msg instanceof UploadSigningKeysRequest) {\n            await this.makeRequestWithUIA(\n                Method.Post,\n                \"/_matrix/client/v3/keys/device_signing/upload\",\n                {},\n                msg.body,\n                uiaCallback,\n            );\n            // SigningKeysUploadRequest does not implement OutgoingRequest and does not need to be marked as sent.\n            return;\n        } else if (msg instanceof PutDehydratedDeviceRequest) {\n            const path = DehydrationUnstablePrefix + \"/dehydrated_device\";\n            await this.rawJsonRequest(Method.Put, path, {}, msg.body);\n            // PutDehydratedDeviceRequest does not implement OutgoingRequest and does not need to be marked as sent.\n            return;\n        } else {\n            logger.warn(\"Unsupported outgoing message\", Object.getPrototypeOf(msg));\n            resp = \"\";\n        }\n\n        if (msg.id) {\n            try {\n                await logDuration(logger, `Mark Request as sent ${msg.type}`, async () => {\n                    await this.olmMachine.markRequestAsSent(msg.id!, msg.type, resp);\n                });\n            } catch (e) {\n                // Ignore errors which are caused by the olmMachine having been freed. The exact error message depends\n                // on whether we are using a release or develop build of rust-sdk-crypto-wasm.\n                if (\n                    e instanceof Error &&\n                    (e.message === \"Attempt to use a moved value\" || e.message === \"null pointer passed to rust\")\n                ) {\n                    logger.log(`Ignoring error '${e.message}': client is likely shutting down`);\n                } else {\n                    throw e;\n                }\n            }\n        } else {\n            logger.trace(`Outgoing request type:${msg.type} does not have an ID`);\n        }\n    }\n\n    /**\n     * Send the HTTP request for a `ToDeviceRequest`\n     *\n     * @param request - request to send\n     * @returns JSON-serialized body of the response, if successful\n     */\n    private async sendToDeviceRequest(request: ToDeviceRequest): Promise<string> {\n        // a bit of extra logging, to help trace to-device messages through the system\n        const parsedBody: { messages: Record<string, Record<string, Record<string, any>>> } = JSON.parse(request.body);\n\n        const messageList = [];\n        for (const [userId, perUserMessages] of Object.entries(parsedBody.messages)) {\n            for (const [deviceId, message] of Object.entries(perUserMessages)) {\n                messageList.push(`${userId}/${deviceId} (msgid ${message[ToDeviceMessageId]})`);\n            }\n        }\n\n        logger.info(\n            `Sending batch of to-device messages. type=${request.event_type} txnid=${request.txn_id}`,\n            messageList,\n        );\n\n        const path =\n            `/_matrix/client/v3/sendToDevice/${encodeURIComponent(request.event_type)}/` +\n            encodeURIComponent(request.txn_id);\n        return await this.requestWithRetry(Method.Put, path, {}, request.body);\n    }\n\n    private async makeRequestWithUIA<T>(\n        method: Method,\n        path: string,\n        queryParams: QueryDict,\n        body: string,\n        uiaCallback: UIAuthCallback<T> | undefined,\n    ): Promise<string> {\n        if (!uiaCallback) {\n            return await this.requestWithRetry(method, path, queryParams, body);\n        }\n\n        const parsedBody = JSON.parse(body);\n        const makeRequest = async (auth: AuthDict | null): Promise<UIAResponse<T>> => {\n            const newBody: Record<string, any> = {\n                ...parsedBody,\n            };\n            if (auth !== null) {\n                newBody.auth = auth;\n            }\n            const resp = await this.requestWithRetry(method, path, queryParams, JSON.stringify(newBody));\n            return JSON.parse(resp) as T;\n        };\n\n        const resp = await uiaCallback(makeRequest);\n        return JSON.stringify(resp);\n    }\n\n    private async requestWithRetry(\n        method: Method,\n        path: string,\n        queryParams: QueryDict,\n        body: string,\n    ): Promise<string> {\n        let currentRetryCount = 0;\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                return await this.rawJsonRequest(method, path, queryParams, body);\n            } catch (e) {\n                currentRetryCount++;\n                const backoff = calculateRetryBackoff(e, currentRetryCount, true);\n                if (backoff < 0) {\n                    // Max number of retries reached, or error is not retryable. rethrow the error\n                    throw e;\n                }\n                // wait for the specified time and then retry the request\n                await sleep(backoff);\n            }\n        }\n    }\n\n    private async rawJsonRequest(method: Method, path: string, queryParams: QueryDict, body: string): Promise<string> {\n        const opts = {\n            // inhibit the JSON stringification and parsing within HttpApi.\n            json: false,\n\n            // nevertheless, we are sending, and accept, JSON.\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n            },\n\n            // we use the full prefix\n            prefix: \"\",\n        };\n\n        return await this.http.authedRequest<string>(method, path, queryParams, body, opts);\n    }\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { OlmMachine, UserId } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { LogSpan } from \"../logger.ts\";\n\n/**\n * KeyClaimManager: linearises calls to OlmMachine.getMissingSessions to avoid races\n *\n * We have one of these per `RustCrypto` (and hence per `MatrixClient`).\n *\n * @internal\n */\nexport class KeyClaimManager {\n    private currentClaimPromise: Promise<void>;\n    private stopped = false;\n\n    public constructor(\n        private readonly olmMachine: OlmMachine,\n        private readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n    ) {\n        this.currentClaimPromise = Promise.resolve();\n    }\n\n    /**\n     * Tell the KeyClaimManager to immediately stop processing requests.\n     *\n     * Any further calls, and any still in the queue, will fail with an error.\n     */\n    public stop(): void {\n        this.stopped = true;\n    }\n\n    /**\n     * Given a list of users, attempt to ensure that we have Olm Sessions active with each of their devices\n     *\n     * If we don't have an active olm session, we will claim a one-time key and start one.\n     * @param logger - logger to use\n     * @param userList - list of userIDs to claim\n     */\n    public ensureSessionsForUsers(logger: LogSpan, userList: Array<UserId>): Promise<void> {\n        // The Rust-SDK requires that we only have one getMissingSessions process in flight at once. This little dance\n        // ensures that, by only having one call to ensureSessionsForUsersInner active at once (and making them\n        // queue up in order).\n        const prom = this.currentClaimPromise\n            .catch(() => {\n                // any errors in the previous claim will have been reported already, so there is nothing to do here.\n                // we just throw away the error and start anew.\n            })\n            .then(() => this.ensureSessionsForUsersInner(logger, userList));\n        this.currentClaimPromise = prom;\n        return prom;\n    }\n\n    private async ensureSessionsForUsersInner(logger: LogSpan, userList: Array<UserId>): Promise<void> {\n        // bail out quickly if we've been stopped.\n        if (this.stopped) {\n            throw new Error(`Cannot ensure Olm sessions: shutting down`);\n        }\n        logger.info(\"Checking for missing Olm sessions\");\n        // By passing the userId array to rust we transfer ownership of the items to rust, causing\n        // them to be invalidated on the JS side as soon as the method is called.\n        // As we haven't created the `userList` let's clone the users, to not break the caller from re-using it.\n        const claimRequest = await this.olmMachine.getMissingSessions(userList.map((u) => u.clone()));\n        if (claimRequest) {\n            logger.info(\"Making /keys/claim request\");\n            await this.outgoingRequestProcessor.makeOutgoingRequest(claimRequest);\n        }\n        logger.info(\"Olm sessions prepared\");\n    }\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { Device, DeviceVerification } from \"../models/device.ts\";\nimport { DeviceKeys } from \"../client.ts\";\n\n/**\n * Convert a {@link RustSdkCryptoJs.Device} to a {@link Device}\n * @param device - Rust Sdk device\n * @param userId - owner of the device\n *\n * @internal\n */\nexport function rustDeviceToJsDevice(device: RustSdkCryptoJs.Device, userId: RustSdkCryptoJs.UserId): Device {\n    // Copy rust device keys to Device.keys\n    const keys = new Map<string, string>();\n    for (const [keyId, key] of device.keys.entries()) {\n        keys.set(keyId.toString(), key.toBase64());\n    }\n\n    // Compute verified from device state\n    let verified: DeviceVerification = DeviceVerification.Unverified;\n    if (device.isBlacklisted()) {\n        verified = DeviceVerification.Blocked;\n    } else if (device.isVerified()) {\n        verified = DeviceVerification.Verified;\n    }\n\n    // Convert rust signatures to Device.signatures\n    const signatures = new Map<string, Map<string, string>>();\n    const mayBeSignatureMap: Map<string, RustSdkCryptoJs.MaybeSignature> | undefined = device.signatures.get(userId);\n    if (mayBeSignatureMap) {\n        const convertedSignatures = new Map<string, string>();\n        // Convert maybeSignatures map to a Map<string, string>\n        for (const [key, value] of mayBeSignatureMap.entries()) {\n            if (value.isValid() && value.signature) {\n                convertedSignatures.set(key, value.signature.toBase64());\n            }\n        }\n\n        signatures.set(userId.toString(), convertedSignatures);\n    }\n\n    // Convert rust algorithms to algorithms\n    const rustAlgorithms: RustSdkCryptoJs.EncryptionAlgorithm[] = device.algorithms;\n    // Use set to ensure that algorithms are not duplicated\n    const algorithms = new Set<string>();\n    rustAlgorithms.forEach((algorithm) => {\n        switch (algorithm) {\n            case RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2:\n                algorithms.add(\"m.megolm.v1.aes-sha2\");\n                break;\n            case RustSdkCryptoJs.EncryptionAlgorithm.OlmV1Curve25519AesSha2:\n            default:\n                algorithms.add(\"m.olm.v1.curve25519-aes-sha2\");\n                break;\n        }\n    });\n\n    return new Device({\n        deviceId: device.deviceId.toString(),\n        userId: userId.toString(),\n        keys,\n        algorithms: Array.from(algorithms),\n        verified,\n        signatures,\n        displayName: device.displayName,\n        dehydrated: device.isDehydrated,\n    });\n}\n\n/**\n * Convert {@link DeviceKeys}  from `/keys/query` request to a `Map<string, Device>`\n * @param deviceKeys - Device keys object to convert\n *\n * @internal\n */\nexport function deviceKeysToDeviceMap(deviceKeys: DeviceKeys): Map<string, Device> {\n    return new Map(\n        Object.entries(deviceKeys).map(([deviceId, device]) => [deviceId, downloadDeviceToJsDevice(device)]),\n    );\n}\n\n// Device from `/keys/query` request\ntype QueryDevice = DeviceKeys[keyof DeviceKeys];\n\n/**\n * Convert `/keys/query` {@link QueryDevice} device to {@link Device}\n * @param device - Device from `/keys/query` request\n *\n * @internal\n */\nexport function downloadDeviceToJsDevice(device: QueryDevice): Device {\n    const keys = new Map(Object.entries(device.keys));\n    const displayName = device.unsigned?.device_display_name;\n\n    const signatures = new Map<string, Map<string, string>>();\n    if (device.signatures) {\n        for (const userId in device.signatures) {\n            signatures.set(userId, new Map(Object.entries(device.signatures[userId])));\n        }\n    }\n\n    return new Device({\n        deviceId: device.device_id,\n        userId: device.user_id,\n        keys,\n        algorithms: device.algorithms,\n        verified: DeviceVerification.Unverified,\n        signatures,\n        displayName,\n    });\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { OlmMachine, CrossSigningStatus, CrossSigningBootstrapRequests } from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { BootstrapCrossSigningOpts } from \"../crypto-api/index.ts\";\nimport { logger } from \"../logger.ts\";\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { UIAuthCallback } from \"../interactive-auth.ts\";\nimport { ServerSideSecretStorage } from \"../secret-storage.ts\";\n\n/** Manages the cross-signing keys for our own user.\n *\n * @internal\n */\nexport class CrossSigningIdentity {\n    public constructor(\n        private readonly olmMachine: OlmMachine,\n        private readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n        private readonly secretStorage: ServerSideSecretStorage,\n    ) {}\n\n    /**\n     * Initialise our cross-signing keys by creating new keys if they do not exist, and uploading to the server\n     */\n    public async bootstrapCrossSigning(opts: BootstrapCrossSigningOpts): Promise<void> {\n        if (opts.setupNewCrossSigning) {\n            await this.resetCrossSigning(opts.authUploadDeviceSigningKeys);\n            return;\n        }\n\n        const olmDeviceStatus: CrossSigningStatus = await this.olmMachine.crossSigningStatus();\n\n        // Try to fetch cross signing keys from the secret storage\n        const masterKeyFromSecretStorage = await this.secretStorage.get(\"m.cross_signing.master\");\n        const selfSigningKeyFromSecretStorage = await this.secretStorage.get(\"m.cross_signing.self_signing\");\n        const userSigningKeyFromSecretStorage = await this.secretStorage.get(\"m.cross_signing.user_signing\");\n        const privateKeysInSecretStorage = Boolean(\n            masterKeyFromSecretStorage && selfSigningKeyFromSecretStorage && userSigningKeyFromSecretStorage,\n        );\n\n        const olmDeviceHasKeys =\n            olmDeviceStatus.hasMaster && olmDeviceStatus.hasUserSigning && olmDeviceStatus.hasSelfSigning;\n\n        // Log all relevant state for easier parsing of debug logs.\n        logger.log(\"bootstrapCrossSigning: starting\", {\n            setupNewCrossSigning: opts.setupNewCrossSigning,\n            olmDeviceHasMaster: olmDeviceStatus.hasMaster,\n            olmDeviceHasUserSigning: olmDeviceStatus.hasUserSigning,\n            olmDeviceHasSelfSigning: olmDeviceStatus.hasSelfSigning,\n            privateKeysInSecretStorage,\n        });\n\n        if (olmDeviceHasKeys) {\n            if (!(await this.secretStorage.hasKey())) {\n                logger.warn(\n                    \"bootstrapCrossSigning: Olm device has private keys, but secret storage is not yet set up; doing nothing for now.\",\n                );\n                // the keys should get uploaded to 4S once that is set up.\n            } else if (!privateKeysInSecretStorage) {\n                // the device has the keys but they are not in 4S, so update it\n                logger.log(\"bootstrapCrossSigning: Olm device has private keys: exporting to secret storage\");\n                await this.exportCrossSigningKeysToStorage();\n            } else {\n                logger.log(\n                    \"bootstrapCrossSigning: Olm device has private keys and they are saved in secret storage; doing nothing\",\n                );\n            }\n        } /* (!olmDeviceHasKeys) */ else {\n            if (privateKeysInSecretStorage) {\n                // they are in 4S, so import from there\n                logger.log(\n                    \"bootstrapCrossSigning: Cross-signing private keys not found locally, but they are available \" +\n                        \"in secret storage, reading storage and caching locally\",\n                );\n                const status = await this.olmMachine.importCrossSigningKeys(\n                    masterKeyFromSecretStorage,\n                    selfSigningKeyFromSecretStorage,\n                    userSigningKeyFromSecretStorage,\n                );\n\n                // Check that `importCrossSigningKeys` worked correctly (for example, it will fail silently if the\n                // public keys are not available).\n                if (!status.hasMaster || !status.hasSelfSigning || !status.hasUserSigning) {\n                    throw new Error(\"importCrossSigningKeys failed to import the keys\");\n                }\n\n                // Get the current device\n                const device: RustSdkCryptoJs.Device = await this.olmMachine.getDevice(\n                    this.olmMachine.userId,\n                    this.olmMachine.deviceId,\n                );\n                try {\n                    // Sign the device with our cross-signing key and upload the signature\n                    const request: RustSdkCryptoJs.SignatureUploadRequest = await device.verify();\n                    await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n                } finally {\n                    device.free();\n                }\n            } else {\n                logger.log(\n                    \"bootstrapCrossSigning: Cross-signing private keys not found locally or in secret storage, creating new keys\",\n                );\n                await this.resetCrossSigning(opts.authUploadDeviceSigningKeys);\n            }\n        }\n\n        // TODO: we might previously have bootstrapped cross-signing but not completed uploading the keys to the\n        //   server -- in which case we should call OlmDevice.bootstrap_cross_signing. How do we know?\n        logger.log(\"bootstrapCrossSigning: complete\");\n    }\n\n    /** Reset our cross-signing keys\n     *\n     * This method will:\n     *   * Tell the OlmMachine to create new keys\n     *   * Upload the new public keys and the device signature to the server\n     *   * Upload the private keys to SSSS, if it is set up\n     */\n    private async resetCrossSigning(authUploadDeviceSigningKeys?: UIAuthCallback<void>): Promise<void> {\n        // XXX: We must find a way to make this atomic, currently if the user does not remember his account password\n        // or 4S passphrase/key the process will fail in a bad state, with keys rotated but not uploaded or saved in 4S.\n        const outgoingRequests: CrossSigningBootstrapRequests = await this.olmMachine.bootstrapCrossSigning(true);\n\n        // If 4S is configured we need to update it.\n        if (!(await this.secretStorage.hasKey())) {\n            logger.warn(\n                \"resetCrossSigning: Secret storage is not yet set up; not exporting keys to secret storage yet.\",\n            );\n            // the keys should get uploaded to 4S once that is set up.\n        } else {\n            // Update 4S before uploading cross-signing keys, to stay consistent with legacy that asks\n            // 4S passphrase before asking for account password.\n            // Ultimately should be made atomic and resistant to forgotten password/passphrase.\n            logger.log(\"resetCrossSigning: exporting private keys to secret storage\");\n            await this.exportCrossSigningKeysToStorage();\n        }\n\n        logger.log(\"resetCrossSigning: publishing public keys to server\");\n        for (const req of [\n            outgoingRequests.uploadKeysRequest,\n            outgoingRequests.uploadSigningKeysRequest,\n            outgoingRequests.uploadSignaturesRequest,\n        ]) {\n            if (req) {\n                await this.outgoingRequestProcessor.makeOutgoingRequest(req, authUploadDeviceSigningKeys);\n            }\n        }\n    }\n\n    /**\n     * Extract the cross-signing keys from the olm machine and save them to secret storage, if it is configured\n     *\n     * (If secret storage is *not* configured, we assume that the export will happen when it is set up)\n     */\n    private async exportCrossSigningKeysToStorage(): Promise<void> {\n        const exported: RustSdkCryptoJs.CrossSigningKeyExport | null = await this.olmMachine.exportCrossSigningKeys();\n        /* istanbul ignore else (this function is only called when we know the olm machine has keys) */\n        if (exported?.masterKey) {\n            await this.secretStorage.store(\"m.cross_signing.master\", exported.masterKey);\n        } else {\n            logger.error(`Cannot export MSK to secret storage, private key unknown`);\n        }\n        if (exported?.self_signing_key) {\n            await this.secretStorage.store(\"m.cross_signing.self_signing\", exported.self_signing_key);\n        } else {\n            logger.error(`Cannot export SSK to secret storage, private key unknown`);\n        }\n        if (exported?.userSigningKey) {\n            await this.secretStorage.store(\"m.cross_signing.user_signing\", exported.userSigningKey);\n        } else {\n            logger.error(`Cannot export USK to secret storage, private key unknown`);\n        }\n    }\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { SecretStorageKey, ServerSideSecretStorage } from \"../secret-storage.ts\";\n\n/**\n * Check that the private cross signing keys (master, self signing, user signing) are stored in the secret storage and encrypted with the default secret storage key.\n *\n * @param secretStorage - The secret store using account data\n * @returns True if the cross-signing keys are all stored and encrypted with the same secret storage key.\n *\n * @internal\n */\nexport async function secretStorageContainsCrossSigningKeys(secretStorage: ServerSideSecretStorage): Promise<boolean> {\n    return secretStorageCanAccessSecrets(secretStorage, [\n        \"m.cross_signing.master\",\n        \"m.cross_signing.user_signing\",\n        \"m.cross_signing.self_signing\",\n    ]);\n}\n\n/**\n *\n * Check that the secret storage can access the given secrets using the default key.\n *\n * @param secretStorage - The secret store using account data\n * @param secretNames - The secret names to check\n * @returns True if all the given secrets are accessible and encrypted with the given key.\n *\n * @internal\n */\nexport async function secretStorageCanAccessSecrets(\n    secretStorage: ServerSideSecretStorage,\n    secretNames: SecretStorageKey[],\n): Promise<boolean> {\n    const defaultKeyId = await secretStorage.getDefaultKeyId();\n    if (!defaultKeyId) return false;\n\n    for (const secretName of secretNames) {\n        // check which keys this particular secret is encrypted with\n        const record = (await secretStorage.isStored(secretName)) || {};\n        // if it's not encrypted with the right key, there is no point continuing\n        if (!(defaultKeyId in record)) return false;\n    }\n\n    return true;\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { QrState } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport {\n    GeneratedSas,\n    ShowQrCodeCallbacks,\n    ShowSasCallbacks,\n    VerificationPhase,\n    VerificationRequest,\n    VerificationRequestEvent,\n    VerificationRequestEventHandlerMap,\n    Verifier,\n    VerifierEvent,\n    VerifierEventHandlerMap,\n} from \"../crypto-api/verification.ts\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\nimport { OutgoingRequest, OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { TypedReEmitter } from \"../ReEmitter.ts\";\nimport { MatrixEvent } from \"../models/event.ts\";\nimport { EventType, MsgType } from \"../@types/event.ts\";\nimport { defer, IDeferred } from \"../utils.ts\";\nimport { VerificationMethod } from \"../types.ts\";\n\n/**\n * An incoming, or outgoing, request to verify a user or a device via cross-signing.\n *\n * @internal\n */\nexport class RustVerificationRequest\n    extends TypedEventEmitter<VerificationRequestEvent, VerificationRequestEventHandlerMap>\n    implements VerificationRequest\n{\n    /** a reëmitter which relays VerificationRequestEvent.Changed events emitted by the verifier */\n    private readonly reEmitter: TypedReEmitter<VerificationRequestEvent, VerificationRequestEventHandlerMap>;\n\n    /** Are we in the process of sending an `m.key.verification.ready` event? */\n    private _accepting = false;\n\n    /** Are we in the process of sending an `m.key.verification.cancellation` event? */\n    private _cancelling = false;\n\n    private _verifier: undefined | RustSASVerifier | RustQrCodeVerifier;\n\n    /**\n     * Construct a new RustVerificationRequest to wrap the rust-level `VerificationRequest`.\n     *\n     * @param olmMachine - The `OlmMachine` from the underlying rust crypto sdk.\n     * @param inner - VerificationRequest from the Rust SDK.\n     * @param outgoingRequestProcessor - `OutgoingRequestProcessor` to use for making outgoing HTTP requests.\n     * @param supportedVerificationMethods - Verification methods to use when `accept()` is called.\n     */\n    public constructor(\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n        private readonly inner: RustSdkCryptoJs.VerificationRequest,\n        private readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n        private readonly supportedVerificationMethods: string[],\n    ) {\n        super();\n        this.reEmitter = new TypedReEmitter(this);\n\n        // Obviously, the Rust object maintains a reference to the callback function. If the callback function maintains\n        // a reference to the Rust object, then we have a reference cycle which means that `RustVerificationRequest`\n        // will never be garbage-collected, and hence the underlying rust object will never be freed.\n        //\n        // To avoid this reference cycle, use a weak reference in the callback function. If the `RustVerificationRequest`\n        // gets garbage-collected, then there is nothing to update!\n        const weakThis = new WeakRef(this);\n        inner.registerChangesCallback(async () => weakThis.deref()?.onChange());\n    }\n\n    /**\n     * Hook which is called when the underlying rust class notifies us that there has been a change.\n     */\n    private onChange(): void {\n        const verification: RustSdkCryptoJs.Qr | RustSdkCryptoJs.Sas | undefined = this.inner.getVerification();\n\n        // Set the _verifier object (wrapping the rust `Verification` as a js-sdk Verifier) if:\n        // - we now have a `Verification` where we lacked one before\n        // - we have transitioned from QR to SAS\n        // - we are verifying with SAS, but we need to replace our verifier with a new one because both parties\n        //   tried to start verification at the same time, and we lost the tie breaking\n        if (verification instanceof RustSdkCryptoJs.Sas) {\n            if (this._verifier === undefined || this._verifier instanceof RustQrCodeVerifier) {\n                this.setVerifier(new RustSASVerifier(verification, this, this.outgoingRequestProcessor));\n            } else if (this._verifier instanceof RustSASVerifier) {\n                this._verifier.replaceInner(verification);\n            }\n        } else if (verification instanceof RustSdkCryptoJs.Qr && this._verifier === undefined) {\n            this.setVerifier(new RustQrCodeVerifier(verification, this.outgoingRequestProcessor));\n        }\n\n        this.emit(VerificationRequestEvent.Change);\n    }\n\n    private setVerifier(verifier: RustSASVerifier | RustQrCodeVerifier): void {\n        // if we already have a verifier, unsubscribe from its events\n        if (this._verifier) {\n            this.reEmitter.stopReEmitting(this._verifier, [VerificationRequestEvent.Change]);\n        }\n        this._verifier = verifier;\n        this.reEmitter.reEmit(this._verifier, [VerificationRequestEvent.Change]);\n    }\n\n    /**\n     * Unique ID for this verification request.\n     *\n     * An ID isn't assigned until the first message is sent, so this may be `undefined` in the early phases.\n     */\n    public get transactionId(): string | undefined {\n        return this.inner.flowId;\n    }\n\n    /**\n     * For an in-room verification, the ID of the room.\n     *\n     * For to-device verifications, `undefined`.\n     */\n    public get roomId(): string | undefined {\n        return this.inner.roomId?.toString();\n    }\n\n    /**\n     * True if this request was initiated by the local client.\n     *\n     * For in-room verifications, the initiator is who sent the `m.key.verification.request` event.\n     * For to-device verifications, the initiator is who sent the `m.key.verification.start` event.\n     */\n    public get initiatedByMe(): boolean {\n        return this.inner.weStarted();\n    }\n\n    /** The user id of the other party in this request */\n    public get otherUserId(): string {\n        return this.inner.otherUserId.toString();\n    }\n\n    /** For verifications via to-device messages: the ID of the other device. Otherwise, undefined. */\n    public get otherDeviceId(): string | undefined {\n        return this.inner.otherDeviceId?.toString();\n    }\n\n    /** Get the other device involved in the verification, if it is known */\n    private async getOtherDevice(): Promise<undefined | RustSdkCryptoJs.Device> {\n        const otherDeviceId = this.inner.otherDeviceId;\n        if (!otherDeviceId) {\n            return undefined;\n        }\n        return await this.olmMachine.getDevice(this.inner.otherUserId, otherDeviceId, 5);\n    }\n\n    /** True if the other party in this request is one of this user's own devices. */\n    public get isSelfVerification(): boolean {\n        return this.inner.isSelfVerification();\n    }\n\n    /** current phase of the request. */\n    public get phase(): VerificationPhase {\n        const phase = this.inner.phase();\n\n        switch (phase) {\n            case RustSdkCryptoJs.VerificationRequestPhase.Created:\n            case RustSdkCryptoJs.VerificationRequestPhase.Requested:\n                return VerificationPhase.Requested;\n            case RustSdkCryptoJs.VerificationRequestPhase.Ready:\n                // if we're still sending the `m.key.verification.ready`, that counts as \"Requested\" in the js-sdk's\n                // parlance.\n                return this._accepting ? VerificationPhase.Requested : VerificationPhase.Ready;\n            case RustSdkCryptoJs.VerificationRequestPhase.Transitioned:\n                if (!this._verifier) {\n                    // this shouldn't happen, because the onChange handler should have created a _verifier.\n                    throw new Error(\"VerificationRequest: inner phase == Transitioned but no verifier!\");\n                }\n                return this._verifier.verificationPhase;\n            case RustSdkCryptoJs.VerificationRequestPhase.Done:\n                return VerificationPhase.Done;\n            case RustSdkCryptoJs.VerificationRequestPhase.Cancelled:\n                return VerificationPhase.Cancelled;\n        }\n\n        throw new Error(`Unknown verification phase ${phase}`);\n    }\n\n    /** True if the request has sent its initial event and needs more events to complete\n     * (ie it is in phase `Requested`, `Ready` or `Started`).\n     */\n    public get pending(): boolean {\n        if (this.inner.isPassive()) return false;\n        const phase = this.phase;\n        return phase !== VerificationPhase.Done && phase !== VerificationPhase.Cancelled;\n    }\n\n    /**\n     * True if we have started the process of sending an `m.key.verification.ready` (but have not necessarily received\n     * the remote echo which causes a transition to {@link VerificationPhase.Ready}.\n     */\n    public get accepting(): boolean {\n        return this._accepting;\n    }\n\n    /**\n     * True if we have started the process of sending an `m.key.verification.cancel` (but have not necessarily received\n     * the remote echo which causes a transition to {@link VerificationPhase.Cancelled}).\n     */\n    public get declining(): boolean {\n        return this._cancelling;\n    }\n\n    /**\n     * The remaining number of ms before the request will be automatically cancelled.\n     *\n     * `null` indicates that there is no timeout\n     */\n    public get timeout(): number | null {\n        return this.inner.timeRemainingMillis();\n    }\n\n    /** once the phase is Started (and !initiatedByMe) or Ready: common methods supported by both sides */\n    public get methods(): string[] {\n        throw new Error(\"not implemented\");\n    }\n\n    /** the method picked in the .start event */\n    public get chosenMethod(): string | null {\n        if (this.phase !== VerificationPhase.Started) return null;\n\n        const verification: RustSdkCryptoJs.Qr | RustSdkCryptoJs.Sas | undefined = this.inner.getVerification();\n        if (verification instanceof RustSdkCryptoJs.Sas) {\n            return VerificationMethod.Sas;\n        } else if (verification instanceof RustSdkCryptoJs.Qr) {\n            return VerificationMethod.Reciprocate;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Checks whether the other party supports a given verification method.\n     * This is useful when setting up the QR code UI, as it is somewhat asymmetrical:\n     * if the other party supports SCAN_QR, we should show a QR code in the UI, and vice versa.\n     * For methods that need to be supported by both ends, use the `methods` property.\n     *\n     * @param method - the method to check\n     * @returns true if the other party said they supported the method\n     */\n    public otherPartySupportsMethod(method: string): boolean {\n        const theirMethods: RustSdkCryptoJs.VerificationMethod[] | undefined = this.inner.theirSupportedMethods;\n        if (theirMethods === undefined) {\n            // no message from the other side yet\n            return false;\n        }\n\n        const requiredMethod = verificationMethodsByIdentifier[method];\n        return theirMethods.some((m) => m === requiredMethod);\n    }\n\n    /**\n     * Accepts the request, sending a .ready event to the other party\n     *\n     * @returns Promise which resolves when the event has been sent.\n     */\n    public async accept(): Promise<void> {\n        if (this.inner.phase() !== RustSdkCryptoJs.VerificationRequestPhase.Requested || this._accepting) {\n            throw new Error(`Cannot accept a verification request in phase ${this.phase}`);\n        }\n\n        this._accepting = true;\n        try {\n            const req: undefined | OutgoingRequest = this.inner.acceptWithMethods(\n                this.supportedVerificationMethods.map(verificationMethodIdentifierToMethod),\n            );\n            if (req) {\n                await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n            }\n        } finally {\n            this._accepting = false;\n        }\n\n        // phase may have changed, so emit a 'change' event\n        this.emit(VerificationRequestEvent.Change);\n    }\n\n    /**\n     * Cancels the request, sending a cancellation to the other party\n     *\n     * @param params - Details for the cancellation, including `reason` (defaults to \"User declined\"), and `code`\n     *    (defaults to `m.user`).\n     *\n     * @returns Promise which resolves when the event has been sent.\n     */\n    public async cancel(params?: { reason?: string; code?: string }): Promise<void> {\n        if (this._cancelling) {\n            // already cancelling; do nothing\n            return;\n        }\n\n        this._cancelling = true;\n        try {\n            const req: undefined | OutgoingRequest = this.inner.cancel();\n            if (req) {\n                await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n            }\n        } finally {\n            this._cancelling = false;\n        }\n    }\n\n    /**\n     * Create a {@link Verifier} to do this verification via a particular method.\n     *\n     * If a verifier has already been created for this request, returns that verifier.\n     *\n     * This does *not* send the `m.key.verification.start` event - to do so, call {@link Verifier#verifier} on the\n     * returned verifier.\n     *\n     * If no previous events have been sent, pass in `targetDevice` to set who to direct this request to.\n     *\n     * @param method - the name of the verification method to use.\n     * @param targetDevice - details of where to send the request to.\n     *\n     * @returns The verifier which will do the actual verification.\n     */\n    public beginKeyVerification(method: string, targetDevice?: { userId?: string; deviceId?: string }): Verifier {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * Send an `m.key.verification.start` event to start verification via a particular method.\n     *\n     * Implementation of {@link Crypto.VerificationRequest#startVerification}.\n     *\n     * @param method - the name of the verification method to use.\n     */\n    public async startVerification(method: string): Promise<Verifier> {\n        if (method !== VerificationMethod.Sas) {\n            throw new Error(`Unsupported verification method ${method}`);\n        }\n\n        // make sure that we have a list of the other user's devices (workaround https://github.com/matrix-org/matrix-rust-sdk/issues/2896)\n        if (!(await this.getOtherDevice())) {\n            throw new Error(\"startVerification(): other device is unknown\");\n        }\n\n        const res:\n            | [RustSdkCryptoJs.Sas, RustSdkCryptoJs.RoomMessageRequest | RustSdkCryptoJs.ToDeviceRequest]\n            | undefined = await this.inner.startSas();\n\n        if (res) {\n            const [, req] = res;\n            await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n\n        // this should have triggered the onChange callback, and we should now have a verifier\n        if (!this._verifier) {\n            throw new Error(\"Still no verifier after startSas() call\");\n        }\n\n        return this._verifier;\n    }\n\n    /**\n     * Start a QR code verification by providing a scanned QR code for this verification flow.\n     *\n     * Implementation of {@link Crypto.VerificationRequest#scanQRCode}.\n     *\n     * @param qrCodeData - the decoded QR code.\n     * @returns A verifier; call `.verify()` on it to wait for the other side to complete the verification flow.\n     */\n    public async scanQRCode(uint8Array: Uint8ClampedArray): Promise<Verifier> {\n        const scan = RustSdkCryptoJs.QrCodeScan.fromBytes(uint8Array);\n        const verifier: RustSdkCryptoJs.Qr = await this.inner.scanQrCode(scan);\n\n        // this should have triggered the onChange callback, and we should now have a verifier\n        if (!this._verifier) {\n            throw new Error(\"Still no verifier after scanQrCode() call\");\n        }\n\n        // we can immediately trigger the reciprocate request\n        const req: undefined | OutgoingRequest = verifier.reciprocate();\n        if (req) {\n            await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n\n        return this._verifier;\n    }\n\n    /**\n     * The verifier which is doing the actual verification, once the method has been established.\n     * Only defined when the `phase` is Started.\n     */\n    public get verifier(): Verifier | undefined {\n        // It's possible for us to have a Verifier before a method has been chosen (in particular,\n        // if we are showing a QR code which the other device has not yet scanned. At that point, we could\n        // still switch to SAS).\n        //\n        // In that case, we should not return it to the application yet, since the application will not expect the\n        // Verifier to be replaced during the lifetime of the VerificationRequest.\n        return this.phase === VerificationPhase.Started ? this._verifier : undefined;\n    }\n\n    /**\n     * Stub implementation of {@link Crypto.VerificationRequest#getQRCodeBytes}.\n     */\n    public getQRCodeBytes(): Uint8ClampedArray | undefined {\n        throw new Error(\"getQRCodeBytes() unsupported in Rust Crypto; use generateQRCode() instead.\");\n    }\n\n    /**\n     * Generate the data for a QR code allowing the other device to verify this one, if it supports it.\n     *\n     * Implementation of {@link Crypto.VerificationRequest#generateQRCode}.\n     */\n    public async generateQRCode(): Promise<Uint8ClampedArray | undefined> {\n        // make sure that we have a list of the other user's devices (workaround https://github.com/matrix-org/matrix-rust-sdk/issues/2896)\n        if (!(await this.getOtherDevice())) {\n            throw new Error(\"generateQRCode(): other device is unknown\");\n        }\n\n        const innerVerifier: RustSdkCryptoJs.Qr | undefined = await this.inner.generateQrCode();\n        // If we are unable to generate a QRCode, we return undefined\n        if (!innerVerifier) return;\n\n        return innerVerifier.toBytes();\n    }\n\n    /**\n     * If this request has been cancelled, the cancellation code (e.g `m.user`) which is responsible for cancelling\n     * this verification.\n     */\n    public get cancellationCode(): string | null {\n        return this.inner.cancelInfo?.cancelCode() ?? null;\n    }\n\n    /**\n     * The id of the user that cancelled the request.\n     *\n     * Only defined when phase is Cancelled\n     */\n    public get cancellingUserId(): string | undefined {\n        const cancelInfo = this.inner.cancelInfo;\n        if (!cancelInfo) {\n            return undefined;\n        } else if (cancelInfo.cancelledbyUs()) {\n            return this.olmMachine.userId.toString();\n        } else {\n            return this.inner.otherUserId.toString();\n        }\n    }\n}\n\n/** Common base class for `Verifier` implementations which wrap rust classes.\n *\n * The generic parameter `InnerType` is the type of the rust Verification class which we wrap.\n *\n * @internal\n */\nabstract class BaseRustVerifer<InnerType extends RustSdkCryptoJs.Qr | RustSdkCryptoJs.Sas> extends TypedEventEmitter<\n    VerifierEvent | VerificationRequestEvent,\n    VerifierEventHandlerMap & VerificationRequestEventHandlerMap\n> {\n    /** A deferred which completes when the verification completes (or rejects when it is cancelled/fails) */\n    protected readonly completionDeferred: IDeferred<void>;\n\n    public constructor(\n        protected inner: InnerType,\n        protected readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n    ) {\n        super();\n\n        this.completionDeferred = defer();\n\n        // As with RustVerificationRequest, we need to avoid a reference cycle.\n        // See the comments in RustVerificationRequest.\n        const weakThis = new WeakRef(this);\n        inner.registerChangesCallback(async () => weakThis.deref()?.onChange());\n\n        // stop the runtime complaining if nobody catches a failure\n        this.completionDeferred.promise.catch(() => null);\n    }\n\n    /**\n     * Hook which is called when the underlying rust class notifies us that there has been a change.\n     *\n     * Can be overridden by subclasses to see if we can notify the application about an update. The overriding method\n     * must call `super.onChange()`.\n     */\n    protected onChange(): void {\n        if (this.inner.isDone()) {\n            this.completionDeferred.resolve(undefined);\n        } else if (this.inner.isCancelled()) {\n            const cancelInfo = this.inner.cancelInfo()!;\n            this.completionDeferred.reject(\n                new Error(\n                    `Verification cancelled by ${\n                        cancelInfo.cancelledbyUs() ? \"us\" : \"them\"\n                    } with code ${cancelInfo.cancelCode()}: ${cancelInfo.reason()}`,\n                ),\n            );\n        }\n\n        this.emit(VerificationRequestEvent.Change);\n    }\n\n    /**\n     * Returns true if the verification has been cancelled, either by us or the other side.\n     */\n    public get hasBeenCancelled(): boolean {\n        return this.inner.isCancelled();\n    }\n\n    /**\n     * The ID of the other user in the verification process.\n     */\n    public get userId(): string {\n        return this.inner.otherUserId.toString();\n    }\n\n    /**\n     * Cancel a verification.\n     *\n     * We will send an `m.key.verification.cancel` if the verification is still in flight. The verification promise\n     * will reject, and a {@link Crypto.VerifierEvent#Cancel} will be emitted.\n     *\n     * @param e - the reason for the cancellation.\n     */\n    public cancel(e?: Error): void {\n        // TODO: something with `e`\n        const req: undefined | OutgoingRequest = this.inner.cancel();\n        if (req) {\n            this.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n    }\n\n    /**\n     * Get the details for an SAS verification, if one is in progress\n     *\n     * Returns `null`, unless this verifier is for a SAS-based verification and we are waiting for the user to confirm\n     * the SAS matches.\n     */\n    public getShowSasCallbacks(): ShowSasCallbacks | null {\n        return null;\n    }\n\n    /**\n     * Get the details for reciprocating QR code verification, if one is in progress\n     *\n     * Returns `null`, unless this verifier is for reciprocating a QR-code-based verification (ie, the other user has\n     * already scanned our QR code), and we are waiting for the user to confirm.\n     */\n    public getReciprocateQrCodeCallbacks(): ShowQrCodeCallbacks | null {\n        return null;\n    }\n}\n\n/** A Verifier instance which is used to show and/or scan a QR code. */\nexport class RustQrCodeVerifier extends BaseRustVerifer<RustSdkCryptoJs.Qr> implements Verifier {\n    private callbacks: ShowQrCodeCallbacks | null = null;\n\n    public constructor(inner: RustSdkCryptoJs.Qr, outgoingRequestProcessor: OutgoingRequestProcessor) {\n        super(inner, outgoingRequestProcessor);\n    }\n\n    protected onChange(): void {\n        // if the other side has scanned our QR code and sent us a \"reciprocate\" message, it is now time for the\n        // application to prompt the user to confirm their side.\n        if (this.callbacks === null && this.inner.hasBeenScanned()) {\n            this.callbacks = {\n                confirm: (): void => {\n                    this.confirmScanning();\n                },\n                cancel: (): void => this.cancel(),\n            };\n        }\n\n        super.onChange();\n    }\n\n    /**\n     * Start the key verification, if it has not already been started.\n     *\n     * @returns Promise which resolves when the verification has completed, or rejects if the verification is cancelled\n     *    or times out.\n     */\n    public async verify(): Promise<void> {\n        // Some applications (hello, matrix-react-sdk) may not check if there is a `ShowQrCodeCallbacks` and instead\n        // register a `ShowReciprocateQr` listener which they expect to be called once `.verify` is called.\n        if (this.callbacks !== null) {\n            this.emit(VerifierEvent.ShowReciprocateQr, this.callbacks);\n        }\n        // Nothing to do here but wait.\n        await this.completionDeferred.promise;\n    }\n\n    /**\n     * Calculate an appropriate VerificationPhase for a VerificationRequest where this is the verifier.\n     *\n     * This is abnormally complicated because a rust-side QR Code verifier can span several verification phases.\n     */\n    public get verificationPhase(): VerificationPhase {\n        switch (this.inner.state()) {\n            case QrState.Created:\n                // we have created a QR for display; neither side has yet sent an `m.key.verification.start`.\n                return VerificationPhase.Ready;\n            case QrState.Scanned:\n                // other side has scanned our QR and sent an `m.key.verification.start` with `m.reciprocate.v1`\n                return VerificationPhase.Started;\n            case QrState.Confirmed:\n                // we have confirmed the other side's scan and sent an `m.key.verification.done`.\n                //\n                // However, the verification is not yet \"Done\", because we have to wait until we have received the\n                // `m.key.verification.done` from the other side (in particular, we don't mark the device/identity as\n                // verified until that happens). If we return \"Done\" too soon, we risk the user cancelling the flow.\n                return VerificationPhase.Started;\n            case QrState.Reciprocated:\n                // although the rust SDK doesn't immediately send the `m.key.verification.start` on transition into this\n                // state, `RustVerificationRequest.scanQrCode` immediately calls `reciprocate()` and does so, so in practice\n                // we can treat the two the same.\n                return VerificationPhase.Started;\n            case QrState.Done:\n                return VerificationPhase.Done;\n            case QrState.Cancelled:\n                return VerificationPhase.Cancelled;\n            default:\n                throw new Error(`Unknown qr code state ${this.inner.state()}`);\n        }\n    }\n\n    /**\n     * Get the details for reciprocating QR code verification, if one is in progress\n     *\n     * Returns `null`, unless this verifier is for reciprocating a QR-code-based verification (ie, the other user has\n     * already scanned our QR code), and we are waiting for the user to confirm.\n     */\n    public getReciprocateQrCodeCallbacks(): ShowQrCodeCallbacks | null {\n        return this.callbacks;\n    }\n\n    private async confirmScanning(): Promise<void> {\n        const req: undefined | OutgoingRequest = this.inner.confirmScanning();\n        if (req) {\n            await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n    }\n}\n\n/** A Verifier instance which is used if we are exchanging emojis */\nexport class RustSASVerifier extends BaseRustVerifer<RustSdkCryptoJs.Sas> implements Verifier {\n    private callbacks: ShowSasCallbacks | null = null;\n\n    public constructor(\n        inner: RustSdkCryptoJs.Sas,\n        _verificationRequest: RustVerificationRequest,\n        outgoingRequestProcessor: OutgoingRequestProcessor,\n    ) {\n        super(inner, outgoingRequestProcessor);\n    }\n\n    /**\n     * Start the key verification, if it has not already been started.\n     *\n     * This means sending a `m.key.verification.start` if we are the first responder, or a `m.key.verification.accept`\n     * if the other side has already sent a start event.\n     *\n     * @returns Promise which resolves when the verification has completed, or rejects if the verification is cancelled\n     *    or times out.\n     */\n    public async verify(): Promise<void> {\n        await this.sendAccept();\n        await this.completionDeferred.promise;\n    }\n\n    /**\n     * Send the accept or start event, if it hasn't already been sent\n     */\n    private async sendAccept(): Promise<void> {\n        const req: undefined | OutgoingRequest = this.inner.accept();\n        if (req) {\n            await this.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n    }\n\n    /** if we can now show the callbacks, do so */\n    protected onChange(): void {\n        super.onChange();\n\n        if (this.callbacks === null) {\n            const emoji = this.inner.emoji();\n            const decimal = this.inner.decimals();\n\n            if (emoji === undefined && decimal === undefined) {\n                return;\n            }\n\n            const sas: GeneratedSas = {};\n            if (emoji) {\n                sas.emoji = emoji.map((e) => [e.symbol, e.description]);\n            }\n            if (decimal) {\n                sas.decimal = [decimal[0], decimal[1], decimal[2]];\n            }\n\n            this.callbacks = {\n                sas,\n                confirm: async (): Promise<void> => {\n                    const requests: Array<OutgoingRequest> = await this.inner.confirm();\n                    for (const m of requests) {\n                        await this.outgoingRequestProcessor.makeOutgoingRequest(m);\n                    }\n                },\n                mismatch: (): void => {\n                    const request = this.inner.cancelWithCode(\"m.mismatched_sas\");\n                    if (request) {\n                        this.outgoingRequestProcessor.makeOutgoingRequest(request);\n                    }\n                },\n                cancel: (): void => {\n                    const request = this.inner.cancelWithCode(\"m.user\");\n                    if (request) {\n                        this.outgoingRequestProcessor.makeOutgoingRequest(request);\n                    }\n                },\n            };\n            this.emit(VerifierEvent.ShowSas, this.callbacks);\n        }\n    }\n\n    /**\n     * Calculate an appropriate VerificationPhase for a VerificationRequest where this is the verifier.\n     */\n    public get verificationPhase(): VerificationPhase {\n        return VerificationPhase.Started;\n    }\n\n    /**\n     * Get the details for an SAS verification, if one is in progress\n     *\n     * Returns `null`, unless this verifier is for a SAS-based verification and we are waiting for the user to confirm\n     * the SAS matches.\n     */\n    public getShowSasCallbacks(): ShowSasCallbacks | null {\n        return this.callbacks;\n    }\n\n    /**\n     * Replace the inner Rust verifier with a different one.\n     *\n     * @param inner - the new Rust verifier\n     * @internal\n     */\n    public replaceInner(inner: RustSdkCryptoJs.Sas): void {\n        if (this.inner != inner) {\n            this.inner = inner;\n\n            // As with RustVerificationRequest, we need to avoid a reference cycle.\n            // See the comments in RustVerificationRequest.\n            const weakThis = new WeakRef(this);\n            inner.registerChangesCallback(async () => weakThis.deref()?.onChange());\n\n            // replaceInner will only get called if we started the verification at the same time as the other side, and we lost\n            // the tie breaker.  So we need to re-accept their verification.\n            this.sendAccept();\n            this.onChange();\n        }\n    }\n}\n\n/** For each specced verification method, the rust-side `VerificationMethod` corresponding to it */\nconst verificationMethodsByIdentifier: Record<string, RustSdkCryptoJs.VerificationMethod> = {\n    [VerificationMethod.Sas]: RustSdkCryptoJs.VerificationMethod.SasV1,\n    [VerificationMethod.ScanQrCode]: RustSdkCryptoJs.VerificationMethod.QrCodeScanV1,\n    [VerificationMethod.ShowQrCode]: RustSdkCryptoJs.VerificationMethod.QrCodeShowV1,\n    [VerificationMethod.Reciprocate]: RustSdkCryptoJs.VerificationMethod.ReciprocateV1,\n};\n\n/**\n * Convert a specced verification method identifier into a rust-side `VerificationMethod`.\n *\n * @param method - specced method identifier, for example `m.sas.v1`.\n * @returns Rust-side `VerificationMethod` corresponding to `method`.\n * @throws An error if the method is unknown.\n *\n * @internal\n */\nexport function verificationMethodIdentifierToMethod(method: string): RustSdkCryptoJs.VerificationMethod {\n    const meth = verificationMethodsByIdentifier[method];\n    if (meth === undefined) {\n        throw new Error(`Unknown verification method ${method}`);\n    }\n    return meth;\n}\n\n/**\n * Return true if the event's type matches that of an in-room verification event\n *\n * @param event - MatrixEvent\n * @returns\n *\n * @internal\n */\nexport function isVerificationEvent(event: MatrixEvent): boolean {\n    switch (event.getType()) {\n        case EventType.KeyVerificationCancel:\n        case EventType.KeyVerificationDone:\n        case EventType.KeyVerificationMac:\n        case EventType.KeyVerificationStart:\n        case EventType.KeyVerificationKey:\n        case EventType.KeyVerificationReady:\n        case EventType.KeyVerificationAccept:\n            return true;\n        case EventType.RoomMessage:\n            return event.getContent().msgtype === MsgType.KeyVerificationRequest;\n        default:\n            return false;\n    }\n}\n","/*\nCopyright 2023 - 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { OlmMachine, SignatureVerification } from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport {\n    BackupTrustInfo,\n    Curve25519AuthData,\n    KeyBackupCheck,\n    KeyBackupInfo,\n    KeyBackupSession,\n    Curve25519SessionData,\n    KeyBackupRestoreOpts,\n    KeyBackupRestoreResult,\n    KeyBackupRoomSessions,\n} from \"../crypto-api/keybackup.ts\";\nimport { logger } from \"../logger.ts\";\nimport { ClientPrefix, IHttpOpts, MatrixError, MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\nimport { encodeUri, logDuration } from \"../utils.ts\";\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { sleep } from \"../utils.ts\";\nimport { BackupDecryptor } from \"../common-crypto/CryptoBackend.ts\";\nimport { ImportRoomKeyProgressData, ImportRoomKeysOpts, CryptoEvent } from \"../crypto-api/index.ts\";\nimport { AESEncryptedSecretStoragePayload } from \"../@types/AESEncryptedSecretStoragePayload.ts\";\nimport { IMegolmSessionData } from \"../@types/crypto.ts\";\n\n/** Authentification of the backup info, depends on algorithm */\ntype AuthData = KeyBackupInfo[\"auth_data\"];\n\n/**\n * Holds information of a created keybackup.\n * Useful to get the generated private key material and save it securely somewhere.\n */\ninterface KeyBackupCreationInfo {\n    version: string;\n    algorithm: string;\n    authData: AuthData;\n    decryptionKey: RustSdkCryptoJs.BackupDecryptionKey;\n}\n\n/**\n * @internal\n */\nexport class RustBackupManager extends TypedEventEmitter<RustBackupCryptoEvents, RustBackupCryptoEventMap> {\n    /** Have we checked if there is a backup on the server which we can use */\n    private checkedForBackup = false;\n\n    /**\n     * The latest backup version on the server, when we last checked.\n     *\n     * If there was no backup on the server, `null`. If our attempt to check resulted in an error, `undefined`.\n     *\n     * Note that the backup was not necessarily verified.\n     */\n    private serverBackupInfo: KeyBackupInfo | null | undefined = undefined;\n\n    private activeBackupVersion: string | null = null;\n    private stopped = false;\n\n    /** whether {@link backupKeysLoop} is currently running */\n    private backupKeysLoopRunning = false;\n\n    public constructor(\n        private readonly olmMachine: OlmMachine,\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n        private readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n    ) {\n        super();\n    }\n\n    /**\n     * Tells the RustBackupManager to stop.\n     * The RustBackupManager is scheduling background uploads of keys to the backup, this\n     * call allows to cancel the process when the client is stoppped.\n     */\n    public stop(): void {\n        this.stopped = true;\n    }\n\n    /**\n     * Get the backup version we are currently backing up to, if any\n     */\n    public async getActiveBackupVersion(): Promise<string | null> {\n        if (!(await this.olmMachine.isBackupEnabled())) return null;\n        return this.activeBackupVersion;\n    }\n\n    /**\n     * Return the details of the latest backup on the server, when we last checked.\n     *\n     * This normally returns a cached value, but if we haven't yet made a request to the server, it will fire one off.\n     * It will always return the details of the active backup if key backup is enabled.\n     *\n     * If there was no backup on the server, `null`. If our attempt to check resulted in an error, `undefined`.\n     */\n    public async getServerBackupInfo(): Promise<KeyBackupInfo | null | undefined> {\n        // Do a validity check if we haven't already done one. The check is likely to fail if we don't yet have the\n        // backup keys -- but as a side-effect, it will populate `serverBackupInfo`.\n        await this.checkKeyBackupAndEnable(false);\n        return this.serverBackupInfo;\n    }\n\n    /**\n     * Determine if a key backup can be trusted.\n     *\n     * @param info - key backup info dict from {@link MatrixClient#getKeyBackupVersion}.\n     */\n    public async isKeyBackupTrusted(info: KeyBackupInfo): Promise<BackupTrustInfo> {\n        const signatureVerification: SignatureVerification = await this.olmMachine.verifyBackup(info);\n\n        const backupKeys: RustSdkCryptoJs.BackupKeys = await this.olmMachine.getBackupKeys();\n        const decryptionKey = backupKeys?.decryptionKey;\n        const backupMatchesSavedPrivateKey =\n            !!decryptionKey && backupInfoMatchesBackupDecryptionKey(info, decryptionKey);\n        return {\n            matchesDecryptionKey: backupMatchesSavedPrivateKey,\n            trusted: signatureVerification.trusted(),\n        };\n    }\n\n    /**\n     * Re-check the key backup and enable/disable it as appropriate.\n     *\n     * @param force - whether we should force a re-check even if one has already happened.\n     */\n    public checkKeyBackupAndEnable(force: boolean): Promise<KeyBackupCheck | null> {\n        if (!force && this.checkedForBackup) {\n            return Promise.resolve(null);\n        }\n\n        // make sure there is only one check going on at a time\n        if (!this.keyBackupCheckInProgress) {\n            this.keyBackupCheckInProgress = this.doCheckKeyBackup().finally(() => {\n                this.keyBackupCheckInProgress = null;\n            });\n        }\n        return this.keyBackupCheckInProgress;\n    }\n\n    /**\n     * Handles a backup secret received event and store it if it matches the current backup version.\n     *\n     * @param secret - The secret as received from a `m.secret.send` event for secret `m.megolm_backup.v1`.\n     * @returns true if the secret is valid and has been stored, false otherwise.\n     */\n    public async handleBackupSecretReceived(secret: string): Promise<boolean> {\n        // Currently we only receive the decryption key without any key backup version. It is important to\n        // check that the secret is valid for the current version before storing it.\n        // We force a check to ensure to have the latest version. We also want to check that the backup is trusted\n        // as we don't want to store the secret if the backup is not trusted, and eventually import megolm keys later from an untrusted backup.\n        const backupCheck = await this.checkKeyBackupAndEnable(true);\n\n        if (!backupCheck?.backupInfo?.version || !backupCheck.trustInfo.trusted) {\n            // There is no server-side key backup, or the backup is not signed by a trusted cross-signing key or trusted own device.\n            // This decryption key is useless to us.\n            logger.warn(\n                \"handleBackupSecretReceived: Received a backup decryption key, but there is no trusted server-side key backup\",\n            );\n            return false;\n        }\n\n        try {\n            const backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(secret);\n            const privateKeyMatches = backupInfoMatchesBackupDecryptionKey(backupCheck.backupInfo, backupDecryptionKey);\n            if (!privateKeyMatches) {\n                logger.warn(\n                    `handleBackupSecretReceived: Private decryption key does not match the public key of the current remote backup.`,\n                );\n                // just ignore the secret\n                return false;\n            }\n            logger.info(\n                `handleBackupSecretReceived: A valid backup decryption key has been received and stored in cache.`,\n            );\n            await this.saveBackupDecryptionKey(backupDecryptionKey, backupCheck.backupInfo.version);\n            return true;\n        } catch (e) {\n            logger.warn(\"handleBackupSecretReceived: Invalid backup decryption key\", e);\n        }\n\n        return false;\n    }\n\n    public async saveBackupDecryptionKey(\n        backupDecryptionKey: RustSdkCryptoJs.BackupDecryptionKey,\n        version: string,\n    ): Promise<void> {\n        await this.olmMachine.saveBackupDecryptionKey(backupDecryptionKey, version);\n        // Emit an event that we have a new backup decryption key, so that the sdk can start\n        // importing keys from backup if needed.\n        this.emit(CryptoEvent.KeyBackupDecryptionKeyCached, version);\n    }\n\n    /**\n     * Import a list of room keys previously exported by exportRoomKeys\n     *\n     * @param keys - a list of session export objects\n     * @param opts - options object\n     * @returns a promise which resolves once the keys have been imported\n     */\n    public async importRoomKeys(keys: IMegolmSessionData[], opts?: ImportRoomKeysOpts): Promise<void> {\n        await this.importRoomKeysAsJson(JSON.stringify(keys), opts);\n    }\n\n    /**\n     * Import a list of room keys previously exported by exportRoomKeysAsJson\n     *\n     * @param jsonKeys - a JSON string encoding a list of session export objects,\n     *    each of which is an IMegolmSessionData\n     * @param opts - options object\n     * @returns a promise which resolves once the keys have been imported\n     */\n    public async importRoomKeysAsJson(jsonKeys: string, opts?: ImportRoomKeysOpts): Promise<void> {\n        await this.olmMachine.importExportedRoomKeys(jsonKeys, (progress: bigint, total: bigint): void => {\n            const importOpt: ImportRoomKeyProgressData = {\n                total: Number(total),\n                successes: Number(progress),\n                stage: \"load_keys\",\n                failures: 0,\n            };\n            opts?.progressCallback?.(importOpt);\n        });\n    }\n\n    /**\n     * Implementation of {@link CryptoBackend#importBackedUpRoomKeys}.\n     */\n    public async importBackedUpRoomKeys(\n        keys: IMegolmSessionData[],\n        backupVersion: string,\n        opts?: ImportRoomKeysOpts,\n    ): Promise<void> {\n        const keysByRoom: Map<RustSdkCryptoJs.RoomId, Map<string, IMegolmSessionData>> = new Map();\n        for (const key of keys) {\n            const roomId = new RustSdkCryptoJs.RoomId(key.room_id);\n            if (!keysByRoom.has(roomId)) {\n                keysByRoom.set(roomId, new Map());\n            }\n            keysByRoom.get(roomId)!.set(key.session_id, key);\n        }\n        await this.olmMachine.importBackedUpRoomKeys(\n            keysByRoom,\n            (progress: bigint, total: bigint, failures: bigint): void => {\n                const importOpt: ImportRoomKeyProgressData = {\n                    total: Number(total),\n                    successes: Number(progress),\n                    stage: \"load_keys\",\n                    failures: Number(failures),\n                };\n                opts?.progressCallback?.(importOpt);\n            },\n            backupVersion,\n        );\n    }\n\n    private keyBackupCheckInProgress: Promise<KeyBackupCheck | null> | null = null;\n\n    /** Helper for `checkKeyBackup` */\n    private async doCheckKeyBackup(): Promise<KeyBackupCheck | null> {\n        logger.log(\"Checking key backup status...\");\n        let backupInfo: KeyBackupInfo | null | undefined;\n        try {\n            backupInfo = await this.requestKeyBackupVersion();\n        } catch (e) {\n            logger.warn(\"Error checking for active key backup\", e);\n            this.serverBackupInfo = undefined;\n            return null;\n        }\n        this.checkedForBackup = true;\n\n        if (backupInfo && !backupInfo.version) {\n            logger.warn(\"active backup lacks a useful 'version'; ignoring it\");\n            backupInfo = undefined;\n        }\n        this.serverBackupInfo = backupInfo;\n\n        const activeVersion = await this.getActiveBackupVersion();\n\n        if (!backupInfo) {\n            if (activeVersion !== null) {\n                logger.log(\"No key backup present on server: disabling key backup\");\n                await this.disableKeyBackup();\n            } else {\n                logger.log(\"No key backup present on server: not enabling key backup\");\n            }\n            return null;\n        }\n\n        const trustInfo = await this.isKeyBackupTrusted(backupInfo);\n\n        if (!trustInfo.trusted) {\n            if (activeVersion !== null) {\n                logger.log(\"Key backup present on server but not trusted: disabling key backup\");\n                await this.disableKeyBackup();\n            } else {\n                logger.log(\"Key backup present on server but not trusted: not enabling key backup\");\n            }\n        } else {\n            if (activeVersion === null) {\n                logger.log(`Found usable key backup v${backupInfo.version}: enabling key backups`);\n                await this.enableKeyBackup(backupInfo);\n            } else if (activeVersion !== backupInfo.version) {\n                logger.log(`On backup version ${activeVersion} but found version ${backupInfo.version}: switching.`);\n                // This will remove any pending backup request, remove the backup key and reset the backup state of each room key we have.\n                await this.disableKeyBackup();\n                // Enabling will now trigger re-upload of all the keys\n                await this.enableKeyBackup(backupInfo);\n            } else {\n                logger.log(`Backup version ${backupInfo.version} still current`);\n            }\n        }\n        return { backupInfo, trustInfo };\n    }\n\n    private async enableKeyBackup(backupInfo: KeyBackupInfo): Promise<void> {\n        // we know for certain it must be a Curve25519 key, because we have verified it and only Curve25519\n        // keys can be verified.\n        //\n        // we also checked it has a valid `version`.\n        await this.olmMachine.enableBackupV1(\n            (backupInfo.auth_data as Curve25519AuthData).public_key,\n            backupInfo.version!,\n        );\n        this.activeBackupVersion = backupInfo.version!;\n\n        this.emit(CryptoEvent.KeyBackupStatus, true);\n\n        this.backupKeysLoop();\n    }\n\n    /**\n     * Restart the backup key loop if there is an active trusted backup.\n     * Doesn't try to check the backup server side. To be called when a new\n     * megolm key is known locally.\n     */\n    public async maybeUploadKey(): Promise<void> {\n        if (this.activeBackupVersion != null) {\n            this.backupKeysLoop();\n        }\n    }\n\n    private async disableKeyBackup(): Promise<void> {\n        await this.olmMachine.disableBackup();\n        this.activeBackupVersion = null;\n        this.emit(CryptoEvent.KeyBackupStatus, false);\n    }\n\n    private async backupKeysLoop(maxDelay = 10000): Promise<void> {\n        if (this.backupKeysLoopRunning) {\n            logger.log(`Backup loop already running`);\n            return;\n        }\n        this.backupKeysLoopRunning = true;\n\n        logger.log(`Backup: Starting keys upload loop for backup version:${this.activeBackupVersion}.`);\n\n        // wait between 0 and `maxDelay` seconds, to avoid backup\n        // requests from different clients hitting the server all at\n        // the same time when a new key is sent\n        const delay = Math.random() * maxDelay;\n        await sleep(delay);\n\n        try {\n            // number of consecutive network failures for exponential backoff\n            let numFailures = 0;\n            // The number of keys left to back up. (Populated lazily: see more comments below.)\n            let remainingToUploadCount: number | null = null;\n            // To avoid computing the key when only a few keys were added (after a sync for example),\n            // we compute the count only when at least two iterations are needed.\n            let isFirstIteration = true;\n\n            while (!this.stopped) {\n                // Get a batch of room keys to upload\n                let request: RustSdkCryptoJs.KeysBackupRequest | null = null;\n                try {\n                    request = await logDuration(\n                        logger,\n                        \"BackupRoomKeys: Get keys to backup from rust crypto-sdk\",\n                        async () => {\n                            return await this.olmMachine.backupRoomKeys();\n                        },\n                    );\n                } catch (err) {\n                    logger.error(\"Backup: Failed to get keys to backup from rust crypto-sdk\", err);\n                }\n\n                if (!request || this.stopped || !this.activeBackupVersion) {\n                    logger.log(`Backup: Ending loop for version ${this.activeBackupVersion}.`);\n                    if (!request) {\n                        // nothing more to upload\n                        this.emit(CryptoEvent.KeyBackupSessionsRemaining, 0);\n                    }\n                    return;\n                }\n\n                try {\n                    await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n                    numFailures = 0;\n                    if (this.stopped) break;\n\n                    // Key count performance (`olmMachine.roomKeyCounts()`) can be pretty bad on some configurations.\n                    // In particular, we detected on some M1 macs that when the object store reaches a threshold, the count\n                    // performance stops growing in O(n) and suddenly becomes very slow (40s, 60s or more).\n                    // For reference, the performance drop occurs around 300-400k keys on the platforms where this issue is observed.\n                    // Even on other configurations, the count can take several seconds.\n                    // This will block other operations on the database, like sending messages.\n                    //\n                    // This is a workaround to avoid calling `olmMachine.roomKeyCounts()` too often, and only when necessary.\n                    // We don't call it on the first loop because there could be only a few keys to upload, and we don't want to wait for the count.\n                    if (!isFirstIteration && remainingToUploadCount === null) {\n                        try {\n                            const keyCount = await this.olmMachine.roomKeyCounts();\n                            remainingToUploadCount = keyCount.total - keyCount.backedUp;\n                        } catch (err) {\n                            logger.error(\"Backup: Failed to get key counts from rust crypto-sdk\", err);\n                        }\n                    }\n\n                    if (remainingToUploadCount !== null) {\n                        this.emit(CryptoEvent.KeyBackupSessionsRemaining, remainingToUploadCount);\n                        const keysCountInBatch = this.keysCountInBatch(request);\n                        // `OlmMachine.roomKeyCounts` is called only once for the current backupKeysLoop. But new\n                        // keys could be added during the current loop (after a sync for example).\n                        // So the count can get out of sync with the real number of remaining keys to upload.\n                        // Depending on the number of new keys imported and the time to complete the loop,\n                        // this could result in multiple events being emitted with a remaining key count of 0.\n                        remainingToUploadCount = Math.max(remainingToUploadCount - keysCountInBatch, 0);\n                    }\n                } catch (err) {\n                    numFailures++;\n                    logger.error(\"Backup: Error processing backup request for rust crypto-sdk\", err);\n                    if (err instanceof MatrixError) {\n                        const errCode = err.data.errcode;\n                        if (errCode == \"M_NOT_FOUND\" || errCode == \"M_WRONG_ROOM_KEYS_VERSION\") {\n                            logger.log(`Backup: Failed to upload keys to current vesion: ${errCode}.`);\n                            try {\n                                await this.disableKeyBackup();\n                            } catch (error) {\n                                logger.error(\"Backup: An error occurred while disabling key backup:\", error);\n                            }\n                            this.emit(CryptoEvent.KeyBackupFailed, err.data.errcode!);\n                            // There was an active backup and we are out of sync with the server\n                            // force a check server side\n                            this.backupKeysLoopRunning = false;\n                            this.checkKeyBackupAndEnable(true);\n                            return;\n                        } else if (err.isRateLimitError()) {\n                            // wait for that and then continue?\n                            try {\n                                const waitTime = err.getRetryAfterMs();\n                                if (waitTime && waitTime > 0) {\n                                    await sleep(waitTime);\n                                    continue;\n                                }\n                            } catch (error) {\n                                logger.warn(\n                                    \"Backup: An error occurred while retrieving a rate-limit retry delay\",\n                                    error,\n                                );\n                            } // else go to the normal backoff\n                        }\n                    }\n\n                    // Some other errors (mx, network, or CORS or invalid urls?) anyhow backoff\n                    // exponential backoff if we have failures\n                    await sleep(1000 * Math.pow(2, Math.min(numFailures - 1, 4)));\n                }\n                isFirstIteration = false;\n            }\n        } finally {\n            this.backupKeysLoopRunning = false;\n        }\n    }\n\n    /**\n     * Utility method to count the number of keys in a backup request, in order to update the remaining keys count.\n     * This should be the chunk size of the backup request for all requests but the last, but we don't have access to it\n     * (it's static in the Rust SDK).\n     * @param batch - The backup request to count the keys from.\n     *\n     * @returns The number of keys in the backup request.\n     */\n    private keysCountInBatch(batch: RustSdkCryptoJs.KeysBackupRequest): number {\n        const parsedBody: KeyBackup = JSON.parse(batch.body);\n        return countKeysInBackup(parsedBody);\n    }\n\n    /**\n     * Get information about a key backup from the server\n     * - If version is provided, get information about that backup version.\n     * - If no version is provided, get information about the latest backup.\n     *\n     * @param version - The version of the backup to get information about.\n     * @returns Information object from API or null if there is no active backup.\n     */\n    public async requestKeyBackupVersion(version?: string): Promise<KeyBackupInfo | null> {\n        return await requestKeyBackupVersion(this.http, version);\n    }\n\n    /**\n     * Creates a new key backup by generating a new random private key.\n     *\n     * If there is an existing backup server side it will be deleted and replaced\n     * by the new one.\n     *\n     * @param signObject - Method that should sign the backup with existing device and\n     * existing identity.\n     * @returns a KeyBackupCreationInfo - All information related to the backup.\n     */\n    public async setupKeyBackup(signObject: (authData: AuthData) => Promise<void>): Promise<KeyBackupCreationInfo> {\n        // Clean up any existing backup\n        await this.deleteAllKeyBackupVersions();\n\n        const randomKey = RustSdkCryptoJs.BackupDecryptionKey.createRandomKey();\n        const pubKey = randomKey.megolmV1PublicKey;\n\n        const authData = { public_key: pubKey.publicKeyBase64 };\n\n        await signObject(authData);\n\n        const res = await this.http.authedRequest<{ version: string }>(\n            Method.Post,\n            \"/room_keys/version\",\n            undefined,\n            {\n                algorithm: pubKey.algorithm,\n                auth_data: authData,\n            },\n            {\n                prefix: ClientPrefix.V3,\n            },\n        );\n\n        await this.saveBackupDecryptionKey(randomKey, res.version);\n\n        return {\n            version: res.version,\n            algorithm: pubKey.algorithm,\n            authData: authData,\n            decryptionKey: randomKey,\n        };\n    }\n\n    /**\n     * Deletes all key backups.\n     *\n     * Will call the API to delete active backup until there is no more present.\n     */\n    public async deleteAllKeyBackupVersions(): Promise<void> {\n        // there could be several backup versions. Delete all to be safe.\n        let current = (await this.requestKeyBackupVersion())?.version ?? null;\n        while (current != null) {\n            await this.deleteKeyBackupVersion(current);\n            current = (await this.requestKeyBackupVersion())?.version ?? null;\n        }\n\n        // XXX: Should this also update Secret Storage and delete any existing keys?\n    }\n\n    /**\n     * Deletes the given key backup.\n     *\n     * @param version - The backup version to delete.\n     */\n    public async deleteKeyBackupVersion(version: string): Promise<void> {\n        logger.debug(`deleteKeyBackupVersion v:${version}`);\n        const path = encodeUri(\"/room_keys/version/$version\", { $version: version });\n        await this.http.authedRequest<void>(Method.Delete, path, undefined, undefined, {\n            prefix: ClientPrefix.V3,\n        });\n        // If the backup we are deleting is the active one, we need to disable the key backup and to have the local properties reset\n        if (this.activeBackupVersion === version) {\n            this.serverBackupInfo = null;\n            await this.disableKeyBackup();\n        }\n    }\n\n    /**\n     * Creates a new backup decryptor for the given private key.\n     * @param decryptionKey - The private key to use for decryption.\n     */\n    public createBackupDecryptor(decryptionKey: RustSdkCryptoJs.BackupDecryptionKey): BackupDecryptor {\n        return new RustBackupDecryptor(decryptionKey);\n    }\n\n    /**\n     * Restore a key backup.\n     *\n     * @param backupVersion - The version of the backup to restore.\n     * @param backupDecryptor - The backup decryptor to use to decrypt the keys.\n     * @param opts - Options for the restore.\n     * @returns The total number of keys and the total imported.\n     */\n    public async restoreKeyBackup(\n        backupVersion: string,\n        backupDecryptor: BackupDecryptor,\n        opts?: KeyBackupRestoreOpts,\n    ): Promise<KeyBackupRestoreResult> {\n        const keyBackup = await this.downloadKeyBackup(backupVersion);\n        opts?.progressCallback?.({\n            stage: \"load_keys\",\n        });\n\n        return this.importKeyBackup(keyBackup, backupVersion, backupDecryptor, opts);\n    }\n\n    /**\n     * Call `/room_keys/keys` to download the key backup (room keys) for the given backup version.\n     * https://spec.matrix.org/v1.12/client-server-api/#get_matrixclientv3room_keyskeys\n     *\n     * @param backupVersion\n     * @returns The key backup response.\n     */\n    private downloadKeyBackup(backupVersion: string): Promise<KeyBackup> {\n        return this.http.authedRequest<KeyBackup>(\n            Method.Get,\n            \"/room_keys/keys\",\n            { version: backupVersion },\n            undefined,\n            {\n                prefix: ClientPrefix.V3,\n            },\n        );\n    }\n\n    /**\n     * Import the room keys from a `/room_keys/keys` call.\n     * Calls `opts.progressCallback` with the progress of the import.\n     *\n     * @param keyBackup - The response from the server containing the keys to import.\n     * @param backupVersion - The version of the backup info.\n     * @param backupDecryptor - The backup decryptor to use to decrypt the keys.\n     * @param opts - Options for the import.\n     *\n     * @returns The total number of keys and the total imported.\n     *\n     * @private\n     */\n    private async importKeyBackup(\n        keyBackup: KeyBackup,\n        backupVersion: string,\n        backupDecryptor: BackupDecryptor,\n        opts?: KeyBackupRestoreOpts,\n    ): Promise<KeyBackupRestoreResult> {\n        // We have a full backup here, it can get quite big, so we need to decrypt and import it in chunks.\n\n        const CHUNK_SIZE = 200;\n        // Get the total count as a first pass\n        const totalKeyCount = countKeysInBackup(keyBackup);\n        let totalImported = 0;\n        let totalFailures = 0;\n\n        /**\n         * This method is called when we have enough chunks to decrypt.\n         * It will decrypt the chunks and try to import the room keys.\n         * @param roomChunks\n         */\n        const handleChunkCallback = async (roomChunks: Map<string, KeyBackupRoomSessions>): Promise<void> => {\n            const currentChunk: IMegolmSessionData[] = [];\n            for (const roomId of roomChunks.keys()) {\n                // Decrypt the sessions for the given room\n                const decryptedSessions = await backupDecryptor.decryptSessions(roomChunks.get(roomId)!);\n                // Add the decrypted sessions to the current chunk\n                decryptedSessions.forEach((session) => {\n                    // We set the room_id for each session\n                    session.room_id = roomId;\n                    currentChunk.push(session);\n                });\n            }\n\n            // We have a chunk of decrypted keys: import them\n            try {\n                await this.importBackedUpRoomKeys(currentChunk, backupVersion);\n                totalImported += currentChunk.length;\n            } catch (e) {\n                totalFailures += currentChunk.length;\n                // We failed to import some keys, but we should still try to import the rest?\n                // Log the error and continue\n                logger.error(\"Error importing keys from backup\", e);\n            }\n\n            opts?.progressCallback?.({\n                total: totalKeyCount,\n                successes: totalImported,\n                stage: \"load_keys\",\n                failures: totalFailures,\n            });\n        };\n\n        let groupChunkCount = 0;\n        let chunkGroupByRoom: Map<string, KeyBackupRoomSessions> = new Map();\n\n        // Iterate over the rooms and sessions to group them in chunks\n        // And we call the handleChunkCallback when we have enough chunks to decrypt\n        for (const [roomId, roomData] of Object.entries(keyBackup.rooms)) {\n            // If there are no sessions for the room, skip it\n            if (!roomData.sessions) continue;\n\n            // Initialize a new chunk group for the current room\n            chunkGroupByRoom.set(roomId, {});\n\n            for (const [sessionId, session] of Object.entries(roomData.sessions)) {\n                // We set previously the chunk group for the current room, so we can safely get it\n                const sessionsForRoom = chunkGroupByRoom.get(roomId)!;\n                sessionsForRoom[sessionId] = session;\n                groupChunkCount += 1;\n                // If we have enough chunks to decrypt, call the block callback\n                if (groupChunkCount >= CHUNK_SIZE) {\n                    // We have enough chunks to decrypt\n                    await handleChunkCallback(chunkGroupByRoom);\n                    // Reset the chunk group\n                    chunkGroupByRoom = new Map();\n                    // There might be remaining keys for that room, so add back an entry for the current room.\n                    chunkGroupByRoom.set(roomId, {});\n                    groupChunkCount = 0;\n                }\n            }\n        }\n\n        // Handle remaining chunk if needed\n        if (groupChunkCount > 0) {\n            await handleChunkCallback(chunkGroupByRoom);\n        }\n\n        return { total: totalKeyCount, imported: totalImported };\n    }\n}\n\n/**\n * Checks if the provided backup info matches the given private key.\n *\n * @param info - The backup info to check.\n * @param backupDecryptionKey - The `BackupDecryptionKey` private key to check against.\n * @returns `true` if the private key can decrypt the backup, `false` otherwise.\n */\nfunction backupInfoMatchesBackupDecryptionKey(\n    info: KeyBackupInfo,\n    backupDecryptionKey: RustSdkCryptoJs.BackupDecryptionKey,\n): boolean {\n    if (info.algorithm !== \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n        logger.warn(\"backupMatchesPrivateKey: Unsupported backup algorithm\", info.algorithm);\n        return false;\n    }\n\n    return (info.auth_data as Curve25519AuthData)?.public_key === backupDecryptionKey.megolmV1PublicKey.publicKeyBase64;\n}\n\n/**\n * Implementation of {@link BackupDecryptor} for the rust crypto backend.\n */\nexport class RustBackupDecryptor implements BackupDecryptor {\n    private decryptionKey: RustSdkCryptoJs.BackupDecryptionKey;\n    public sourceTrusted: boolean;\n\n    public constructor(decryptionKey: RustSdkCryptoJs.BackupDecryptionKey) {\n        this.decryptionKey = decryptionKey;\n        this.sourceTrusted = false;\n    }\n\n    /**\n     * Implements {@link BackupDecryptor#decryptSessions}\n     */\n    public async decryptSessions(\n        ciphertexts: Record<string, KeyBackupSession<Curve25519SessionData | AESEncryptedSecretStoragePayload>>,\n    ): Promise<IMegolmSessionData[]> {\n        const keys: IMegolmSessionData[] = [];\n        for (const [sessionId, sessionData] of Object.entries(ciphertexts)) {\n            try {\n                const decrypted = JSON.parse(\n                    this.decryptionKey.decryptV1(\n                        sessionData.session_data.ephemeral,\n                        sessionData.session_data.mac,\n                        sessionData.session_data.ciphertext,\n                    ),\n                );\n                decrypted.session_id = sessionId;\n                keys.push(decrypted);\n            } catch (e) {\n                logger.log(\"Failed to decrypt megolm session from backup\", e, sessionData);\n            }\n        }\n        return keys;\n    }\n\n    /**\n     * Implements {@link BackupDecryptor#free}\n     */\n    public free(): void {\n        this.decryptionKey.free();\n    }\n}\n\n/**\n * Fetch a key backup info from the server.\n *\n * If `version` is provided, calls `GET /room_keys/version/$version` and gets the backup info for that version.\n * See https://spec.matrix.org/v1.12/client-server-api/#get_matrixclientv3room_keysversionversion.\n *\n * If not, calls `GET /room_keys/version` and gets the latest backup info.\n * See https://spec.matrix.org/v1.12/client-server-api/#get_matrixclientv3room_keysversion\n *\n * @param http\n * @param version - the specific version of the backup info to fetch\n * @returns The key backup info or null if there is no backup.\n */\nexport async function requestKeyBackupVersion(\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n    version?: string,\n): Promise<KeyBackupInfo | null> {\n    try {\n        const path = version ? encodeUri(\"/room_keys/version/$version\", { $version: version }) : \"/room_keys/version\";\n        return await http.authedRequest<KeyBackupInfo>(Method.Get, path, undefined, undefined, {\n            prefix: ClientPrefix.V3,\n        });\n    } catch (e) {\n        if ((<MatrixError>e).errcode === \"M_NOT_FOUND\") {\n            return null;\n        } else {\n            throw e;\n        }\n    }\n}\n\n/**\n * Checks if the provided decryption key matches the public key of the key backup info.\n *\n * @param decryptionKey - The decryption key to check.\n * @param keyBackupInfo - The key backup info to check against.\n * @returns `true` if the decryption key matches the key backup info, `false` otherwise.\n */\nexport function decryptionKeyMatchesKeyBackupInfo(\n    decryptionKey: RustSdkCryptoJs.BackupDecryptionKey,\n    keyBackupInfo: KeyBackupInfo,\n): boolean {\n    const authData = <Curve25519AuthData>keyBackupInfo.auth_data;\n    return authData.public_key === decryptionKey.megolmV1PublicKey.publicKeyBase64;\n}\n\n/**\n * Counts the total number of keys present in a key backup.\n * @param keyBackup - The key backup to count the keys from.\n * @returns The total number of keys in the backup.\n */\nfunction countKeysInBackup(keyBackup: KeyBackup): number {\n    let count = 0;\n    for (const { sessions } of Object.values(keyBackup.rooms)) {\n        count += Object.keys(sessions).length;\n    }\n    return count;\n}\n\nexport type RustBackupCryptoEvents =\n    | CryptoEvent.KeyBackupStatus\n    | CryptoEvent.KeyBackupSessionsRemaining\n    | CryptoEvent.KeyBackupFailed\n    | CryptoEvent.KeyBackupDecryptionKeyCached;\n\nexport type RustBackupCryptoEventMap = {\n    [CryptoEvent.KeyBackupStatus]: (enabled: boolean) => void;\n    [CryptoEvent.KeyBackupSessionsRemaining]: (remaining: number) => void;\n    [CryptoEvent.KeyBackupFailed]: (errCode: string) => void;\n    [CryptoEvent.KeyBackupDecryptionKeyCached]: (version: string) => void;\n};\n\n/**\n * Response from GET `/room_keys/keys` endpoint.\n * See https://spec.matrix.org/latest/client-server-api/#get_matrixclientv3room_keyskeys\n */\nexport interface KeyBackup {\n    rooms: Record<string, { sessions: KeyBackupRoomSessions }>;\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { OlmMachine } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { OutgoingRequest, OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { Logger } from \"../logger.ts\";\nimport { defer, IDeferred, logDuration } from \"../utils.ts\";\n\n/**\n * OutgoingRequestsManager: responsible for processing outgoing requests from the OlmMachine.\n * Ensure that only one loop is going on at once, and that the requests are processed in order.\n */\nexport class OutgoingRequestsManager {\n    /** whether {@link stop} has been called */\n    private stopped = false;\n\n    /** whether {@link outgoingRequestLoop} is currently running */\n    private outgoingRequestLoopRunning = false;\n\n    /**\n     * If there are additional calls to doProcessOutgoingRequests() while there is a current call running\n     * we need to remember in order to call `doProcessOutgoingRequests` again (as there could be new requests).\n     *\n     * If this is defined, it is an indication that we need to do another iteration; in this case the deferred\n     * will resolve once that next iteration completes. If it is undefined, there have been no new calls\n     * to `doProcessOutgoingRequests` since the current iteration started.\n     */\n    private nextLoopDeferred?: IDeferred<void>;\n\n    public constructor(\n        private readonly logger: Logger,\n        private readonly olmMachine: OlmMachine,\n        public readonly outgoingRequestProcessor: OutgoingRequestProcessor,\n    ) {}\n\n    /**\n     * Shut down as soon as possible the current loop of outgoing requests processing.\n     */\n    public stop(): void {\n        this.stopped = true;\n    }\n\n    /**\n     * Process the OutgoingRequests from the OlmMachine.\n     *\n     * This should be called at the end of each sync, to process any OlmMachine OutgoingRequests created by the rust sdk.\n     * In some cases if OutgoingRequests need to be sent immediately, this can be called directly.\n     *\n     * Calls to doProcessOutgoingRequests() are processed synchronously, one after the other, in order.\n     * If doProcessOutgoingRequests() is called while another call is still being processed, it will be queued.\n     * Multiple calls to doProcessOutgoingRequests() when a call is already processing will be batched together.\n     */\n    public doProcessOutgoingRequests(): Promise<void> {\n        // Flag that we need at least one more iteration of the loop.\n        //\n        // It is important that we do this even if the loop is currently running. There is potential for a race whereby\n        // a request is added to the queue *after* `OlmMachine.outgoingRequests` checks the queue, but *before* it\n        // returns. In such a case, the item could sit there unnoticed for some time.\n        //\n        // In order to circumvent the race, we set a flag which tells the loop to go round once again even if the\n        // queue appears to be empty.\n        if (!this.nextLoopDeferred) {\n            this.nextLoopDeferred = defer();\n        }\n\n        // ... and wait for it to complete.\n        const result = this.nextLoopDeferred.promise;\n\n        // set the loop going if it is not already.\n        if (!this.outgoingRequestLoopRunning) {\n            this.outgoingRequestLoop().catch((e) => {\n                // this should not happen; outgoingRequestLoop should return any errors via `nextLoopDeferred`.\n                /* istanbul ignore next */\n                this.logger.error(\"Uncaught error in outgoing request loop\", e);\n            });\n        }\n        return result;\n    }\n\n    private async outgoingRequestLoop(): Promise<void> {\n        /* istanbul ignore if */\n        if (this.outgoingRequestLoopRunning) {\n            throw new Error(\"Cannot run two outgoing request loops\");\n        }\n        this.outgoingRequestLoopRunning = true;\n        try {\n            while (!this.stopped && this.nextLoopDeferred) {\n                const deferred = this.nextLoopDeferred;\n\n                // reset `nextLoopDeferred` so that any future calls to `doProcessOutgoingRequests` are queued\n                // for another additional iteration.\n                this.nextLoopDeferred = undefined;\n\n                // make the requests and feed the results back to the `nextLoopDeferred`\n                await this.processOutgoingRequests().then(deferred.resolve, deferred.reject);\n            }\n        } finally {\n            this.outgoingRequestLoopRunning = false;\n        }\n\n        if (this.nextLoopDeferred) {\n            // the loop was stopped, but there was a call to `doProcessOutgoingRequests`. Make sure that\n            // we reject the promise in case anything is waiting for it.\n            this.nextLoopDeferred.reject(new Error(\"OutgoingRequestsManager was stopped\"));\n        }\n    }\n\n    /**\n     * Make a single request to `olmMachine.outgoingRequests` and do the corresponding requests.\n     */\n    private async processOutgoingRequests(): Promise<void> {\n        if (this.stopped) return;\n\n        const outgoingRequests: OutgoingRequest[] = await this.olmMachine.outgoingRequests();\n\n        for (const request of outgoingRequests) {\n            if (this.stopped) return;\n            try {\n                await logDuration(this.logger, `Make outgoing request ${request.type}`, async () => {\n                    await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n                });\n            } catch (e) {\n                // as part of the loop we silently ignore errors, but log them.\n                // The rust sdk will retry the request later as it won't have been marked as sent.\n                this.logger.error(`Failed to process outgoing request ${request.type}: ${e}`);\n            }\n        }\n    }\n}\n","/*\nCopyright 2023 - 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { OlmMachine } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { Curve25519AuthData, KeyBackupInfo, KeyBackupSession } from \"../crypto-api/keybackup.ts\";\nimport { CryptoEvent } from \"../crypto-api/index.ts\";\nimport { Logger } from \"../logger.ts\";\nimport { ClientPrefix, IHttpOpts, MatrixError, MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { RustBackupManager } from \"./backup.ts\";\nimport { encodeUri, sleep } from \"../utils.ts\";\nimport { BackupDecryptor } from \"../common-crypto/CryptoBackend.ts\";\n\n// The minimum time to wait between two retries in case of errors. To avoid hammering the server.\nconst KEY_BACKUP_BACKOFF = 5000; // ms\n\n/**\n * Enumerates the different kind of errors that can occurs when downloading and importing a key from backup.\n */\nenum KeyDownloadErrorCode {\n    /** The requested key is not in the backup. */\n    MISSING_DECRYPTION_KEY = \"MISSING_DECRYPTION_KEY\",\n    /** A network error occurred while trying to download the key from backup. */\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n    /** The loop has been stopped. */\n    STOPPED = \"STOPPED\",\n}\n\nclass KeyDownloadError extends Error {\n    public constructor(public readonly code: KeyDownloadErrorCode) {\n        super(`Failed to get key from backup: ${code}`);\n        this.name = \"KeyDownloadError\";\n    }\n}\n\nclass KeyDownloadRateLimitError extends Error {\n    public constructor(public readonly retryMillis: number) {\n        super(`Failed to get key from backup: rate limited`);\n        this.name = \"KeyDownloadRateLimitError\";\n    }\n}\n\n/** Details of a megolm session whose key we are trying to fetch. */\ntype SessionInfo = { roomId: string; megolmSessionId: string };\n\n/** Holds the current backup decryptor and version that should be used.\n *\n * This is intended to be used as an immutable object (a new instance should be created if the configuration changes),\n * and some of the logic relies on that, so the properties are marked as `readonly`.\n */\ntype Configuration = {\n    readonly backupVersion: string;\n    readonly decryptor: BackupDecryptor;\n};\n\n/**\n * Used when an 'unable to decrypt' error occurs. It attempts to download the key from the backup.\n *\n * The current backup API lacks pagination, which can lead to lengthy key retrieval times for large histories (several 10s of minutes).\n * To mitigate this, keys are downloaded on demand as decryption errors occurs.\n * While this approach may result in numerous requests, it improves user experience by reducing wait times for message decryption.\n *\n * The PerSessionKeyBackupDownloader is resistant to backup configuration changes: it will automatically resume querying when\n * the backup is configured correctly.\n */\nexport class PerSessionKeyBackupDownloader {\n    private stopped = false;\n\n    /**\n     * The version and decryption key to use with current backup if all set up correctly.\n     *\n     * Will not be set unless `hasConfigurationProblem` is `false`.\n     */\n    private configuration: Configuration | null = null;\n\n    /** We remember when a session was requested and not found in backup to avoid query again too soon.\n     * Map of session_id to timestamp */\n    private sessionLastCheckAttemptedTime: Map<string, number> = new Map();\n\n    /** The logger to use */\n    private readonly logger: Logger;\n\n    /** Whether the download loop is running. */\n    private downloadLoopRunning = false;\n\n    /** The list of requests that are queued. */\n    private queuedRequests: SessionInfo[] = [];\n\n    /** Remembers if we have a configuration problem. */\n    private hasConfigurationProblem = false;\n\n    /** The current server backup version check promise. To avoid doing a server call if one is in flight. */\n    private currentBackupVersionCheck: Promise<Configuration | null> | null = null;\n\n    /**\n     * Creates a new instance of PerSessionKeyBackupDownloader.\n     *\n     * @param backupManager - The backup manager to use.\n     * @param olmMachine - The olm machine to use.\n     * @param http - The http instance to use.\n     * @param logger - The logger to use.\n     */\n    public constructor(\n        logger: Logger,\n        private readonly olmMachine: OlmMachine,\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n        private readonly backupManager: RustBackupManager,\n    ) {\n        this.logger = logger.getChild(\"[PerSessionKeyBackupDownloader]\");\n\n        backupManager.on(CryptoEvent.KeyBackupStatus, this.onBackupStatusChanged);\n        backupManager.on(CryptoEvent.KeyBackupFailed, this.onBackupStatusChanged);\n        backupManager.on(CryptoEvent.KeyBackupDecryptionKeyCached, this.onBackupStatusChanged);\n    }\n\n    /**\n     * Check if key download is successfully configured and active.\n     *\n     * @return `true` if key download is correctly configured and active; otherwise `false`.\n     */\n    public isKeyBackupDownloadConfigured(): boolean {\n        return this.configuration !== null;\n    }\n\n    /**\n     * Return the details of the latest backup on the server, when we last checked.\n     *\n     * This is just a convenience method to expose {@link RustBackupManager.getServerBackupInfo}.\n     */\n    public async getServerBackupInfo(): Promise<KeyBackupInfo | null | undefined> {\n        return await this.backupManager.getServerBackupInfo();\n    }\n\n    /**\n     * Called when a MissingRoomKey or UnknownMessageIndex decryption error is encountered.\n     *\n     * This will try to download the key from the backup if there is a trusted active backup.\n     * In case of success the key will be imported and the onRoomKeysUpdated callback will be called\n     * internally by the rust-sdk and decryption will be retried.\n     *\n     * @param roomId - The room ID of the room where the error occurred.\n     * @param megolmSessionId - The megolm session ID that is missing.\n     */\n    public onDecryptionKeyMissingError(roomId: string, megolmSessionId: string): void {\n        // Several messages encrypted with the same session may be decrypted at the same time,\n        // so we need to be resistant and not query several time the same session.\n        if (this.isAlreadyInQueue(roomId, megolmSessionId)) {\n            // There is already a request queued for this session, no need to queue another one.\n            this.logger.trace(`Not checking key backup for session ${megolmSessionId} as it is already queued`);\n            return;\n        }\n\n        if (this.wasRequestedRecently(megolmSessionId)) {\n            // We already tried to download this session recently and it was not in backup, no need to try again.\n            this.logger.trace(\n                `Not checking key backup for session ${megolmSessionId} as it was already requested recently`,\n            );\n            return;\n        }\n\n        // We always add the request to the queue, even if we have a configuration problem (can't access backup).\n        // This is to make sure that if the configuration problem is resolved, we will try to download the key.\n        // This will happen after an initial sync, at this point the backup will not yet be trusted and the decryption\n        // key will not be available, but it will be just after the verification.\n        // We don't need to persist it because currently on refresh the sdk will retry to decrypt the messages in error.\n        this.queuedRequests.push({ roomId, megolmSessionId });\n\n        // Start the download loop if it's not already running.\n        this.downloadKeysLoop();\n    }\n\n    public stop(): void {\n        this.stopped = true;\n        this.backupManager.off(CryptoEvent.KeyBackupStatus, this.onBackupStatusChanged);\n        this.backupManager.off(CryptoEvent.KeyBackupFailed, this.onBackupStatusChanged);\n        this.backupManager.off(CryptoEvent.KeyBackupDecryptionKeyCached, this.onBackupStatusChanged);\n    }\n\n    /**\n     * Called when the backup status changes (CryptoEvents)\n     * This will trigger a check of the backup configuration.\n     */\n    private onBackupStatusChanged = (): void => {\n        // we want to force check configuration, so we clear the current one.\n        this.hasConfigurationProblem = false;\n        this.configuration = null;\n        this.getOrCreateBackupConfiguration().then((configuration) => {\n            if (configuration) {\n                // restart the download loop if it was stopped\n                this.downloadKeysLoop();\n            }\n        });\n    };\n\n    /** Returns true if the megolm session is already queued for download. */\n    private isAlreadyInQueue(roomId: string, megolmSessionId: string): boolean {\n        return this.queuedRequests.some((info) => {\n            return info.roomId == roomId && info.megolmSessionId == megolmSessionId;\n        });\n    }\n\n    /**\n     * Marks the session as not found in backup, to avoid retrying to soon for a key not in backup\n     *\n     * @param megolmSessionId - The megolm session ID that is missing.\n     */\n    private markAsNotFoundInBackup(megolmSessionId: string): void {\n        const now = Date.now();\n        this.sessionLastCheckAttemptedTime.set(megolmSessionId, now);\n        // if too big make some cleaning to keep under control\n        if (this.sessionLastCheckAttemptedTime.size > 100) {\n            this.sessionLastCheckAttemptedTime = new Map(\n                Array.from(this.sessionLastCheckAttemptedTime).filter((sid, ts) => {\n                    return Math.max(now - ts, 0) < KEY_BACKUP_BACKOFF;\n                }),\n            );\n        }\n    }\n\n    /** Returns true if the session was requested recently. */\n    private wasRequestedRecently(megolmSessionId: string): boolean {\n        const lastCheck = this.sessionLastCheckAttemptedTime.get(megolmSessionId);\n        if (!lastCheck) return false;\n        return Math.max(Date.now() - lastCheck, 0) < KEY_BACKUP_BACKOFF;\n    }\n\n    private async getBackupDecryptionKey(): Promise<RustSdkCryptoJs.BackupKeys | null> {\n        try {\n            return await this.olmMachine.getBackupKeys();\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Requests a key from the server side backup.\n     *\n     * @param version - The backup version to use.\n     * @param roomId - The room ID of the room where the error occurred.\n     * @param sessionId - The megolm session ID that is missing.\n     */\n    private async requestRoomKeyFromBackup(\n        version: string,\n        roomId: string,\n        sessionId: string,\n    ): Promise<KeyBackupSession> {\n        const path = encodeUri(\"/room_keys/keys/$roomId/$sessionId\", {\n            $roomId: roomId,\n            $sessionId: sessionId,\n        });\n\n        return await this.http.authedRequest<KeyBackupSession>(Method.Get, path, { version }, undefined, {\n            prefix: ClientPrefix.V3,\n        });\n    }\n\n    private async downloadKeysLoop(): Promise<void> {\n        if (this.downloadLoopRunning) return;\n\n        // If we have a configuration problem, we don't want to try to download.\n        // If any configuration change is detected, we will retry and restart the loop.\n        if (this.hasConfigurationProblem) return;\n\n        this.downloadLoopRunning = true;\n\n        try {\n            while (this.queuedRequests.length > 0) {\n                // we just peek the first one without removing it, so if a new request for same key comes in while we're\n                // processing this one, it won't queue another request.\n                const request = this.queuedRequests[0];\n                try {\n                    // The backup could have changed between the time we queued the request and now, so we need to check\n                    const configuration = await this.getOrCreateBackupConfiguration();\n                    if (!configuration) {\n                        // Backup is not configured correctly, so stop the loop.\n                        this.downloadLoopRunning = false;\n                        return;\n                    }\n\n                    const result = await this.queryKeyBackup(request.roomId, request.megolmSessionId, configuration);\n\n                    if (this.stopped) {\n                        return;\n                    }\n                    // We got the encrypted key from backup, let's try to decrypt and import it.\n                    try {\n                        await this.decryptAndImport(request, result, configuration);\n                    } catch (e) {\n                        this.logger.error(\n                            `Error while decrypting and importing key backup for session ${request.megolmSessionId}`,\n                            e,\n                        );\n                    }\n                    // now remove the request from the queue as we've processed it.\n                    this.queuedRequests.shift();\n                } catch (err) {\n                    if (err instanceof KeyDownloadError) {\n                        switch (err.code) {\n                            case KeyDownloadErrorCode.MISSING_DECRYPTION_KEY:\n                                this.markAsNotFoundInBackup(request.megolmSessionId);\n                                // continue for next one\n                                this.queuedRequests.shift();\n                                break;\n                            case KeyDownloadErrorCode.NETWORK_ERROR:\n                                // We don't want to hammer if there is a problem, so wait a bit.\n                                await sleep(KEY_BACKUP_BACKOFF);\n                                break;\n                            case KeyDownloadErrorCode.STOPPED:\n                                // If the downloader was stopped, we don't want to retry.\n                                this.downloadLoopRunning = false;\n                                return;\n                        }\n                    } else if (err instanceof KeyDownloadRateLimitError) {\n                        // we want to retry after the backoff time\n                        await sleep(err.retryMillis);\n                    }\n                }\n            }\n        } finally {\n            // all pending request have been processed, we can stop the loop.\n            this.downloadLoopRunning = false;\n        }\n    }\n\n    /**\n     * Query the backup for a key.\n     *\n     * @param targetRoomId - ID of the room that the session is used in.\n     * @param targetSessionId - ID of the session for which to check backup.\n     * @param configuration - The backup configuration to use.\n     */\n    private async queryKeyBackup(\n        targetRoomId: string,\n        targetSessionId: string,\n        configuration: Configuration,\n    ): Promise<KeyBackupSession> {\n        this.logger.debug(`Checking key backup for session ${targetSessionId}`);\n        if (this.stopped) throw new KeyDownloadError(KeyDownloadErrorCode.STOPPED);\n        try {\n            const res = await this.requestRoomKeyFromBackup(configuration.backupVersion, targetRoomId, targetSessionId);\n            this.logger.debug(`Got key from backup for sessionId:${targetSessionId}`);\n            return res;\n        } catch (e) {\n            if (this.stopped) throw new KeyDownloadError(KeyDownloadErrorCode.STOPPED);\n\n            this.logger.info(`No luck requesting key backup for session ${targetSessionId}: ${e}`);\n            if (e instanceof MatrixError) {\n                const errCode = e.data.errcode;\n                if (errCode == \"M_NOT_FOUND\") {\n                    // Unfortunately the spec doesn't give us a way to differentiate between a missing key and a wrong version.\n                    // Synapse will return:\n                    //     - \"error\": \"Unknown backup version\" if the version is wrong.\n                    //     - \"error\": \"No room_keys found\" if the key is missing.\n                    // It's useful to know if the key is missing or if the version is wrong.\n                    // As it's not spec'ed, we fall back on considering the key is not in backup.\n                    // Notice that this request will be lost if instead the backup got out of sync (updated from other session).\n                    throw new KeyDownloadError(KeyDownloadErrorCode.MISSING_DECRYPTION_KEY);\n                }\n                if (e.isRateLimitError()) {\n                    let waitTime: number | undefined;\n                    try {\n                        waitTime = e.getRetryAfterMs() ?? undefined;\n                    } catch (error) {\n                        this.logger.warn(\"Error while retrieving a rate-limit retry delay\", error);\n                    }\n                    if (waitTime && waitTime > 0) {\n                        this.logger.info(`Rate limited by server, waiting ${waitTime}ms`);\n                    }\n                    throw new KeyDownloadRateLimitError(waitTime ?? KEY_BACKUP_BACKOFF);\n                }\n            }\n            throw new KeyDownloadError(KeyDownloadErrorCode.NETWORK_ERROR);\n        }\n    }\n\n    private async decryptAndImport(\n        sessionInfo: SessionInfo,\n        data: KeyBackupSession,\n        configuration: Configuration,\n    ): Promise<void> {\n        const sessionsToImport: Record<string, KeyBackupSession> = { [sessionInfo.megolmSessionId]: data };\n\n        const keys = await configuration!.decryptor.decryptSessions(sessionsToImport);\n        for (const k of keys) {\n            k.room_id = sessionInfo.roomId;\n        }\n        await this.backupManager.importBackedUpRoomKeys(keys, configuration.backupVersion);\n    }\n\n    /**\n     * Gets the current backup configuration or create one if it doesn't exist.\n     *\n     * When a valid configuration is found it is cached and returned for subsequent calls.\n     * Otherwise, if a check is forced or a check has not yet been done, a new check is done.\n     *\n     * @returns The backup configuration to use or null if there is a configuration problem.\n     */\n    private async getOrCreateBackupConfiguration(): Promise<Configuration | null> {\n        if (this.configuration) {\n            return this.configuration;\n        }\n\n        // We already tried to check the configuration and it failed.\n        // We don't want to try again immediately, we will retry if a configuration change is detected.\n        if (this.hasConfigurationProblem) {\n            return null;\n        }\n\n        // This method can be called rapidly by several emitted CryptoEvent, so we need to make sure that we don't\n        // query the server several times.\n        if (this.currentBackupVersionCheck != null) {\n            this.logger.debug(`Already checking server version, use current promise`);\n            return await this.currentBackupVersionCheck;\n        }\n\n        this.currentBackupVersionCheck = this.internalCheckFromServer();\n        try {\n            return await this.currentBackupVersionCheck;\n        } finally {\n            this.currentBackupVersionCheck = null;\n        }\n    }\n\n    private async internalCheckFromServer(): Promise<Configuration | null> {\n        let currentServerVersion = null;\n        try {\n            currentServerVersion = await this.backupManager.getServerBackupInfo();\n        } catch (e) {\n            this.logger.debug(`Backup: error while checking server version: ${e}`);\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n        this.logger.debug(`Got current backup version from server: ${currentServerVersion?.version}`);\n\n        if (currentServerVersion?.algorithm != \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n            this.logger.info(`Unsupported algorithm ${currentServerVersion?.algorithm}`);\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        if (!currentServerVersion?.version) {\n            this.logger.info(`No current key backup`);\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        const activeVersion = await this.backupManager.getActiveBackupVersion();\n        if (activeVersion == null || currentServerVersion.version != activeVersion) {\n            // Either the current backup version on server side is not trusted, or it is out of sync with the active version on the client side.\n            this.logger.info(\n                `The current backup version on the server (${currentServerVersion.version}) is not trusted. Version we are currently backing up to: ${activeVersion}`,\n            );\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        const backupKeys = await this.getBackupDecryptionKey();\n        if (!backupKeys?.decryptionKey) {\n            this.logger.debug(`Not checking key backup for session (no decryption key)`);\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        if (activeVersion != backupKeys.backupVersion) {\n            this.logger.debug(\n                `Version for which we have a decryption key (${backupKeys.backupVersion}) doesn't match the version we are backing up to (${activeVersion})`,\n            );\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        const authData = currentServerVersion.auth_data as Curve25519AuthData;\n        if (authData.public_key != backupKeys.decryptionKey.megolmV1PublicKey.publicKeyBase64) {\n            this.logger.debug(`Key backup on server does not match our decryption key`);\n            this.hasConfigurationProblem = true;\n            return null;\n        }\n\n        const backupDecryptor = this.backupManager.createBackupDecryptor(backupKeys.decryptionKey);\n        this.hasConfigurationProblem = false;\n        this.configuration = {\n            decryptor: backupDecryptor,\n            backupVersion: activeVersion,\n        };\n        return this.configuration;\n    }\n}\n","/*\nCopyright 2022-2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport anotherjson from \"another-json\";\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport type { IEventDecryptionResult, IMegolmSessionData } from \"../@types/crypto.ts\";\nimport { KnownMembership } from \"../@types/membership.ts\";\nimport type { IDeviceLists, IToDeviceEvent } from \"../sync-accumulator.ts\";\nimport type { IEncryptedEventInfo } from \"../crypto/api.ts\";\nimport type { ToDevicePayload, ToDeviceBatch } from \"../models/ToDeviceMessage.ts\";\nimport { MatrixEvent, MatrixEventEvent } from \"../models/event.ts\";\nimport { Room } from \"../models/room.ts\";\nimport { RoomMember } from \"../models/room-member.ts\";\nimport {\n    BackupDecryptor,\n    CryptoBackend,\n    DecryptionError,\n    OnSyncCompletedData,\n} from \"../common-crypto/CryptoBackend.ts\";\nimport { logger, Logger, LogSpan } from \"../logger.ts\";\nimport { IHttpOpts, MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { RoomEncryptor } from \"./RoomEncryptor.ts\";\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { KeyClaimManager } from \"./KeyClaimManager.ts\";\nimport { logDuration, MapWithDefault } from \"../utils.ts\";\nimport {\n    BackupTrustInfo,\n    BootstrapCrossSigningOpts,\n    CreateSecretStorageOpts,\n    CrossSigningKey,\n    CrossSigningKeyInfo,\n    CrossSigningStatus,\n    CryptoApi,\n    CryptoCallbacks,\n    DecryptionFailureCode,\n    DeviceVerificationStatus,\n    EventEncryptionInfo,\n    EventShieldColour,\n    EventShieldReason,\n    GeneratedSecretStorageKey,\n    ImportRoomKeysOpts,\n    KeyBackupCheck,\n    KeyBackupInfo,\n    OwnDeviceKeys,\n    UserVerificationStatus,\n    VerificationRequest,\n    encodeRecoveryKey,\n    deriveRecoveryKeyFromPassphrase,\n    DeviceIsolationMode,\n    AllDevicesIsolationMode,\n    DeviceIsolationModeKind,\n    CryptoEvent,\n    CryptoEventHandlerMap,\n    KeyBackupRestoreOpts,\n    KeyBackupRestoreResult,\n    StartDehydrationOpts,\n} from \"../crypto-api/index.ts\";\nimport { deviceKeysToDeviceMap, rustDeviceToJsDevice } from \"./device-converter.ts\";\nimport { IDownloadKeyResult, IQueryKeysRequest } from \"../client.ts\";\nimport { Device, DeviceMap } from \"../models/device.ts\";\nimport { SECRET_STORAGE_ALGORITHM_V1_AES, SecretStorageKey, ServerSideSecretStorage } from \"../secret-storage.ts\";\nimport { CrossSigningIdentity } from \"./CrossSigningIdentity.ts\";\nimport { secretStorageCanAccessSecrets, secretStorageContainsCrossSigningKeys } from \"./secret-storage.ts\";\nimport { isVerificationEvent, RustVerificationRequest, verificationMethodIdentifierToMethod } from \"./verification.ts\";\nimport { EventType, MsgType } from \"../@types/event.ts\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\nimport { decryptionKeyMatchesKeyBackupInfo, RustBackupManager } from \"./backup.ts\";\nimport { TypedReEmitter } from \"../ReEmitter.ts\";\nimport { secureRandomString } from \"../randomstring.ts\";\nimport { ClientStoppedError } from \"../errors.ts\";\nimport { ISignatures } from \"../@types/signed.ts\";\nimport { decodeBase64, encodeBase64 } from \"../base64.ts\";\nimport { OutgoingRequestsManager } from \"./OutgoingRequestsManager.ts\";\nimport { PerSessionKeyBackupDownloader } from \"./PerSessionKeyBackupDownloader.ts\";\nimport { DehydratedDeviceManager } from \"./DehydratedDeviceManager.ts\";\nimport { VerificationMethod } from \"../types.ts\";\nimport { keyFromAuthData } from \"../common-crypto/key-passphrase.ts\";\nimport { UIAuthCallback } from \"../interactive-auth.ts\";\n\nconst ALL_VERIFICATION_METHODS = [\n    VerificationMethod.Sas,\n    VerificationMethod.ScanQrCode,\n    VerificationMethod.ShowQrCode,\n    VerificationMethod.Reciprocate,\n];\n\ninterface ISignableObject {\n    signatures?: ISignatures;\n    unsigned?: object;\n}\n\n/**\n * An implementation of {@link CryptoBackend} using the Rust matrix-sdk-crypto.\n *\n * @internal\n */\nexport class RustCrypto extends TypedEventEmitter<RustCryptoEvents, CryptoEventHandlerMap> implements CryptoBackend {\n    /**\n     * The number of iterations to use when deriving a recovery key from a passphrase.\n     */\n    private readonly RECOVERY_KEY_DERIVATION_ITERATIONS = 500000;\n\n    private _trustCrossSignedDevices = true;\n    private deviceIsolationMode: DeviceIsolationMode = new AllDevicesIsolationMode(false);\n\n    /** whether {@link stop} has been called */\n    private stopped = false;\n\n    /** mapping of roomId → encryptor class */\n    private roomEncryptors: Record<string, RoomEncryptor> = {};\n\n    private eventDecryptor: EventDecryptor;\n    private keyClaimManager: KeyClaimManager;\n    private outgoingRequestProcessor: OutgoingRequestProcessor;\n    private crossSigningIdentity: CrossSigningIdentity;\n    private readonly backupManager: RustBackupManager;\n    private outgoingRequestsManager: OutgoingRequestsManager;\n    private readonly perSessionBackupDownloader: PerSessionKeyBackupDownloader;\n    private readonly dehydratedDeviceManager: DehydratedDeviceManager;\n    private readonly reemitter = new TypedReEmitter<RustCryptoEvents, CryptoEventHandlerMap>(this);\n\n    public constructor(\n        private readonly logger: Logger,\n\n        /** The `OlmMachine` from the underlying rust crypto sdk. */\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n\n        /**\n         * Low-level HTTP interface: used to make outgoing requests required by the rust SDK.\n         *\n         * We expect it to set the access token, etc.\n         */\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n\n        /** The local user's User ID. */\n        private readonly userId: string,\n\n        /** The local user's Device ID. */\n        _deviceId: string,\n\n        /** Interface to server-side secret storage */\n        private readonly secretStorage: ServerSideSecretStorage,\n\n        /** Crypto callbacks provided by the application */\n        private readonly cryptoCallbacks: CryptoCallbacks,\n    ) {\n        super();\n        this.outgoingRequestProcessor = new OutgoingRequestProcessor(olmMachine, http);\n        this.outgoingRequestsManager = new OutgoingRequestsManager(\n            this.logger,\n            olmMachine,\n            this.outgoingRequestProcessor,\n        );\n\n        this.keyClaimManager = new KeyClaimManager(olmMachine, this.outgoingRequestProcessor);\n\n        this.backupManager = new RustBackupManager(olmMachine, http, this.outgoingRequestProcessor);\n        this.perSessionBackupDownloader = new PerSessionKeyBackupDownloader(\n            this.logger,\n            this.olmMachine,\n            this.http,\n            this.backupManager,\n        );\n        this.dehydratedDeviceManager = new DehydratedDeviceManager(\n            this.logger,\n            olmMachine,\n            http,\n            this.outgoingRequestProcessor,\n            secretStorage,\n        );\n        this.eventDecryptor = new EventDecryptor(this.logger, olmMachine, this.perSessionBackupDownloader);\n\n        // re-emit the events emitted by managers\n        this.reemitter.reEmit(this.backupManager, [\n            CryptoEvent.KeyBackupStatus,\n            CryptoEvent.KeyBackupSessionsRemaining,\n            CryptoEvent.KeyBackupFailed,\n            CryptoEvent.KeyBackupDecryptionKeyCached,\n        ]);\n        this.reemitter.reEmit(this.dehydratedDeviceManager, [\n            CryptoEvent.DehydratedDeviceCreated,\n            CryptoEvent.DehydratedDeviceUploaded,\n            CryptoEvent.RehydrationStarted,\n            CryptoEvent.RehydrationProgress,\n            CryptoEvent.RehydrationCompleted,\n            CryptoEvent.RehydrationError,\n            CryptoEvent.DehydrationKeyCached,\n            CryptoEvent.DehydratedDeviceRotationError,\n        ]);\n\n        this.crossSigningIdentity = new CrossSigningIdentity(olmMachine, this.outgoingRequestProcessor, secretStorage);\n\n        // Check and start in background the key backup connection\n        this.checkKeyBackupAndEnable();\n    }\n\n    /**\n     * Return the OlmMachine only if {@link RustCrypto#stop} has not been called.\n     *\n     * This allows us to better handle race conditions where the client is stopped before or during a crypto API call.\n     *\n     * @throws ClientStoppedError if {@link RustCrypto#stop} has been called.\n     */\n    private getOlmMachineOrThrow(): RustSdkCryptoJs.OlmMachine {\n        if (this.stopped) {\n            throw new ClientStoppedError();\n        }\n        return this.olmMachine;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // CryptoBackend implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    public set globalErrorOnUnknownDevices(_v: boolean) {\n        // Not implemented for rust crypto.\n    }\n\n    public get globalErrorOnUnknownDevices(): boolean {\n        // Not implemented for rust crypto.\n        return false;\n    }\n\n    public stop(): void {\n        // stop() may be called multiple times, but attempting to close() the OlmMachine twice\n        // will cause an error.\n        if (this.stopped) {\n            return;\n        }\n        this.stopped = true;\n\n        this.keyClaimManager.stop();\n        this.backupManager.stop();\n        this.outgoingRequestsManager.stop();\n        this.perSessionBackupDownloader.stop();\n        this.dehydratedDeviceManager.stop();\n\n        // make sure we close() the OlmMachine; doing so means that all the Rust objects will be\n        // cleaned up; in particular, the indexeddb connections will be closed, which means they\n        // can then be deleted.\n        this.olmMachine.close();\n    }\n\n    public async encryptEvent(event: MatrixEvent, _room: Room): Promise<void> {\n        const roomId = event.getRoomId()!;\n        const encryptor = this.roomEncryptors[roomId];\n\n        if (!encryptor) {\n            throw new Error(`Cannot encrypt event in unconfigured room ${roomId}`);\n        }\n\n        await encryptor.encryptEvent(event, this.globalBlacklistUnverifiedDevices, this.deviceIsolationMode);\n    }\n\n    public async decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult> {\n        const roomId = event.getRoomId();\n        if (!roomId) {\n            // presumably, a to-device message. These are normally decrypted in preprocessToDeviceMessages\n            // so the fact it has come back here suggests that decryption failed.\n            //\n            // once we drop support for the libolm crypto implementation, we can stop passing to-device messages\n            // through decryptEvent and hence get rid of this case.\n            throw new Error(\"to-device event was not decrypted in preprocessToDeviceMessages\");\n        }\n        return await this.eventDecryptor.attemptEventDecryption(event, this.deviceIsolationMode);\n    }\n\n    /**\n     * Implementation of (deprecated) {@link MatrixClient#getEventEncryptionInfo}.\n     *\n     * @param event - event to inspect\n     */\n    public getEventEncryptionInfo(event: MatrixEvent): IEncryptedEventInfo {\n        const ret: Partial<IEncryptedEventInfo> = {};\n\n        ret.senderKey = event.getSenderKey() ?? undefined;\n        ret.algorithm = event.getWireContent().algorithm;\n\n        if (!ret.senderKey || !ret.algorithm) {\n            ret.encrypted = false;\n            return ret as IEncryptedEventInfo;\n        }\n        ret.encrypted = true;\n        ret.authenticated = true;\n        ret.mismatchedSender = true;\n        return ret as IEncryptedEventInfo;\n    }\n\n    /**\n     * Implementation of {@link CryptoBackend#checkUserTrust}.\n     *\n     * Stub for backwards compatibility.\n     *\n     */\n    public checkUserTrust(userId: string): UserVerificationStatus {\n        return new UserVerificationStatus(false, false, false);\n    }\n\n    /**\n     * Get the cross signing information for a given user.\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @param userId - the user ID to get the cross-signing info for.\n     *\n     * @returns the cross signing information for the user.\n     */\n    public getStoredCrossSigningForUser(userId: string): null {\n        // TODO\n        return null;\n    }\n\n    /**\n     * This function is unneeded for the rust-crypto.\n     * The cross signing key import and the device verification are done in {@link CryptoApi#bootstrapCrossSigning}\n     *\n     * The function is stub to keep the compatibility with the old crypto.\n     * More information: https://github.com/vector-im/element-web/issues/25648\n     *\n     * Implementation of {@link CryptoBackend#checkOwnCrossSigningTrust}\n     */\n    public async checkOwnCrossSigningTrust(): Promise<void> {\n        return;\n    }\n\n    /**\n     * Implementation of {@link CryptoBackend#getBackupDecryptor}.\n     */\n    public async getBackupDecryptor(backupInfo: KeyBackupInfo, privKey: Uint8Array): Promise<BackupDecryptor> {\n        if (!(privKey instanceof Uint8Array)) {\n            throw new Error(`getBackupDecryptor: expects Uint8Array`);\n        }\n\n        if (backupInfo.algorithm != \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n            throw new Error(`getBackupDecryptor: Unsupported algorithm ${backupInfo.algorithm}`);\n        }\n\n        const backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(encodeBase64(privKey));\n        if (!decryptionKeyMatchesKeyBackupInfo(backupDecryptionKey, backupInfo)) {\n            throw new Error(`getBackupDecryptor: key backup on server does not match the decryption key`);\n        }\n\n        return this.backupManager.createBackupDecryptor(backupDecryptionKey);\n    }\n\n    /**\n     * Implementation of {@link CryptoBackend#importBackedUpRoomKeys}.\n     */\n    public async importBackedUpRoomKeys(\n        keys: IMegolmSessionData[],\n        backupVersion: string,\n        opts?: ImportRoomKeysOpts,\n    ): Promise<void> {\n        return await this.backupManager.importBackedUpRoomKeys(keys, backupVersion, opts);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // CryptoApi implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    public globalBlacklistUnverifiedDevices = false;\n\n    /**\n     * Implementation of {@link CryptoApi#getVersion}.\n     */\n    public getVersion(): string {\n        const versions = RustSdkCryptoJs.getVersions();\n        return `Rust SDK ${versions.matrix_sdk_crypto} (${versions.git_sha}), Vodozemac ${versions.vodozemac}`;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#setDeviceIsolationMode}.\n     */\n    public setDeviceIsolationMode(isolationMode: DeviceIsolationMode): void {\n        this.deviceIsolationMode = isolationMode;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isEncryptionEnabledInRoom}.\n     */\n    public async isEncryptionEnabledInRoom(roomId: string): Promise<boolean> {\n        const roomSettings: RustSdkCryptoJs.RoomSettings | undefined = await this.olmMachine.getRoomSettings(\n            new RustSdkCryptoJs.RoomId(roomId),\n        );\n        return Boolean(roomSettings?.algorithm);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getOwnDeviceKeys}.\n     */\n    public async getOwnDeviceKeys(): Promise<OwnDeviceKeys> {\n        const keys = this.olmMachine.identityKeys;\n        return { ed25519: keys.ed25519.toBase64(), curve25519: keys.curve25519.toBase64() };\n    }\n\n    public prepareToEncrypt(room: Room): void {\n        const encryptor = this.roomEncryptors[room.roomId];\n\n        if (encryptor) {\n            encryptor.prepareForEncryption(this.globalBlacklistUnverifiedDevices, this.deviceIsolationMode);\n        }\n    }\n\n    public forceDiscardSession(roomId: string): Promise<void> {\n        return this.roomEncryptors[roomId]?.forceDiscardSession();\n    }\n\n    public async exportRoomKeys(): Promise<IMegolmSessionData[]> {\n        const raw = await this.olmMachine.exportRoomKeys(() => true);\n        return JSON.parse(raw);\n    }\n\n    public async exportRoomKeysAsJson(): Promise<string> {\n        return await this.olmMachine.exportRoomKeys(() => true);\n    }\n\n    public async importRoomKeys(keys: IMegolmSessionData[], opts?: ImportRoomKeysOpts): Promise<void> {\n        return await this.backupManager.importRoomKeys(keys, opts);\n    }\n\n    public async importRoomKeysAsJson(keys: string, opts?: ImportRoomKeysOpts): Promise<void> {\n        return await this.backupManager.importRoomKeysAsJson(keys, opts);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi.userHasCrossSigningKeys}.\n     */\n    public async userHasCrossSigningKeys(userId = this.userId, downloadUncached = false): Promise<boolean> {\n        // TODO: could probably do with a more efficient way of doing this than returning the whole set and searching\n        const rustTrackedUsers: Set<RustSdkCryptoJs.UserId> = await this.olmMachine.trackedUsers();\n        let rustTrackedUser: RustSdkCryptoJs.UserId | undefined;\n        for (const u of rustTrackedUsers) {\n            if (userId === u.toString()) {\n                rustTrackedUser = u;\n                break;\n            }\n        }\n\n        if (rustTrackedUser !== undefined) {\n            if (userId === this.userId) {\n                /* make sure we have an *up-to-date* idea of the user's cross-signing keys. This is important, because if we\n                 * return \"false\" here, we will end up generating new cross-signing keys and replacing the existing ones.\n                 */\n                const request = this.olmMachine.queryKeysForUsers(\n                    // clone as rust layer will take ownership and it's reused later\n                    [rustTrackedUser.clone()],\n                );\n                await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n            }\n            const userIdentity = await this.olmMachine.getIdentity(rustTrackedUser);\n            userIdentity?.free();\n            return userIdentity !== undefined;\n        } else if (downloadUncached) {\n            // Download the cross signing keys and check if the master key is available\n            const keyResult = await this.downloadDeviceList(new Set([userId]));\n            const keys = keyResult.master_keys?.[userId];\n\n            // No master key\n            if (!keys) return false;\n\n            // `keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n            // We assume only a single key, and we want the bare form without type\n            // prefix, so we select the values.\n            return Boolean(Object.values(keys.keys)[0]);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get the device information for the given list of users.\n     *\n     * @param userIds - The users to fetch.\n     * @param downloadUncached - If true, download the device list for users whose device list we are not\n     *    currently tracking. Defaults to false, in which case such users will not appear at all in the result map.\n     *\n     * @returns A map `{@link DeviceMap}`.\n     */\n    public async getUserDeviceInfo(userIds: string[], downloadUncached = false): Promise<DeviceMap> {\n        const deviceMapByUserId = new Map<string, Map<string, Device>>();\n        const rustTrackedUsers: Set<RustSdkCryptoJs.UserId> = await this.getOlmMachineOrThrow().trackedUsers();\n\n        // Convert RustSdkCryptoJs.UserId to a `Set<string>`\n        const trackedUsers = new Set<string>();\n        rustTrackedUsers.forEach((rustUserId) => trackedUsers.add(rustUserId.toString()));\n\n        // Keep untracked user to download their keys after\n        const untrackedUsers: Set<string> = new Set();\n\n        for (const userId of userIds) {\n            // if this is a tracked user, we can just fetch the device list from the rust-sdk\n            // (NB: this is probably ok even if we race with a leave event such that we stop tracking the user's\n            // devices: the rust-sdk will return the last-known device list, which will be good enough.)\n            if (trackedUsers.has(userId)) {\n                deviceMapByUserId.set(userId, await this.getUserDevices(userId));\n            } else {\n                untrackedUsers.add(userId);\n            }\n        }\n\n        // for any users whose device lists we are not tracking, fall back to downloading the device list\n        // over HTTP.\n        if (downloadUncached && untrackedUsers.size >= 1) {\n            const queryResult = await this.downloadDeviceList(untrackedUsers);\n            Object.entries(queryResult.device_keys).forEach(([userId, deviceKeys]) =>\n                deviceMapByUserId.set(userId, deviceKeysToDeviceMap(deviceKeys)),\n            );\n        }\n\n        return deviceMapByUserId;\n    }\n\n    /**\n     * Get the device list for the given user from the olm machine\n     * @param userId - Rust SDK UserId\n     */\n    private async getUserDevices(userId: string): Promise<Map<string, Device>> {\n        const rustUserId = new RustSdkCryptoJs.UserId(userId);\n\n        // For reasons I don't really understand, the Javascript FinalizationRegistry doesn't seem to run the\n        // registered callbacks when `userDevices` goes out of scope, nor when the individual devices in the array\n        // returned by `userDevices.devices` do so.\n        //\n        // This is particularly problematic, because each of those structures holds a reference to the\n        // VerificationMachine, which in turn holds a reference to the IndexeddbCryptoStore. Hence, we end up leaking\n        // open connections to the crypto store, which means the store can't be deleted on logout.\n        //\n        // To fix this, we explicitly call `.free` on each of the objects, which tells the rust code to drop the\n        // allocated memory and decrement the refcounts for the crypto store.\n\n        // Wait for up to a second for any in-flight device list requests to complete.\n        // The reason for this isn't so much to avoid races (some level of raciness is\n        // inevitable for this method) but to make testing easier.\n        const userDevices: RustSdkCryptoJs.UserDevices = await this.olmMachine.getUserDevices(rustUserId, 1);\n        try {\n            const deviceArray: RustSdkCryptoJs.Device[] = userDevices.devices();\n            try {\n                return new Map(\n                    deviceArray.map((device) => [device.deviceId.toString(), rustDeviceToJsDevice(device, rustUserId)]),\n                );\n            } finally {\n                deviceArray.forEach((d) => d.free());\n            }\n        } finally {\n            userDevices.free();\n        }\n    }\n\n    /**\n     * Download the given user keys by calling `/keys/query` request\n     * @param untrackedUsers - download keys of these users\n     */\n    private async downloadDeviceList(untrackedUsers: Set<string>): Promise<IDownloadKeyResult> {\n        const queryBody: IQueryKeysRequest = { device_keys: {} };\n        untrackedUsers.forEach((user) => (queryBody.device_keys[user] = []));\n\n        return await this.http.authedRequest(Method.Post, \"/_matrix/client/v3/keys/query\", undefined, queryBody, {\n            prefix: \"\",\n        });\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getTrustCrossSignedDevices}.\n     */\n    public getTrustCrossSignedDevices(): boolean {\n        return this._trustCrossSignedDevices;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#setTrustCrossSignedDevices}.\n     */\n    public setTrustCrossSignedDevices(val: boolean): void {\n        this._trustCrossSignedDevices = val;\n        // TODO: legacy crypto goes through the list of known devices and emits DeviceVerificationChanged\n        //  events. Maybe we need to do the same?\n    }\n\n    /**\n     * Mark the given device as locally verified.\n     *\n     * Implementation of {@link CryptoApi#setDeviceVerified}.\n     */\n    public async setDeviceVerified(userId: string, deviceId: string, verified = true): Promise<void> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n\n        if (!device) {\n            throw new Error(`Unknown device ${userId}|${deviceId}`);\n        }\n        try {\n            await device.setLocalTrust(\n                verified ? RustSdkCryptoJs.LocalTrust.Verified : RustSdkCryptoJs.LocalTrust.Unset,\n            );\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Blindly cross-sign one of our other devices.\n     *\n     * Implementation of {@link CryptoApi#crossSignDevice}.\n     */\n    public async crossSignDevice(deviceId: string): Promise<void> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(this.userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n        if (!device) {\n            throw new Error(`Unknown device ${deviceId}`);\n        }\n        try {\n            const outgoingRequest: RustSdkCryptoJs.SignatureUploadRequest = await device.verify();\n            await this.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getDeviceVerificationStatus}.\n     */\n    public async getDeviceVerificationStatus(\n        userId: string,\n        deviceId: string,\n    ): Promise<DeviceVerificationStatus | null> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n\n        if (!device) return null;\n        try {\n            return new DeviceVerificationStatus({\n                signedByOwner: device.isCrossSignedByOwner(),\n                crossSigningVerified: device.isCrossSigningTrusted(),\n                localVerified: device.isLocallyTrusted(),\n                trustCrossSignedDevices: this._trustCrossSignedDevices,\n            });\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getUserVerificationStatus}.\n     */\n    public async getUserVerificationStatus(userId: string): Promise<UserVerificationStatus> {\n        const userIdentity: RustSdkCryptoJs.OtherUserIdentity | RustSdkCryptoJs.OwnUserIdentity | undefined =\n            await this.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n        if (userIdentity === undefined) {\n            return new UserVerificationStatus(false, false, false);\n        }\n\n        const verified = userIdentity.isVerified();\n        const wasVerified = userIdentity.wasPreviouslyVerified();\n        const needsUserApproval =\n            userIdentity instanceof RustSdkCryptoJs.OtherUserIdentity\n                ? userIdentity.identityNeedsUserApproval()\n                : false;\n        userIdentity.free();\n        return new UserVerificationStatus(verified, wasVerified, false, needsUserApproval);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#pinCurrentUserIdentity}.\n     */\n    public async pinCurrentUserIdentity(userId: string): Promise<void> {\n        const userIdentity: RustSdkCryptoJs.OtherUserIdentity | RustSdkCryptoJs.OwnUserIdentity | undefined =\n            await this.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n\n        if (userIdentity === undefined) {\n            throw new Error(\"Cannot pin identity of unknown user\");\n        }\n\n        if (userIdentity instanceof RustSdkCryptoJs.OwnUserIdentity) {\n            throw new Error(\"Cannot pin identity of own user\");\n        }\n\n        await userIdentity.pinCurrentMasterKey();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#withdrawVerificationRequirement}.\n     */\n    public async withdrawVerificationRequirement(userId: string): Promise<void> {\n        const userIdentity: RustSdkCryptoJs.OtherUserIdentity | RustSdkCryptoJs.OwnUserIdentity | undefined =\n            await this.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n\n        if (userIdentity === undefined) {\n            throw new Error(\"Cannot withdraw verification of unknown user\");\n        }\n\n        await userIdentity.withdrawVerification();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isCrossSigningReady}\n     */\n    public async isCrossSigningReady(): Promise<boolean> {\n        const { privateKeysInSecretStorage, privateKeysCachedLocally } = await this.getCrossSigningStatus();\n        const hasKeysInCache =\n            Boolean(privateKeysCachedLocally.masterKey) &&\n            Boolean(privateKeysCachedLocally.selfSigningKey) &&\n            Boolean(privateKeysCachedLocally.userSigningKey);\n\n        const identity = await this.getOwnIdentity();\n\n        // Cross-signing is ready if the public identity is trusted, and the private keys\n        // are either cached, or accessible via secret-storage.\n        return !!identity?.isVerified() && (hasKeysInCache || privateKeysInSecretStorage);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getCrossSigningKeyId}\n     */\n    public async getCrossSigningKeyId(type: CrossSigningKey = CrossSigningKey.Master): Promise<string | null> {\n        const userIdentity: RustSdkCryptoJs.OwnUserIdentity | undefined = await this.olmMachine.getIdentity(\n            new RustSdkCryptoJs.UserId(this.userId),\n        );\n        if (!userIdentity) {\n            // The public keys are not available on this device\n            return null;\n        }\n\n        try {\n            const crossSigningStatus: RustSdkCryptoJs.CrossSigningStatus = await this.olmMachine.crossSigningStatus();\n\n            const privateKeysOnDevice =\n                crossSigningStatus.hasMaster && crossSigningStatus.hasUserSigning && crossSigningStatus.hasSelfSigning;\n\n            if (!privateKeysOnDevice) {\n                // The private keys are not available on this device\n                return null;\n            }\n\n            if (!userIdentity.isVerified()) {\n                // We have both public and private keys, but they don't match!\n                return null;\n            }\n\n            let key: string;\n            switch (type) {\n                case CrossSigningKey.Master:\n                    key = userIdentity.masterKey;\n                    break;\n                case CrossSigningKey.SelfSigning:\n                    key = userIdentity.selfSigningKey;\n                    break;\n                case CrossSigningKey.UserSigning:\n                    key = userIdentity.userSigningKey;\n                    break;\n                default:\n                    // Unknown type\n                    return null;\n            }\n\n            const parsedKey: CrossSigningKeyInfo = JSON.parse(key);\n            // `keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n            // We assume only a single key, and we want the bare form without type\n            // prefix, so we select the values.\n            return Object.values(parsedKey.keys)[0];\n        } finally {\n            userIdentity.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#bootstrapCrossSigning}\n     */\n    public async bootstrapCrossSigning(opts: BootstrapCrossSigningOpts): Promise<void> {\n        await this.crossSigningIdentity.bootstrapCrossSigning(opts);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isSecretStorageReady}\n     */\n    public async isSecretStorageReady(): Promise<boolean> {\n        // make sure that the cross-signing keys are stored\n        const secretsToCheck: SecretStorageKey[] = [\n            \"m.cross_signing.master\",\n            \"m.cross_signing.user_signing\",\n            \"m.cross_signing.self_signing\",\n        ];\n\n        // if key backup is active, we also need to check that the backup decryption key is stored\n        const keyBackupEnabled = (await this.backupManager.getActiveBackupVersion()) != null;\n        if (keyBackupEnabled) {\n            secretsToCheck.push(\"m.megolm_backup.v1\");\n        }\n\n        return secretStorageCanAccessSecrets(this.secretStorage, secretsToCheck);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#bootstrapSecretStorage}\n     */\n    public async bootstrapSecretStorage({\n        createSecretStorageKey,\n        setupNewSecretStorage,\n        setupNewKeyBackup,\n    }: CreateSecretStorageOpts = {}): Promise<void> {\n        // If an AES Key is already stored in the secret storage and setupNewSecretStorage is not set\n        // we don't want to create a new key\n        const isNewSecretStorageKeyNeeded = setupNewSecretStorage || !(await this.secretStorageHasAESKey());\n\n        if (isNewSecretStorageKeyNeeded) {\n            if (!createSecretStorageKey) {\n                throw new Error(\"unable to create a new secret storage key, createSecretStorageKey is not set\");\n            }\n\n            // Create a new storage key and add it to secret storage\n            this.logger.info(\"bootstrapSecretStorage: creating new secret storage key\");\n            const recoveryKey = await createSecretStorageKey();\n            if (!recoveryKey) {\n                throw new Error(\"createSecretStorageKey() callback did not return a secret storage key\");\n            }\n            await this.addSecretStorageKeyToSecretStorage(recoveryKey);\n        }\n\n        const crossSigningStatus: RustSdkCryptoJs.CrossSigningStatus = await this.olmMachine.crossSigningStatus();\n        const hasPrivateKeys =\n            crossSigningStatus.hasMaster && crossSigningStatus.hasSelfSigning && crossSigningStatus.hasUserSigning;\n\n        // If we have cross-signing private keys cached, store them in secret\n        // storage if they are not there already.\n        if (\n            hasPrivateKeys &&\n            (isNewSecretStorageKeyNeeded || !(await secretStorageContainsCrossSigningKeys(this.secretStorage)))\n        ) {\n            this.logger.info(\"bootstrapSecretStorage: cross-signing keys not yet exported; doing so now.\");\n\n            const crossSigningPrivateKeys: RustSdkCryptoJs.CrossSigningKeyExport =\n                await this.olmMachine.exportCrossSigningKeys();\n\n            if (!crossSigningPrivateKeys.masterKey) {\n                throw new Error(\"missing master key in cross signing private keys\");\n            }\n\n            if (!crossSigningPrivateKeys.userSigningKey) {\n                throw new Error(\"missing user signing key in cross signing private keys\");\n            }\n\n            if (!crossSigningPrivateKeys.self_signing_key) {\n                throw new Error(\"missing self signing key in cross signing private keys\");\n            }\n\n            await this.secretStorage.store(\"m.cross_signing.master\", crossSigningPrivateKeys.masterKey);\n            await this.secretStorage.store(\"m.cross_signing.user_signing\", crossSigningPrivateKeys.userSigningKey);\n            await this.secretStorage.store(\"m.cross_signing.self_signing\", crossSigningPrivateKeys.self_signing_key);\n        }\n\n        // likewise with the key backup key: if we have one, store it in secret storage (if it's not already there)\n        // also don't bother storing it if we're about to set up a new backup\n        if (!setupNewKeyBackup) {\n            await this.saveBackupKeyToStorage();\n        } else {\n            await this.resetKeyBackup();\n        }\n    }\n\n    /**\n     * If we have a backup key for the current, trusted backup in cache,\n     * save it to secret storage.\n     */\n    private async saveBackupKeyToStorage(): Promise<void> {\n        const keyBackupInfo = await this.backupManager.getServerBackupInfo();\n        if (!keyBackupInfo || !keyBackupInfo.version) {\n            logger.info(\"Not saving backup key to secret storage: no backup info\");\n            return;\n        }\n\n        const backupKeys: RustSdkCryptoJs.BackupKeys = await this.olmMachine.getBackupKeys();\n        if (!backupKeys.decryptionKey) {\n            logger.info(\"Not saving backup key to secret storage: no backup key\");\n            return;\n        }\n\n        if (!decryptionKeyMatchesKeyBackupInfo(backupKeys.decryptionKey, keyBackupInfo)) {\n            logger.info(\"Not saving backup key to secret storage: decryption key does not match backup info\");\n            return;\n        }\n\n        const backupKeyBase64 = backupKeys.decryptionKey.toBase64();\n\n        await this.secretStorage.store(\"m.megolm_backup.v1\", backupKeyBase64);\n    }\n\n    /**\n     * Add the secretStorage key to the secret storage\n     * - The secret storage key must have the `keyInfo` field filled\n     * - The secret storage key is set as the default key of the secret storage\n     * - Call `cryptoCallbacks.cacheSecretStorageKey` when done\n     *\n     * @param secretStorageKey - The secret storage key to add in the secret storage.\n     */\n    private async addSecretStorageKeyToSecretStorage(secretStorageKey: GeneratedSecretStorageKey): Promise<void> {\n        const secretStorageKeyObject = await this.secretStorage.addKey(SECRET_STORAGE_ALGORITHM_V1_AES, {\n            passphrase: secretStorageKey.keyInfo?.passphrase,\n            name: secretStorageKey.keyInfo?.name,\n            key: secretStorageKey.privateKey,\n        });\n\n        await this.secretStorage.setDefaultKeyId(secretStorageKeyObject.keyId);\n\n        this.cryptoCallbacks.cacheSecretStorageKey?.(\n            secretStorageKeyObject.keyId,\n            secretStorageKeyObject.keyInfo,\n            secretStorageKey.privateKey,\n        );\n    }\n\n    /**\n     * Check if a secret storage AES Key is already added in secret storage\n     *\n     * @returns True if an AES key is in the secret storage\n     */\n    private async secretStorageHasAESKey(): Promise<boolean> {\n        // See if we already have an AES secret-storage key.\n        const secretStorageKeyTuple = await this.secretStorage.getKey();\n\n        if (!secretStorageKeyTuple) return false;\n\n        const [, keyInfo] = secretStorageKeyTuple;\n\n        // Check if the key is an AES key\n        return keyInfo.algorithm === SECRET_STORAGE_ALGORITHM_V1_AES;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getCrossSigningStatus}\n     */\n    public async getCrossSigningStatus(): Promise<CrossSigningStatus> {\n        const userIdentity: RustSdkCryptoJs.OwnUserIdentity | null = await this.getOlmMachineOrThrow().getIdentity(\n            new RustSdkCryptoJs.UserId(this.userId),\n        );\n\n        const publicKeysOnDevice =\n            Boolean(userIdentity?.masterKey) &&\n            Boolean(userIdentity?.selfSigningKey) &&\n            Boolean(userIdentity?.userSigningKey);\n        userIdentity?.free();\n\n        const privateKeysInSecretStorage = await secretStorageContainsCrossSigningKeys(this.secretStorage);\n        const crossSigningStatus: RustSdkCryptoJs.CrossSigningStatus | null =\n            await this.getOlmMachineOrThrow().crossSigningStatus();\n\n        return {\n            publicKeysOnDevice,\n            privateKeysInSecretStorage,\n            privateKeysCachedLocally: {\n                masterKey: Boolean(crossSigningStatus?.hasMaster),\n                userSigningKey: Boolean(crossSigningStatus?.hasUserSigning),\n                selfSigningKey: Boolean(crossSigningStatus?.hasSelfSigning),\n            },\n        };\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#createRecoveryKeyFromPassphrase}\n     */\n    public async createRecoveryKeyFromPassphrase(password?: string): Promise<GeneratedSecretStorageKey> {\n        if (password) {\n            // Generate the key from the passphrase\n            // first we generate a random salt\n            const salt = secureRandomString(32);\n            // then we derive the key from the passphrase\n            const recoveryKey = await deriveRecoveryKeyFromPassphrase(\n                password,\n                salt,\n                this.RECOVERY_KEY_DERIVATION_ITERATIONS,\n            );\n            return {\n                keyInfo: {\n                    passphrase: {\n                        algorithm: \"m.pbkdf2\",\n                        iterations: this.RECOVERY_KEY_DERIVATION_ITERATIONS,\n                        salt,\n                    },\n                },\n                privateKey: recoveryKey,\n                encodedPrivateKey: encodeRecoveryKey(recoveryKey),\n            };\n        } else {\n            // Using the navigator crypto API to generate the private key\n            const key = new Uint8Array(32);\n            globalThis.crypto.getRandomValues(key);\n            return {\n                privateKey: key,\n                encodedPrivateKey: encodeRecoveryKey(key),\n            };\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getEncryptionInfoForEvent}.\n     */\n    public async getEncryptionInfoForEvent(event: MatrixEvent): Promise<EventEncryptionInfo | null> {\n        return this.eventDecryptor.getEncryptionInfoForEvent(event);\n    }\n\n    /**\n     * Returns to-device verification requests that are already in progress for the given user id.\n     *\n     * Implementation of {@link CryptoApi#getVerificationRequestsToDeviceInProgress}\n     *\n     * @param userId - the ID of the user to query\n     *\n     * @returns the VerificationRequests that are in progress\n     */\n    public getVerificationRequestsToDeviceInProgress(userId: string): VerificationRequest[] {\n        const requests: RustSdkCryptoJs.VerificationRequest[] = this.olmMachine.getVerificationRequests(\n            new RustSdkCryptoJs.UserId(userId),\n        );\n        return requests\n            .filter((request) => request.roomId === undefined)\n            .map(\n                (request) =>\n                    new RustVerificationRequest(\n                        this.olmMachine,\n                        request,\n                        this.outgoingRequestProcessor,\n                        this._supportedVerificationMethods,\n                    ),\n            );\n    }\n\n    /**\n     * Finds a DM verification request that is already in progress for the given room id\n     *\n     * Implementation of {@link CryptoApi#findVerificationRequestDMInProgress}\n     *\n     * @param roomId - the room to use for verification\n     * @param userId - search the verification request for the given user\n     *\n     * @returns the VerificationRequest that is in progress, if any\n     *\n     */\n    public findVerificationRequestDMInProgress(roomId: string, userId?: string): VerificationRequest | undefined {\n        if (!userId) throw new Error(\"missing userId\");\n\n        const requests: RustSdkCryptoJs.VerificationRequest[] = this.olmMachine.getVerificationRequests(\n            new RustSdkCryptoJs.UserId(userId),\n        );\n\n        // Search for the verification request for the given room id\n        const request = requests.find((request) => request.roomId?.toString() === roomId);\n\n        if (request) {\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#requestVerificationDM}\n     */\n    public async requestVerificationDM(userId: string, roomId: string): Promise<VerificationRequest> {\n        const userIdentity: RustSdkCryptoJs.OtherUserIdentity | undefined = await this.olmMachine.getIdentity(\n            new RustSdkCryptoJs.UserId(userId),\n        );\n\n        if (!userIdentity) throw new Error(`unknown userId ${userId}`);\n\n        try {\n            // Transform the verification methods into rust objects\n            const methods = this._supportedVerificationMethods.map((method) =>\n                verificationMethodIdentifierToMethod(method),\n            );\n            // Get the request content to send to the DM room\n            const verificationEventContent: string = await userIdentity.verificationRequestContent(methods);\n\n            // Send the request content to send to the DM room\n            const eventId = await this.sendVerificationRequestContent(roomId, verificationEventContent);\n\n            // Get a verification request\n            const request: RustSdkCryptoJs.VerificationRequest = await userIdentity.requestVerification(\n                new RustSdkCryptoJs.RoomId(roomId),\n                new RustSdkCryptoJs.EventId(eventId),\n                methods,\n            );\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        } finally {\n            userIdentity.free();\n        }\n    }\n\n    /**\n     * Send the verification content to a room\n     * See https://spec.matrix.org/v1.7/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n     *\n     * Prefer to use {@link OutgoingRequestProcessor.makeOutgoingRequest} when dealing with {@link RustSdkCryptoJs.RoomMessageRequest}\n     *\n     * @param roomId - the targeted room\n     * @param verificationEventContent - the request body.\n     *\n     * @returns the event id\n     */\n    private async sendVerificationRequestContent(roomId: string, verificationEventContent: string): Promise<string> {\n        const txId = secureRandomString(32);\n        // Send the verification request content to the DM room\n        const { event_id: eventId } = await this.http.authedRequest<{ event_id: string }>(\n            Method.Put,\n            `/_matrix/client/v3/rooms/${encodeURIComponent(roomId)}/send/m.room.message/${encodeURIComponent(txId)}`,\n            undefined,\n            verificationEventContent,\n            {\n                prefix: \"\",\n            },\n        );\n\n        return eventId;\n    }\n\n    /**\n     * The verification methods we offer to the other side during an interactive verification.\n     */\n    private _supportedVerificationMethods: string[] = ALL_VERIFICATION_METHODS;\n\n    /**\n     * Set the verification methods we offer to the other side during an interactive verification.\n     *\n     * If `undefined`, we will offer all the methods supported by the Rust SDK.\n     */\n    public setSupportedVerificationMethods(methods: string[] | undefined): void {\n        // by default, the Rust SDK does not offer `m.qr_code.scan.v1`, but we do want to offer that.\n        this._supportedVerificationMethods = methods ?? ALL_VERIFICATION_METHODS;\n    }\n\n    /**\n     * Send a verification request to our other devices.\n     *\n     * If a verification is already in flight, returns it. Otherwise, initiates a new one.\n     *\n     * Implementation of {@link CryptoApi#requestOwnUserVerification}.\n     *\n     * @returns a VerificationRequest when the request has been sent to the other party.\n     */\n    public async requestOwnUserVerification(): Promise<VerificationRequest> {\n        const userIdentity: RustSdkCryptoJs.OwnUserIdentity | undefined = await this.olmMachine.getIdentity(\n            new RustSdkCryptoJs.UserId(this.userId),\n        );\n        if (userIdentity === undefined) {\n            throw new Error(\"cannot request verification for this device when there is no existing cross-signing key\");\n        }\n\n        try {\n            const [request, outgoingRequest]: [RustSdkCryptoJs.VerificationRequest, RustSdkCryptoJs.ToDeviceRequest] =\n                await userIdentity.requestVerification(\n                    this._supportedVerificationMethods.map(verificationMethodIdentifierToMethod),\n                );\n            await this.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        } finally {\n            userIdentity.free();\n        }\n    }\n\n    /**\n     * Request an interactive verification with the given device.\n     *\n     * If a verification is already in flight, returns it. Otherwise, initiates a new one.\n     *\n     * Implementation of {@link CryptoApi#requestDeviceVerification}.\n     *\n     * @param userId - ID of the owner of the device to verify\n     * @param deviceId - ID of the device to verify\n     *\n     * @returns a VerificationRequest when the request has been sent to the other party.\n     */\n    public async requestDeviceVerification(userId: string, deviceId: string): Promise<VerificationRequest> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n\n        if (!device) {\n            throw new Error(\"Not a known device\");\n        }\n\n        try {\n            const [request, outgoingRequest] = device.requestVerification(\n                this._supportedVerificationMethods.map(verificationMethodIdentifierToMethod),\n            );\n            await this.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Fetch the backup decryption key we have saved in our store.\n     *\n     * Implementation of {@link CryptoApi#getSessionBackupPrivateKey}.\n     *\n     * @returns the key, if any, or null\n     */\n    public async getSessionBackupPrivateKey(): Promise<Uint8Array | null> {\n        const backupKeys: RustSdkCryptoJs.BackupKeys = await this.olmMachine.getBackupKeys();\n        if (!backupKeys.decryptionKey) return null;\n        return decodeBase64(backupKeys.decryptionKey.toBase64());\n    }\n\n    /**\n     * Store the backup decryption key.\n     *\n     * Implementation of {@link CryptoApi#storeSessionBackupPrivateKey}.\n     *\n     * @param key - the backup decryption key\n     * @param version - the backup version for this key.\n     */\n    public async storeSessionBackupPrivateKey(key: Uint8Array, version?: string): Promise<void> {\n        const base64Key = encodeBase64(key);\n\n        if (!version) {\n            throw new Error(\"storeSessionBackupPrivateKey: version is required\");\n        }\n\n        await this.backupManager.saveBackupDecryptionKey(\n            RustSdkCryptoJs.BackupDecryptionKey.fromBase64(base64Key),\n            version,\n        );\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#loadSessionBackupPrivateKeyFromSecretStorage}.\n     */\n    public async loadSessionBackupPrivateKeyFromSecretStorage(): Promise<void> {\n        const backupKey = await this.secretStorage.get(\"m.megolm_backup.v1\");\n        if (!backupKey) {\n            throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: missing decryption key in secret storage\");\n        }\n\n        const keyBackupInfo = await this.backupManager.getServerBackupInfo();\n        if (!keyBackupInfo || !keyBackupInfo.version) {\n            throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: unable to get backup version\");\n        }\n\n        const backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(backupKey);\n        if (!decryptionKeyMatchesKeyBackupInfo(backupDecryptionKey, keyBackupInfo)) {\n            throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: decryption key does not match backup info\");\n        }\n\n        await this.backupManager.saveBackupDecryptionKey(backupDecryptionKey, keyBackupInfo.version);\n    }\n\n    /**\n     * Get the current status of key backup.\n     *\n     * Implementation of {@link CryptoApi#getActiveSessionBackupVersion}.\n     */\n    public async getActiveSessionBackupVersion(): Promise<string | null> {\n        return await this.backupManager.getActiveBackupVersion();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getKeyBackupInfo}.\n     */\n    public async getKeyBackupInfo(): Promise<KeyBackupInfo | null> {\n        return (await this.backupManager.getServerBackupInfo()) || null;\n    }\n\n    /**\n     * Determine if a key backup can be trusted.\n     *\n     * Implementation of {@link CryptoApi#isKeyBackupTrusted}.\n     */\n    public async isKeyBackupTrusted(info: KeyBackupInfo): Promise<BackupTrustInfo> {\n        return await this.backupManager.isKeyBackupTrusted(info);\n    }\n\n    /**\n     * Force a re-check of the key backup and enable/disable it as appropriate.\n     *\n     * Implementation of {@link CryptoApi#checkKeyBackupAndEnable}.\n     */\n    public async checkKeyBackupAndEnable(): Promise<KeyBackupCheck | null> {\n        return await this.backupManager.checkKeyBackupAndEnable(true);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#deleteKeyBackupVersion}.\n     */\n    public async deleteKeyBackupVersion(version: string): Promise<void> {\n        await this.backupManager.deleteKeyBackupVersion(version);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#resetKeyBackup}.\n     */\n    public async resetKeyBackup(): Promise<void> {\n        const backupInfo = await this.backupManager.setupKeyBackup((o) => this.signObject(o));\n\n        // we want to store the private key in 4S\n        // need to check if 4S is set up?\n        if (await this.secretStorageHasAESKey()) {\n            await this.secretStorage.store(\"m.megolm_backup.v1\", backupInfo.decryptionKey.toBase64());\n        }\n\n        // we can check and start async\n        this.checkKeyBackupAndEnable();\n    }\n\n    /**\n     * Signs the given object with the current device and current identity (if available).\n     * As defined in {@link https://spec.matrix.org/v1.8/appendices/#signing-json | Signing JSON}.\n     *\n     * Helper for {@link RustCrypto#resetKeyBackup}.\n     *\n     * @param obj - The object to sign\n     */\n    private async signObject<T extends ISignableObject & object>(obj: T): Promise<void> {\n        const sigs = new Map(Object.entries(obj.signatures || {}));\n        const unsigned = obj.unsigned;\n\n        delete obj.signatures;\n        delete obj.unsigned;\n\n        const userSignatures = sigs.get(this.userId) || {};\n\n        const canonalizedJson = anotherjson.stringify(obj);\n        const signatures: RustSdkCryptoJs.Signatures = await this.olmMachine.sign(canonalizedJson);\n\n        const map = JSON.parse(signatures.asJSON());\n\n        sigs.set(this.userId, { ...userSignatures, ...map[this.userId] });\n\n        if (unsigned !== undefined) obj.unsigned = unsigned;\n        obj.signatures = Object.fromEntries(sigs.entries());\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#restoreKeyBackupWithPassphrase}.\n     */\n    public async restoreKeyBackupWithPassphrase(\n        passphrase: string,\n        opts?: KeyBackupRestoreOpts,\n    ): Promise<KeyBackupRestoreResult> {\n        const backupInfo = await this.backupManager.getServerBackupInfo();\n        if (!backupInfo?.version) {\n            throw new Error(\"No backup info available\");\n        }\n\n        const privateKey = await keyFromAuthData(backupInfo.auth_data, passphrase);\n\n        // Cache the key\n        await this.storeSessionBackupPrivateKey(privateKey, backupInfo.version);\n        return this.restoreKeyBackup(opts);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#restoreKeyBackup}.\n     */\n    public async restoreKeyBackup(opts?: KeyBackupRestoreOpts): Promise<KeyBackupRestoreResult> {\n        // Get the decryption key from the crypto store\n        const backupKeys: RustSdkCryptoJs.BackupKeys = await this.olmMachine.getBackupKeys();\n        const { decryptionKey, backupVersion } = backupKeys;\n        if (!decryptionKey || !backupVersion) throw new Error(\"No decryption key found in crypto store\");\n\n        const decodedDecryptionKey = decodeBase64(decryptionKey.toBase64());\n\n        const backupInfo = await this.backupManager.requestKeyBackupVersion(backupVersion);\n        if (!backupInfo) throw new Error(`Backup version to restore ${backupVersion} not found on server`);\n\n        const backupDecryptor = await this.getBackupDecryptor(backupInfo, decodedDecryptionKey);\n\n        try {\n            opts?.progressCallback?.({\n                stage: \"fetch\",\n            });\n\n            return await this.backupManager.restoreKeyBackup(backupVersion, backupDecryptor, opts);\n        } finally {\n            // Free to avoid to keep in memory the decryption key stored in it. To avoid to exposing it to an attacker.\n            backupDecryptor.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isDehydrationSupported}.\n     */\n    public async isDehydrationSupported(): Promise<boolean> {\n        return await this.dehydratedDeviceManager.isSupported();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#startDehydration}.\n     */\n    public async startDehydration(opts: StartDehydrationOpts | boolean = {}): Promise<void> {\n        if (!(await this.isCrossSigningReady()) || !(await this.isSecretStorageReady())) {\n            throw new Error(\"Device dehydration requires cross-signing and secret storage to be set up\");\n        }\n        return await this.dehydratedDeviceManager.start(opts || {});\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#importSecretsBundle}.\n     */\n    public async importSecretsBundle(\n        secrets: Parameters<NonNullable<CryptoApi[\"importSecretsBundle\"]>>[0],\n    ): Promise<void> {\n        const secretsBundle = RustSdkCryptoJs.SecretsBundle.from_json(secrets);\n        await this.getOlmMachineOrThrow().importSecretsBundle(secretsBundle); // this method frees the SecretsBundle\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#exportSecretsBundle}.\n     */\n    public async exportSecretsBundle(): ReturnType<NonNullable<CryptoApi[\"exportSecretsBundle\"]>> {\n        const secretsBundle = await this.getOlmMachineOrThrow().exportSecretsBundle();\n        const secrets = secretsBundle.to_json();\n        secretsBundle.free();\n        return secrets;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#encryptToDeviceMessages}.\n     */\n    public async encryptToDeviceMessages(\n        eventType: string,\n        devices: { userId: string; deviceId: string }[],\n        payload: ToDevicePayload,\n    ): Promise<ToDeviceBatch> {\n        const logger = new LogSpan(this.logger, \"encryptToDeviceMessages\");\n        const uniqueUsers = new Set(devices.map(({ userId }) => userId));\n\n        // This will ensure we have Olm sessions for all of the users' devices.\n        // However, we only care about some of the devices.\n        // So, perhaps we can optimise this later on.\n        await this.keyClaimManager.ensureSessionsForUsers(\n            logger,\n            Array.from(uniqueUsers).map((userId) => new RustSdkCryptoJs.UserId(userId)),\n        );\n        const batch: ToDeviceBatch = {\n            batch: [],\n            eventType: EventType.RoomMessageEncrypted,\n        };\n\n        await Promise.all(\n            devices.map(async ({ userId, deviceId }) => {\n                const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n                    new RustSdkCryptoJs.UserId(userId),\n                    new RustSdkCryptoJs.DeviceId(deviceId),\n                );\n\n                if (device) {\n                    const encryptedPayload = JSON.parse(await device.encryptToDeviceEvent(eventType, payload));\n                    batch.batch.push({\n                        deviceId,\n                        userId,\n                        payload: encryptedPayload,\n                    });\n                } else {\n                    this.logger.warn(`encryptToDeviceMessages: unknown device ${userId}:${deviceId}`);\n                }\n            }),\n        );\n\n        return batch;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#resetEncryption}.\n     */\n    public async resetEncryption(authUploadDeviceSigningKeys: UIAuthCallback<void>): Promise<void> {\n        this.logger.debug(\"resetEncryption: resetting encryption\");\n\n        // Disable backup, and delete all the backups from the server\n        await this.backupManager.deleteAllKeyBackupVersions();\n\n        // Disable the recovery key and the secret storage\n        await this.secretStorage.setDefaultKeyId(null);\n\n        // Reset the cross-signing keys\n        await this.crossSigningIdentity.bootstrapCrossSigning({\n            setupNewCrossSigning: true,\n            authUploadDeviceSigningKeys,\n        });\n\n        // Create a new key backup\n        await this.resetKeyBackup();\n\n        this.logger.debug(\"resetEncryption: ended\");\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // SyncCryptoCallbacks implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Apply sync changes to the olm machine\n     * @param events - the received to-device messages\n     * @param oneTimeKeysCounts - the received one time key counts\n     * @param unusedFallbackKeys - the received unused fallback keys\n     * @param devices - the received device list updates\n     * @returns A list of preprocessed to-device messages.\n     */\n    private async receiveSyncChanges({\n        events,\n        oneTimeKeysCounts = new Map<string, number>(),\n        unusedFallbackKeys,\n        devices = new RustSdkCryptoJs.DeviceLists(),\n    }: {\n        events?: IToDeviceEvent[];\n        oneTimeKeysCounts?: Map<string, number>;\n        unusedFallbackKeys?: Set<string>;\n        devices?: RustSdkCryptoJs.DeviceLists;\n    }): Promise<IToDeviceEvent[]> {\n        const result = await logDuration(logger, \"receiveSyncChanges\", async () => {\n            return await this.olmMachine.receiveSyncChanges(\n                events ? JSON.stringify(events) : \"[]\",\n                devices,\n                oneTimeKeysCounts,\n                unusedFallbackKeys,\n            );\n        });\n\n        // receiveSyncChanges returns a JSON-encoded list of decrypted to-device messages.\n        return JSON.parse(result);\n    }\n\n    /** called by the sync loop to preprocess incoming to-device messages\n     *\n     * @param events - the received to-device messages\n     * @returns A list of preprocessed to-device messages.\n     */\n    public async preprocessToDeviceMessages(events: IToDeviceEvent[]): Promise<IToDeviceEvent[]> {\n        // send the received to-device messages into receiveSyncChanges. We have no info on device-list changes,\n        // one-time-keys, or fallback keys, so just pass empty data.\n        const processed = await this.receiveSyncChanges({ events });\n\n        // look for interesting to-device messages\n        for (const message of processed) {\n            if (message.type === EventType.KeyVerificationRequest) {\n                const sender = message.sender;\n                const transactionId = message.content.transaction_id;\n                if (transactionId && sender) {\n                    this.onIncomingKeyVerificationRequest(sender, transactionId);\n                }\n            }\n        }\n        return processed;\n    }\n\n    /** called by the sync loop to process one time key counts and unused fallback keys\n     *\n     * @param oneTimeKeysCounts - the received one time key counts\n     * @param unusedFallbackKeys - the received unused fallback keys\n     */\n    public async processKeyCounts(\n        oneTimeKeysCounts?: Record<string, number>,\n        unusedFallbackKeys?: string[],\n    ): Promise<void> {\n        const mapOneTimeKeysCount = oneTimeKeysCounts && new Map<string, number>(Object.entries(oneTimeKeysCounts));\n        const setUnusedFallbackKeys = unusedFallbackKeys && new Set<string>(unusedFallbackKeys);\n\n        if (mapOneTimeKeysCount !== undefined || setUnusedFallbackKeys !== undefined) {\n            await this.receiveSyncChanges({\n                oneTimeKeysCounts: mapOneTimeKeysCount,\n                unusedFallbackKeys: setUnusedFallbackKeys,\n            });\n        }\n    }\n\n    /** called by the sync loop to process the notification that device lists have\n     * been changed.\n     *\n     * @param deviceLists - device_lists field from /sync\n     */\n    public async processDeviceLists(deviceLists: IDeviceLists): Promise<void> {\n        const devices = new RustSdkCryptoJs.DeviceLists(\n            deviceLists.changed?.map((userId) => new RustSdkCryptoJs.UserId(userId)),\n            deviceLists.left?.map((userId) => new RustSdkCryptoJs.UserId(userId)),\n        );\n        await this.receiveSyncChanges({ devices });\n    }\n\n    /** called by the sync loop on m.room.encrypted events\n     *\n     * @param room - in which the event was received\n     * @param event - encryption event to be processed\n     */\n    public async onCryptoEvent(room: Room, event: MatrixEvent): Promise<void> {\n        const config = event.getContent();\n        const settings = new RustSdkCryptoJs.RoomSettings();\n\n        if (config.algorithm === \"m.megolm.v1.aes-sha2\") {\n            settings.algorithm = RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2;\n        } else {\n            // Among other situations, this happens if the crypto state event is redacted.\n            this.logger.warn(`Room ${room.roomId}: ignoring crypto event with invalid algorithm ${config.algorithm}`);\n            return;\n        }\n\n        try {\n            settings.sessionRotationPeriodMs = config.rotation_period_ms;\n            settings.sessionRotationPeriodMessages = config.rotation_period_msgs;\n            await this.olmMachine.setRoomSettings(new RustSdkCryptoJs.RoomId(room.roomId), settings);\n        } catch (e) {\n            this.logger.warn(`Room ${room.roomId}: ignoring crypto event which caused error: ${e}`);\n            return;\n        }\n\n        // If we got this far, the SDK found the event acceptable.\n        // We need to either create or update the active RoomEncryptor.\n        const existingEncryptor = this.roomEncryptors[room.roomId];\n        if (existingEncryptor) {\n            existingEncryptor.onCryptoEvent(config);\n        } else {\n            this.roomEncryptors[room.roomId] = new RoomEncryptor(\n                this.olmMachine,\n                this.keyClaimManager,\n                this.outgoingRequestsManager,\n                room,\n                config,\n            );\n        }\n    }\n\n    /** called by the sync loop after processing each sync.\n     *\n     * TODO: figure out something equivalent for sliding sync.\n     *\n     * @param syncState - information on the completed sync.\n     */\n    public onSyncCompleted(syncState: OnSyncCompletedData): void {\n        // Processing the /sync may have produced new outgoing requests which need sending, so kick off the outgoing\n        // request loop, if it's not already running.\n        this.outgoingRequestsManager.doProcessOutgoingRequests().catch((e) => {\n            this.logger.warn(\"onSyncCompleted: Error processing outgoing requests\", e);\n        });\n    }\n\n    /**\n     * Handle an incoming m.key.verification.request event, received either in-room or in a to-device message.\n     *\n     * @param sender - the sender of the event\n     * @param transactionId - the transaction ID for the verification. For to-device messages, this comes from the\n     *    content of the message; for in-room messages it is the event ID.\n     */\n    private onIncomingKeyVerificationRequest(sender: string, transactionId: string): void {\n        const request: RustSdkCryptoJs.VerificationRequest | undefined = this.olmMachine.getVerificationRequest(\n            new RustSdkCryptoJs.UserId(sender),\n            transactionId,\n        );\n\n        if (request) {\n            this.emit(\n                CryptoEvent.VerificationRequestReceived,\n                new RustVerificationRequest(\n                    this.olmMachine,\n                    request,\n                    this.outgoingRequestProcessor,\n                    this._supportedVerificationMethods,\n                ),\n            );\n        } else {\n            // There are multiple reasons this can happen; probably the most likely is that the event is an\n            // in-room event which is too old.\n            this.logger.info(\n                `Ignoring just-received verification request ${transactionId} which did not start a rust-side verification`,\n            );\n        }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Other public functions\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /** called by the MatrixClient on a room membership event\n     *\n     * @param event - The matrix event which caused this event to fire.\n     * @param member - The member whose RoomMember.membership changed.\n     * @param oldMembership - The previous membership state. Null if it's a new member.\n     */\n    public onRoomMembership(event: MatrixEvent, member: RoomMember, oldMembership?: string): void {\n        const enc = this.roomEncryptors[event.getRoomId()!];\n        if (!enc) {\n            // not encrypting in this room\n            return;\n        }\n        enc.onRoomMembership(member);\n    }\n\n    /** Callback for OlmMachine.registerRoomKeyUpdatedCallback\n     *\n     * Called by the rust-sdk whenever there is an update to (megolm) room keys. We\n     * check if we have any events waiting for the given keys, and schedule them for\n     * a decryption retry if so.\n     *\n     * @param keys - details of the updated keys\n     */\n    public async onRoomKeysUpdated(keys: RustSdkCryptoJs.RoomKeyInfo[]): Promise<void> {\n        for (const key of keys) {\n            this.onRoomKeyUpdated(key);\n        }\n        this.backupManager.maybeUploadKey();\n    }\n\n    private onRoomKeyUpdated(key: RustSdkCryptoJs.RoomKeyInfo): void {\n        if (this.stopped) return;\n        this.logger.debug(\n            `Got update for session ${key.sessionId} from sender ${key.senderKey.toBase64()} in ${key.roomId.toString()}`,\n        );\n        const pendingList = this.eventDecryptor.getEventsPendingRoomKey(key.roomId.toString(), key.sessionId);\n        if (pendingList.length === 0) return;\n\n        this.logger.debug(\n            \"Retrying decryption on events:\",\n            pendingList.map((e) => `${e.getId()}`),\n        );\n\n        // Have another go at decrypting events with this key.\n        //\n        // We don't want to end up blocking the callback from Rust, which could otherwise end up dropping updates,\n        // so we don't wait for the decryption to complete. In any case, there is no need to wait:\n        // MatrixEvent.attemptDecryption ensures that there is only one decryption attempt happening at once,\n        // and deduplicates repeated attempts for the same event.\n        for (const ev of pendingList) {\n            ev.attemptDecryption(this, { isRetry: true }).catch((_e) => {\n                this.logger.info(`Still unable to decrypt event ${ev.getId()} after receiving key`);\n            });\n        }\n    }\n\n    /**\n     * Callback for `OlmMachine.registerRoomKeyWithheldCallback`.\n     *\n     * Called by the rust sdk whenever we are told that a key has been withheld. We see if we had any events that\n     * failed to decrypt for the given session, and update their status if so.\n     *\n     * @param withheld - Details of the withheld sessions.\n     */\n    public async onRoomKeysWithheld(withheld: RustSdkCryptoJs.RoomKeyWithheldInfo[]): Promise<void> {\n        for (const session of withheld) {\n            this.logger.debug(`Got withheld message for session ${session.sessionId} in ${session.roomId.toString()}`);\n            const pendingList = this.eventDecryptor.getEventsPendingRoomKey(\n                session.roomId.toString(),\n                session.sessionId,\n            );\n            if (pendingList.length === 0) return;\n\n            // The easiest way to update the status of the event is to have another go at decrypting it.\n            this.logger.debug(\n                \"Retrying decryption on events:\",\n                pendingList.map((e) => `${e.getId()}`),\n            );\n\n            for (const ev of pendingList) {\n                ev.attemptDecryption(this, { isRetry: true }).catch((_e) => {\n                    // It's somewhat expected that we still can't decrypt here.\n                });\n            }\n        }\n    }\n\n    /**\n     * Callback for `OlmMachine.registerUserIdentityUpdatedCallback`\n     *\n     * Called by the rust-sdk whenever there is an update to any user's cross-signing status. We re-check their trust\n     * status and emit a `UserTrustStatusChanged` event, as well as a `KeysChanged` if it is our own identity that changed.\n     *\n     * @param userId - the user with the updated identity\n     */\n    public async onUserIdentityUpdated(userId: RustSdkCryptoJs.UserId): Promise<void> {\n        const newVerification = await this.getUserVerificationStatus(userId.toString());\n        this.emit(CryptoEvent.UserTrustStatusChanged, userId.toString(), newVerification);\n\n        // If our own user identity has changed, we may now trust the key backup where we did not before.\n        // So, re-check the key backup status and enable it if available.\n        if (userId.toString() === this.userId) {\n            this.emit(CryptoEvent.KeysChanged, {});\n            await this.checkKeyBackupAndEnable();\n        }\n    }\n\n    /**\n     * Callback for `OlmMachine.registerDevicesUpdatedCallback`\n     *\n     * Called when users' devices have updated. Emits `WillUpdateDevices` and `DevicesUpdated`. In the JavaScript\n     * crypto backend, these events are called at separate times, with `WillUpdateDevices` being emitted just before\n     * the devices are saved, and `DevicesUpdated` being emitted just after. But the OlmMachine only gives us\n     * one event, so we emit both events here.\n     *\n     * @param userIds - an array of user IDs of users whose devices have updated.\n     */\n    public async onDevicesUpdated(userIds: string[]): Promise<void> {\n        this.emit(CryptoEvent.WillUpdateDevices, userIds, false);\n        this.emit(CryptoEvent.DevicesUpdated, userIds, false);\n    }\n\n    /**\n     * Handles secret received from the rust secret inbox.\n     *\n     * The gossipped secrets are received using the `m.secret.send` event type\n     * and are guaranteed to have been received over a 1-to-1 Olm\n     * Session from a verified device.\n     *\n     * The only secret currently handled in this way is `m.megolm_backup.v1`.\n     *\n     * @param name - the secret name\n     * @param value - the secret value\n     */\n    private async handleSecretReceived(name: string, value: string): Promise<boolean> {\n        this.logger.debug(`onReceiveSecret: Received secret ${name}`);\n        if (name === \"m.megolm_backup.v1\") {\n            return await this.backupManager.handleBackupSecretReceived(value);\n            // XXX at this point we should probably try to download the backup and import the keys,\n            // or at least retry for the current decryption failures?\n            // Maybe add some signaling when a new secret is received, and let clients handle it?\n            // as it's where the restore from backup APIs are exposed.\n        }\n        return false;\n    }\n\n    /**\n     * Called when a new secret is received in the rust secret inbox.\n     *\n     * Will poll the secret inbox and handle the secrets received.\n     *\n     * @param name - The name of the secret received.\n     */\n    public async checkSecrets(name: string): Promise<void> {\n        const pendingValues: string[] = await this.olmMachine.getSecretsFromInbox(name);\n        for (const value of pendingValues) {\n            if (await this.handleSecretReceived(name, value)) {\n                // If we have a valid secret for that name there is no point of processing the other secrets values.\n                // It's probably the same secret shared by another device.\n                break;\n            }\n        }\n\n        // Important to call this after handling the secrets as good hygiene.\n        await this.olmMachine.deleteSecretsFromInbox(name);\n    }\n\n    /**\n     * Handle a live event received via /sync.\n     * See {@link ClientEventHandlerMap#event}\n     *\n     * @param event - live event\n     */\n    public async onLiveEventFromSync(event: MatrixEvent): Promise<void> {\n        // Ignore state event or remote echo\n        // transaction_id is provided in case of remote echo {@link https://spec.matrix.org/v1.7/client-server-api/#local-echo}\n        if (event.isState() || !!event.getUnsigned().transaction_id) return;\n\n        const processEvent = async (evt: MatrixEvent): Promise<void> => {\n            // Process only verification event\n            if (isVerificationEvent(event)) {\n                await this.onKeyVerificationEvent(evt);\n            }\n        };\n\n        // If the event is encrypted of in failure, we wait for decryption\n        if (event.isDecryptionFailure() || event.isEncrypted()) {\n            // 5 mins\n            const TIMEOUT_DELAY = 5 * 60 * 1000;\n\n            // After 5mins, we are not expecting the event to be decrypted\n            const timeoutId = setTimeout(() => event.off(MatrixEventEvent.Decrypted, onDecrypted), TIMEOUT_DELAY);\n\n            const onDecrypted = (decryptedEvent: MatrixEvent, error?: Error): void => {\n                if (error) return;\n\n                clearTimeout(timeoutId);\n                event.off(MatrixEventEvent.Decrypted, onDecrypted);\n                processEvent(decryptedEvent);\n            };\n\n            event.on(MatrixEventEvent.Decrypted, onDecrypted);\n        } else {\n            await processEvent(event);\n        }\n    }\n\n    /**\n     * Handle an in-room key verification event.\n     *\n     * @param event - a key validation request event.\n     */\n    private async onKeyVerificationEvent(event: MatrixEvent): Promise<void> {\n        const roomId = event.getRoomId();\n\n        if (!roomId) {\n            throw new Error(\"missing roomId in the event\");\n        }\n\n        this.logger.debug(\n            `Incoming verification event ${event.getId()} type ${event.getType()} from ${event.getSender()}`,\n        );\n\n        await this.olmMachine.receiveVerificationEvent(\n            JSON.stringify({\n                event_id: event.getId(),\n                type: event.getType(),\n                sender: event.getSender(),\n                state_key: event.getStateKey(),\n                content: event.getContent(),\n                origin_server_ts: event.getTs(),\n            }),\n            new RustSdkCryptoJs.RoomId(roomId),\n        );\n\n        if (\n            event.getType() === EventType.RoomMessage &&\n            event.getContent().msgtype === MsgType.KeyVerificationRequest\n        ) {\n            this.onIncomingKeyVerificationRequest(event.getSender()!, event.getId()!);\n        }\n\n        // that may have caused us to queue up outgoing requests, so make sure we send them.\n        this.outgoingRequestsManager.doProcessOutgoingRequests().catch((e) => {\n            this.logger.warn(\"onKeyVerificationRequest: Error processing outgoing requests\", e);\n        });\n    }\n\n    /**\n     * Returns the cross-signing user identity of the current user.\n     *\n     * Not part of the public crypto-api interface.\n     * Used during migration from legacy js-crypto to update local trust if needed.\n     */\n    public async getOwnIdentity(): Promise<RustSdkCryptoJs.OwnUserIdentity | undefined> {\n        return await this.olmMachine.getIdentity(new RustSdkCryptoJs.UserId(this.userId));\n    }\n}\n\nclass EventDecryptor {\n    /**\n     * Events which we couldn't decrypt due to unknown sessions / indexes.\n     *\n     * Map from roomId to sessionId to Set of MatrixEvents\n     */\n    private eventsPendingKey = new MapWithDefault<string, MapWithDefault<string, Set<MatrixEvent>>>(\n        () => new MapWithDefault<string, Set<MatrixEvent>>(() => new Set()),\n    );\n\n    public constructor(\n        private readonly logger: Logger,\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n        private readonly perSessionBackupDownloader: PerSessionKeyBackupDownloader,\n    ) {}\n\n    public async attemptEventDecryption(\n        event: MatrixEvent,\n        isolationMode: DeviceIsolationMode,\n    ): Promise<IEventDecryptionResult> {\n        // add the event to the pending list *before* attempting to decrypt.\n        // then, if the key turns up while decryption is in progress (and\n        // decryption fails), we will schedule a retry.\n        // (fixes https://github.com/vector-im/element-web/issues/5001)\n        this.addEventToPendingList(event);\n\n        let trustRequirement;\n\n        switch (isolationMode.kind) {\n            case DeviceIsolationModeKind.AllDevicesIsolationMode:\n                trustRequirement = RustSdkCryptoJs.TrustRequirement.Untrusted;\n                break;\n            case DeviceIsolationModeKind.OnlySignedDevicesIsolationMode:\n                trustRequirement = RustSdkCryptoJs.TrustRequirement.CrossSignedOrLegacy;\n                break;\n        }\n\n        try {\n            const res = (await this.olmMachine.decryptRoomEvent(\n                stringifyEvent(event),\n                new RustSdkCryptoJs.RoomId(event.getRoomId()!),\n                new RustSdkCryptoJs.DecryptionSettings(trustRequirement),\n            )) as RustSdkCryptoJs.DecryptedRoomEvent;\n\n            // Success. We can remove the event from the pending list, if\n            // that hasn't already happened.\n            this.removeEventFromPendingList(event);\n\n            return {\n                clearEvent: JSON.parse(res.event),\n                claimedEd25519Key: res.senderClaimedEd25519Key,\n                senderCurve25519Key: res.senderCurve25519Key,\n                forwardingCurve25519KeyChain: res.forwardingCurve25519KeyChain,\n            };\n        } catch (err) {\n            if (err instanceof RustSdkCryptoJs.MegolmDecryptionError) {\n                this.onMegolmDecryptionError(event, err, await this.perSessionBackupDownloader.getServerBackupInfo());\n            } else {\n                throw new DecryptionError(DecryptionFailureCode.UNKNOWN_ERROR, \"Unknown error\");\n            }\n        }\n    }\n\n    /**\n     * Handle a `MegolmDecryptionError` returned by the rust SDK.\n     *\n     * Fires off a request to the `perSessionBackupDownloader`, if appropriate, and then throws a `DecryptionError`.\n     *\n     * @param event - The event which could not be decrypted.\n     * @param err - The error from the Rust SDK.\n     * @param serverBackupInfo - Details about the current backup from the server. `null` if there is no backup.\n     *     `undefined` if our attempt to check failed.\n     */\n    private onMegolmDecryptionError(\n        event: MatrixEvent,\n        err: RustSdkCryptoJs.MegolmDecryptionError,\n        serverBackupInfo: KeyBackupInfo | null | undefined,\n    ): never {\n        const content = event.getWireContent();\n        const errorDetails = { sender_key: content.sender_key, session_id: content.session_id };\n\n        // If the error looks like it might be recoverable from backup, queue up a request to try that.\n        if (\n            err.code === RustSdkCryptoJs.DecryptionErrorCode.MissingRoomKey ||\n            err.code === RustSdkCryptoJs.DecryptionErrorCode.UnknownMessageIndex\n        ) {\n            this.perSessionBackupDownloader.onDecryptionKeyMissingError(event.getRoomId()!, content.session_id!);\n\n            // If the server is telling us our membership at the time the event\n            // was sent, and it isn't \"join\", we use a different error code.\n            const membership = event.getMembershipAtEvent();\n            if (membership && membership !== KnownMembership.Join && membership !== KnownMembership.Invite) {\n                throw new DecryptionError(\n                    DecryptionFailureCode.HISTORICAL_MESSAGE_USER_NOT_JOINED,\n                    \"This message was sent when we were not a member of the room.\",\n                    errorDetails,\n                );\n            }\n\n            // If the event was sent before this device was created, we use some different error codes.\n            if (event.getTs() <= this.olmMachine.deviceCreationTimeMs) {\n                if (serverBackupInfo === null) {\n                    throw new DecryptionError(\n                        DecryptionFailureCode.HISTORICAL_MESSAGE_NO_KEY_BACKUP,\n                        \"This message was sent before this device logged in, and there is no key backup on the server.\",\n                        errorDetails,\n                    );\n                } else if (!this.perSessionBackupDownloader.isKeyBackupDownloadConfigured()) {\n                    throw new DecryptionError(\n                        DecryptionFailureCode.HISTORICAL_MESSAGE_BACKUP_UNCONFIGURED,\n                        \"This message was sent before this device logged in, and key backup is not working.\",\n                        errorDetails,\n                    );\n                } else {\n                    throw new DecryptionError(\n                        DecryptionFailureCode.HISTORICAL_MESSAGE_WORKING_BACKUP,\n                        \"This message was sent before this device logged in. Key backup is working, but we still do not (yet) have the key.\",\n                        errorDetails,\n                    );\n                }\n            }\n        }\n\n        // If we got a withheld code, expose that.\n        if (err.maybe_withheld) {\n            // Unfortunately the Rust SDK API doesn't let us distinguish between different withheld cases, other than\n            // by string-matching.\n            const failureCode =\n                err.maybe_withheld === \"The sender has disabled encrypting to unverified devices.\"\n                    ? DecryptionFailureCode.MEGOLM_KEY_WITHHELD_FOR_UNVERIFIED_DEVICE\n                    : DecryptionFailureCode.MEGOLM_KEY_WITHHELD;\n            throw new DecryptionError(failureCode, err.maybe_withheld, errorDetails);\n        }\n\n        switch (err.code) {\n            case RustSdkCryptoJs.DecryptionErrorCode.MissingRoomKey:\n                throw new DecryptionError(\n                    DecryptionFailureCode.MEGOLM_UNKNOWN_INBOUND_SESSION_ID,\n                    \"The sender's device has not sent us the keys for this message.\",\n                    errorDetails,\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.UnknownMessageIndex:\n                throw new DecryptionError(\n                    DecryptionFailureCode.OLM_UNKNOWN_MESSAGE_INDEX,\n                    \"The sender's device has not sent us the keys for this message at this index.\",\n                    errorDetails,\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.SenderIdentityVerificationViolation:\n                // We're refusing to decrypt due to not trusting the sender,\n                // rather than failing to decrypt due to lack of keys, so we\n                // don't need to keep it on the pending list.\n                this.removeEventFromPendingList(event);\n                throw new DecryptionError(\n                    DecryptionFailureCode.SENDER_IDENTITY_PREVIOUSLY_VERIFIED,\n                    \"The sender identity is unverified, but was previously verified.\",\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.UnknownSenderDevice:\n                // We're refusing to decrypt due to not trusting the sender,\n                // rather than failing to decrypt due to lack of keys, so we\n                // don't need to keep it on the pending list.\n                this.removeEventFromPendingList(event);\n                throw new DecryptionError(\n                    DecryptionFailureCode.UNKNOWN_SENDER_DEVICE,\n                    \"The sender device is not known.\",\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.UnsignedSenderDevice:\n                // We're refusing to decrypt due to not trusting the sender,\n                // rather than failing to decrypt due to lack of keys, so we\n                // don't need to keep it on the pending list.\n                this.removeEventFromPendingList(event);\n                throw new DecryptionError(\n                    DecryptionFailureCode.UNSIGNED_SENDER_DEVICE,\n                    \"The sender identity is not cross-signed.\",\n                );\n\n            // We don't map MismatchedIdentityKeys for now, as there is no equivalent in legacy.\n            // Just put it on the `UNKNOWN_ERROR` bucket.\n            default:\n                throw new DecryptionError(DecryptionFailureCode.UNKNOWN_ERROR, err.description, errorDetails);\n        }\n    }\n\n    public async getEncryptionInfoForEvent(event: MatrixEvent): Promise<EventEncryptionInfo | null> {\n        if (!event.getClearContent() || event.isDecryptionFailure()) {\n            // not successfully decrypted\n            return null;\n        }\n\n        // special-case outgoing events, which the rust crypto-sdk will barf on\n        if (event.status !== null) {\n            return { shieldColour: EventShieldColour.NONE, shieldReason: null };\n        }\n\n        const encryptionInfo = await this.olmMachine.getRoomEventEncryptionInfo(\n            stringifyEvent(event),\n            new RustSdkCryptoJs.RoomId(event.getRoomId()!),\n        );\n\n        return rustEncryptionInfoToJsEncryptionInfo(this.logger, encryptionInfo);\n    }\n\n    /**\n     * Look for events which are waiting for a given megolm session\n     *\n     * Returns a list of events which were encrypted by `session` and could not be decrypted\n     */\n    public getEventsPendingRoomKey(roomId: string, sessionId: string): MatrixEvent[] {\n        const roomPendingEvents = this.eventsPendingKey.get(roomId);\n        if (!roomPendingEvents) return [];\n\n        const sessionPendingEvents = roomPendingEvents.get(sessionId);\n        if (!sessionPendingEvents) return [];\n\n        return [...sessionPendingEvents];\n    }\n\n    /**\n     * Add an event to the list of those awaiting their session keys.\n     */\n    private addEventToPendingList(event: MatrixEvent): void {\n        const roomId = event.getRoomId();\n        // We shouldn't have events without a room id here.\n        if (!roomId) return;\n\n        const roomPendingEvents = this.eventsPendingKey.getOrCreate(roomId);\n        const sessionPendingEvents = roomPendingEvents.getOrCreate(event.getWireContent().session_id);\n        sessionPendingEvents.add(event);\n    }\n\n    /**\n     * Remove an event from the list of those awaiting their session keys.\n     */\n    private removeEventFromPendingList(event: MatrixEvent): void {\n        const roomId = event.getRoomId();\n        if (!roomId) return;\n\n        const roomPendingEvents = this.eventsPendingKey.getOrCreate(roomId);\n        if (!roomPendingEvents) return;\n\n        const sessionPendingEvents = roomPendingEvents.get(event.getWireContent().session_id);\n        if (!sessionPendingEvents) return;\n\n        sessionPendingEvents.delete(event);\n\n        // also clean up the higher-level maps if they are now empty\n        if (sessionPendingEvents.size === 0) {\n            roomPendingEvents.delete(event.getWireContent().session_id);\n            if (roomPendingEvents.size === 0) {\n                this.eventsPendingKey.delete(roomId);\n            }\n        }\n    }\n}\n\nfunction stringifyEvent(event: MatrixEvent): string {\n    return JSON.stringify({\n        event_id: event.getId(),\n        type: event.getWireType(),\n        sender: event.getSender(),\n        state_key: event.getStateKey(),\n        content: event.getWireContent(),\n        origin_server_ts: event.getTs(),\n    });\n}\n\nfunction rustEncryptionInfoToJsEncryptionInfo(\n    logger: Logger,\n    encryptionInfo: RustSdkCryptoJs.EncryptionInfo | undefined,\n): EventEncryptionInfo | null {\n    if (encryptionInfo === undefined) {\n        // not decrypted here\n        return null;\n    }\n\n    // TODO: use strict shield semantics.\n    const shieldState = encryptionInfo.shieldState(false);\n\n    let shieldColour: EventShieldColour;\n    switch (shieldState.color) {\n        case RustSdkCryptoJs.ShieldColor.Grey:\n            shieldColour = EventShieldColour.GREY;\n            break;\n        case RustSdkCryptoJs.ShieldColor.None:\n            shieldColour = EventShieldColour.NONE;\n            break;\n        default:\n            shieldColour = EventShieldColour.RED;\n    }\n\n    let shieldReason: EventShieldReason | null;\n    switch (shieldState.code) {\n        case undefined:\n        case null:\n            shieldReason = null;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.AuthenticityNotGuaranteed:\n            shieldReason = EventShieldReason.AUTHENTICITY_NOT_GUARANTEED;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.UnknownDevice:\n            shieldReason = EventShieldReason.UNKNOWN_DEVICE;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.UnsignedDevice:\n            shieldReason = EventShieldReason.UNSIGNED_DEVICE;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.UnverifiedIdentity:\n            shieldReason = EventShieldReason.UNVERIFIED_IDENTITY;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.SentInClear:\n            shieldReason = EventShieldReason.SENT_IN_CLEAR;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.VerificationViolation:\n            shieldReason = EventShieldReason.VERIFICATION_VIOLATION;\n            break;\n    }\n\n    return { shieldColour, shieldReason };\n}\n\ntype CryptoEvents = (typeof CryptoEvent)[keyof typeof CryptoEvent];\ntype RustCryptoEvents = Exclude<CryptoEvents, CryptoEvent.LegacyCryptoStoreMigrationProgress>;\n","/*\nCopyright 2023-2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { Logger } from \"../logger.ts\";\nimport { CryptoStore, MigrationState, SecretStorePrivateKeys } from \"../crypto/store/base.ts\";\nimport { IndexedDBCryptoStore } from \"../crypto/store/indexeddb-crypto-store.ts\";\nimport { IHttpOpts, MatrixHttpApi } from \"../http-api/index.ts\";\nimport { requestKeyBackupVersion } from \"./backup.ts\";\nimport { CrossSigningKeyInfo, Curve25519AuthData } from \"../crypto-api/index.ts\";\nimport { RustCrypto } from \"./rust-crypto.ts\";\nimport { KeyBackupInfo } from \"../crypto-api/keybackup.ts\";\nimport { sleep } from \"../utils.ts\";\nimport { encodeBase64 } from \"../base64.ts\";\nimport decryptAESSecretStorageItem from \"../utils/decryptAESSecretStorageItem.ts\";\nimport { AESEncryptedSecretStoragePayload } from \"../@types/AESEncryptedSecretStoragePayload.ts\";\n\ninterface LegacyRoomEncryption {\n    algorithm: string;\n    rotation_period_ms?: number;\n    rotation_period_msgs?: number;\n}\n\n/**\n * Determine if any data needs migrating from the legacy store, and do so.\n *\n * This migrates the base account data, and olm and megolm sessions. It does *not* migrate the room list, which should\n * happen after an `OlmMachine` is created, via {@link migrateRoomSettingsFromLegacyCrypto}.\n *\n * @param args - Arguments object.\n */\nexport async function migrateFromLegacyCrypto(args: {\n    /** A `Logger` instance that will be used for debug output. */\n    logger: Logger;\n\n    /**\n     * Low-level HTTP interface: used to make outgoing requests required by the rust SDK.\n     * We expect it to set the access token, etc.\n     */\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>;\n\n    /** Store to migrate data from. */\n    legacyStore: CryptoStore;\n\n    /** Pickle key for `legacyStore`. */\n    legacyPickleKey?: string;\n\n    /** Local user's User ID. */\n    userId: string;\n\n    /** Local user's Device ID. */\n    deviceId: string;\n\n    /** Rust crypto store to migrate data into. */\n    storeHandle: RustSdkCryptoJs.StoreHandle;\n\n    /**\n     * A callback which will receive progress updates on migration from `legacyStore`.\n     *\n     * Called with (-1, -1) to mark the end of migration.\n     */\n    legacyMigrationProgressListener?: (progress: number, total: number) => void;\n}): Promise<void> {\n    const { logger, legacyStore } = args;\n\n    // initialise the rust matrix-sdk-crypto-wasm, if it hasn't already been done\n    await RustSdkCryptoJs.initAsync();\n\n    // enable tracing in the rust-sdk\n    new RustSdkCryptoJs.Tracing(RustSdkCryptoJs.LoggerLevel.Debug).turnOn();\n\n    if (!(await legacyStore.containsData())) {\n        // This store was never used. Nothing to migrate.\n        return;\n    }\n\n    await legacyStore.startup();\n\n    let accountPickle: string | null = null;\n    await legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_ACCOUNT], (txn) => {\n        legacyStore.getAccount(txn, (acctPickle) => {\n            accountPickle = acctPickle;\n        });\n    });\n    if (!accountPickle) {\n        // This store is not properly set up. Nothing to migrate.\n        logger.debug(\"Legacy crypto store is not set up (no account found). Not migrating.\");\n        return;\n    }\n\n    let migrationState = await legacyStore.getMigrationState();\n\n    if (migrationState >= MigrationState.MEGOLM_SESSIONS_MIGRATED) {\n        // All migration is done for now. The room list comes later, once we have an OlmMachine.\n        return;\n    }\n\n    const nOlmSessions = await countOlmSessions(logger, legacyStore);\n    const nMegolmSessions = await countMegolmSessions(logger, legacyStore);\n    const totalSteps = 1 + nOlmSessions + nMegolmSessions;\n    logger.info(\n        `Migrating data from legacy crypto store. ${nOlmSessions} olm sessions and ${nMegolmSessions} megolm sessions to migrate.`,\n    );\n\n    let stepsDone = 0;\n    function onProgress(steps: number): void {\n        stepsDone += steps;\n        args.legacyMigrationProgressListener?.(stepsDone, totalSteps);\n    }\n    onProgress(0);\n\n    const pickleKey = new TextEncoder().encode(args.legacyPickleKey);\n\n    if (migrationState === MigrationState.NOT_STARTED) {\n        logger.info(\"Migrating data from legacy crypto store. Step 1: base data\");\n        await migrateBaseData(args.http, args.userId, args.deviceId, legacyStore, pickleKey, args.storeHandle, logger);\n\n        migrationState = MigrationState.INITIAL_DATA_MIGRATED;\n        await legacyStore.setMigrationState(migrationState);\n    }\n    onProgress(1);\n\n    if (migrationState === MigrationState.INITIAL_DATA_MIGRATED) {\n        logger.info(\n            `Migrating data from legacy crypto store. Step 2: olm sessions (${nOlmSessions} sessions to migrate).`,\n        );\n        await migrateOlmSessions(logger, legacyStore, pickleKey, args.storeHandle, onProgress);\n\n        migrationState = MigrationState.OLM_SESSIONS_MIGRATED;\n        await legacyStore.setMigrationState(migrationState);\n    }\n\n    if (migrationState === MigrationState.OLM_SESSIONS_MIGRATED) {\n        logger.info(\n            `Migrating data from legacy crypto store. Step 3: megolm sessions (${nMegolmSessions} sessions to migrate).`,\n        );\n        await migrateMegolmSessions(logger, legacyStore, pickleKey, args.storeHandle, onProgress);\n\n        migrationState = MigrationState.MEGOLM_SESSIONS_MIGRATED;\n        await legacyStore.setMigrationState(migrationState);\n    }\n\n    // Migration is done.\n    args.legacyMigrationProgressListener?.(-1, -1);\n    logger.info(\"Migration from legacy crypto store complete\");\n}\n\nasync function migrateBaseData(\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n    userId: string,\n    deviceId: string,\n    legacyStore: CryptoStore,\n    pickleKey: Uint8Array,\n    storeHandle: RustSdkCryptoJs.StoreHandle,\n    logger: Logger,\n): Promise<void> {\n    const migrationData = new RustSdkCryptoJs.BaseMigrationData();\n    migrationData.userId = new RustSdkCryptoJs.UserId(userId);\n    migrationData.deviceId = new RustSdkCryptoJs.DeviceId(deviceId);\n\n    await legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_ACCOUNT], (txn) =>\n        legacyStore.getAccount(txn, (a) => {\n            migrationData.pickledAccount = a ?? \"\";\n        }),\n    );\n\n    const recoveryKey = await getAndDecryptCachedSecretKey(legacyStore, pickleKey, \"m.megolm_backup.v1\");\n\n    // If we have a backup recovery key, we need to try to figure out which backup version it is for.\n    // All we can really do is ask the server for the most recent version and check if the cached key we have matches.\n    // It is possible that the backup has changed since last time his session was opened.\n    if (recoveryKey) {\n        let backupCallDone = false;\n        let backupInfo: KeyBackupInfo | null = null;\n        while (!backupCallDone) {\n            try {\n                backupInfo = await requestKeyBackupVersion(http);\n                backupCallDone = true;\n            } catch (e) {\n                logger.info(\"Failed to get backup version during migration, retrying in 2 seconds\", e);\n                // Retry until successful, use simple constant delay\n                await sleep(2000);\n            }\n        }\n        if (backupInfo && backupInfo.algorithm == \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n            // check if the recovery key matches, as the active backup version may have changed since the key was cached\n            // and the migration started.\n            try {\n                const decryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(recoveryKey);\n                const publicKey = (backupInfo.auth_data as Curve25519AuthData)?.public_key;\n                const isValid = decryptionKey.megolmV1PublicKey.publicKeyBase64 == publicKey;\n                if (isValid) {\n                    migrationData.backupVersion = backupInfo.version;\n                    migrationData.backupRecoveryKey = recoveryKey;\n                } else {\n                    logger.debug(\n                        \"The backup key to migrate does not match the active backup version\",\n                        `Cached pub key: ${decryptionKey.megolmV1PublicKey.publicKeyBase64}`,\n                        `Active pub key: ${publicKey}`,\n                    );\n                }\n            } catch (e) {\n                logger.warn(\"Failed to check if the backup key to migrate matches the active backup version\", e);\n            }\n        }\n    }\n\n    migrationData.privateCrossSigningMasterKey = await getAndDecryptCachedSecretKey(legacyStore, pickleKey, \"master\");\n    migrationData.privateCrossSigningSelfSigningKey = await getAndDecryptCachedSecretKey(\n        legacyStore,\n        pickleKey,\n        \"self_signing\",\n    );\n    migrationData.privateCrossSigningUserSigningKey = await getAndDecryptCachedSecretKey(\n        legacyStore,\n        pickleKey,\n        \"user_signing\",\n    );\n    await RustSdkCryptoJs.Migration.migrateBaseData(migrationData, pickleKey, storeHandle);\n}\n\nasync function countOlmSessions(logger: Logger, legacyStore: CryptoStore): Promise<number> {\n    logger.debug(\"Counting olm sessions to be migrated\");\n    let nSessions: number;\n    await legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_SESSIONS], (txn) =>\n        legacyStore.countEndToEndSessions(txn, (n) => (nSessions = n)),\n    );\n    return nSessions!;\n}\n\nasync function countMegolmSessions(logger: Logger, legacyStore: CryptoStore): Promise<number> {\n    logger.debug(\"Counting megolm sessions to be migrated\");\n    return await legacyStore.countEndToEndInboundGroupSessions();\n}\n\nasync function migrateOlmSessions(\n    logger: Logger,\n    legacyStore: CryptoStore,\n    pickleKey: Uint8Array,\n    storeHandle: RustSdkCryptoJs.StoreHandle,\n    onBatchDone: (batchSize: number) => void,\n): Promise<void> {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const batch = await legacyStore.getEndToEndSessionsBatch();\n        if (batch === null) return;\n\n        logger.debug(`Migrating batch of ${batch.length} olm sessions`);\n        const migrationData: RustSdkCryptoJs.PickledSession[] = [];\n        for (const session of batch) {\n            const pickledSession = new RustSdkCryptoJs.PickledSession();\n            pickledSession.senderKey = session.deviceKey!;\n            pickledSession.pickle = session.session!;\n            pickledSession.lastUseTime = pickledSession.creationTime = new Date(session.lastReceivedMessageTs!);\n            migrationData.push(pickledSession);\n        }\n\n        await RustSdkCryptoJs.Migration.migrateOlmSessions(migrationData, pickleKey, storeHandle);\n        await legacyStore.deleteEndToEndSessionsBatch(batch);\n        onBatchDone(batch.length);\n    }\n}\n\nasync function migrateMegolmSessions(\n    logger: Logger,\n    legacyStore: CryptoStore,\n    pickleKey: Uint8Array,\n    storeHandle: RustSdkCryptoJs.StoreHandle,\n    onBatchDone: (batchSize: number) => void,\n): Promise<void> {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const batch = await legacyStore.getEndToEndInboundGroupSessionsBatch();\n        if (batch === null) return;\n\n        logger.debug(`Migrating batch of ${batch.length} megolm sessions`);\n        const migrationData: RustSdkCryptoJs.PickledInboundGroupSession[] = [];\n        for (const session of batch) {\n            const sessionData = session.sessionData!;\n\n            const pickledSession = new RustSdkCryptoJs.PickledInboundGroupSession();\n            pickledSession.pickle = sessionData.session;\n            pickledSession.roomId = new RustSdkCryptoJs.RoomId(sessionData.room_id);\n            pickledSession.senderKey = session.senderKey;\n            pickledSession.senderSigningKey = sessionData.keysClaimed?.[\"ed25519\"];\n            pickledSession.backedUp = !session.needsBackup;\n\n            // The Rust SDK `imported` flag is used to indicate the authenticity status of a Megolm\n            // session, which tells us whether we can reliably tell which Olm device is the owner\n            // (creator) of the session.\n            //\n            // If `imported` is true, then we have no cryptographic proof that the session is owned\n            // by the device with the identity key `senderKey`.\n            //\n            // Only Megolm sessions received directly from the owning device via an encrypted\n            // `m.room_key` to-device message should have `imported` flag set to false. Megolm\n            // sessions received by any other currently available means (i.e. from a\n            // `m.forwarded_room_key`, from v1 asymmetric server-side key backup, imported from a\n            // file, etc) should have the `imported` flag set to true.\n            //\n            // Messages encrypted with such Megolm sessions will have a grey shield in the UI\n            // (\"Authenticity of this message cannot be guaranteed\").\n            //\n            // However, we don't want to bluntly mark all sessions as `imported` during migration\n            // because users will suddenly start seeing all their historic messages decorated with a\n            // grey shield, which would be seen as a non-actionable regression.\n            //\n            // In the legacy crypto stack, the flag encoding similar information was called\n            // `InboundGroupSessionData.untrusted`. The value of this flag was set as follows:\n            //\n            // - For outbound Megolm sessions created by our own device, `untrusted` is `undefined`.\n            // - For Megolm sessions received via a `m.room_key` to-device message, `untrusted` is\n            //   `undefined`.\n            // - For Megolm sessions received via a `m.forwarded_room_key` to-device message,\n            //   `untrusted` is `true`.\n            // - For Megolm sessions imported from a (v1 asymmetric / \"legacy\") server-side key\n            //   backup, `untrusted` is `true`.\n            // - For Megolm sessions imported from a file, untrusted is `undefined`.\n            //\n            // The main difference between the legacy crypto stack and the Rust crypto stack is that\n            // the Rust stack considers sessions imported from a file as `imported` (not\n            // authenticated). This is because the Megolm session export file format does not\n            // encode this authenticity information.\n            //\n            // Given this migration is only a one-time thing, we make a concession to accept the\n            // loss of information in this case, to avoid degrading UX in a non-actionable way.\n            pickledSession.imported = sessionData.untrusted === true;\n\n            migrationData.push(pickledSession);\n        }\n\n        await RustSdkCryptoJs.Migration.migrateMegolmSessions(migrationData, pickleKey, storeHandle);\n        await legacyStore.deleteEndToEndInboundGroupSessionsBatch(batch);\n        onBatchDone(batch.length);\n    }\n}\n\n/**\n * Determine if any room settings need migrating from the legacy store, and do so.\n *\n * @param args - Arguments object.\n */\nexport async function migrateRoomSettingsFromLegacyCrypto({\n    logger,\n    legacyStore,\n    olmMachine,\n}: {\n    /** A `Logger` instance that will be used for debug output. */\n    logger: Logger;\n\n    /** Store to migrate data from. */\n    legacyStore: CryptoStore;\n\n    /** OlmMachine to store the new data on. */\n    olmMachine: RustSdkCryptoJs.OlmMachine;\n}): Promise<void> {\n    if (!(await legacyStore.containsData())) {\n        // This store was never used. Nothing to migrate.\n        return;\n    }\n\n    const migrationState = await legacyStore.getMigrationState();\n\n    if (migrationState >= MigrationState.ROOM_SETTINGS_MIGRATED) {\n        // We've already migrated the room settings.\n        return;\n    }\n\n    let rooms: Record<string, LegacyRoomEncryption> = {};\n\n    await legacyStore.doTxn(\"readwrite\", [IndexedDBCryptoStore.STORE_ROOMS], (txn) => {\n        legacyStore.getEndToEndRooms(txn, (result) => {\n            rooms = result;\n        });\n    });\n\n    logger.debug(`Migrating ${Object.keys(rooms).length} sets of room settings`);\n    for (const [roomId, legacySettings] of Object.entries(rooms)) {\n        try {\n            const rustSettings = new RustSdkCryptoJs.RoomSettings();\n\n            if (legacySettings.algorithm !== \"m.megolm.v1.aes-sha2\") {\n                logger.warn(`Room ${roomId}: ignoring room with invalid algorithm ${legacySettings.algorithm}`);\n                continue;\n            }\n            rustSettings.algorithm = RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2;\n            rustSettings.sessionRotationPeriodMs = legacySettings.rotation_period_ms;\n            rustSettings.sessionRotationPeriodMessages = legacySettings.rotation_period_msgs;\n            await olmMachine.setRoomSettings(new RustSdkCryptoJs.RoomId(roomId), rustSettings);\n\n            // We don't attempt to clear out the settings from the old store, or record where we've gotten up to,\n            // which means that if the app gets restarted while we're in the middle of this migration, we'll start\n            // again from scratch. So be it. Given that legacy crypto loads the whole room list into memory on startup\n            // anyway, we know it can't be that big.\n        } catch (e) {\n            logger.warn(`Room ${roomId}: ignoring settings ${JSON.stringify(legacySettings)} which caused error ${e}`);\n        }\n    }\n\n    logger.debug(`Completed room settings migration`);\n    await legacyStore.setMigrationState(MigrationState.ROOM_SETTINGS_MIGRATED);\n}\n\nasync function getAndDecryptCachedSecretKey(\n    legacyStore: CryptoStore,\n    legacyPickleKey: Uint8Array,\n    name: string,\n): Promise<string | undefined> {\n    const key = await new Promise<any>((resolve) => {\n        legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_ACCOUNT], (txn) => {\n            legacyStore.getSecretStorePrivateKey(txn, resolve, name as keyof SecretStorePrivateKeys);\n        });\n    });\n\n    if (key && key.ciphertext && key.iv && key.mac) {\n        return await decryptAESSecretStorageItem(key as AESEncryptedSecretStoragePayload, legacyPickleKey, name);\n    } else if (key instanceof Uint8Array) {\n        // This is a legacy backward compatibility case where the key was stored in clear.\n        return encodeBase64(key);\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Check if the user's published identity (ie, public cross-signing keys) was trusted by the legacy session,\n * and if so mark it as trusted in the Rust session if needed.\n *\n * By default, if the legacy session didn't have the private MSK, the migrated session will revert to unverified,\n * even if the user has verified the session in the past.\n *\n * This only occurs if the private MSK was not cached in the crypto store (USK and SSK private keys won't help\n * to establish trust: the trust is rooted in the MSK).\n *\n * Rust crypto will only consider the current session as trusted if we import the private MSK itself.\n *\n * We could prompt the user to verify the session again, but it's probably better to just mark the user identity\n * as locally verified if it was before.\n *\n * See https://github.com/element-hq/element-web/issues/27079\n *\n * @param args - Argument object.\n */\nexport async function migrateLegacyLocalTrustIfNeeded(args: {\n    /** The legacy crypto store that is migrated. */\n    legacyCryptoStore: CryptoStore;\n    /** The migrated rust crypto stack. */\n    rustCrypto: RustCrypto;\n    /** The logger to use */\n    logger: Logger;\n}): Promise<void> {\n    const { legacyCryptoStore, rustCrypto, logger } = args;\n    // Get the public cross-signing identity from rust.\n    const rustOwnIdentity = await rustCrypto.getOwnIdentity();\n    if (!rustOwnIdentity) {\n        // There are no cross-signing keys published server side, so nothing to do here.\n        return;\n    }\n    if (rustOwnIdentity.isVerified()) {\n        // The rust session already trusts the keys, so again, nothing to do.\n        return;\n    }\n\n    const legacyLocallyTrustedMSK = await getLegacyTrustedPublicMasterKeyBase64(legacyCryptoStore);\n    if (!legacyLocallyTrustedMSK) {\n        // The user never verified their identity in the legacy session, so nothing to do.\n        return;\n    }\n\n    const mskInfo: CrossSigningKeyInfo = JSON.parse(rustOwnIdentity.masterKey);\n    if (!mskInfo.keys || Object.keys(mskInfo.keys).length === 0) {\n        // This should not happen, but let's be safe\n        logger.error(\"Post Migration | Unexpected error: no master key in the rust session.\");\n        return;\n    }\n    const rustSeenMSK = Object.values(mskInfo.keys)[0];\n\n    if (rustSeenMSK && rustSeenMSK == legacyLocallyTrustedMSK) {\n        logger.info(`Post Migration: Migrating legacy trusted MSK: ${legacyLocallyTrustedMSK} to locally verified.`);\n        // Let's mark the user identity as locally verified as part of the migration.\n        await rustOwnIdentity!.verify();\n        // As well as marking the MSK as trusted, `OlmMachine.verify` returns a\n        // `SignatureUploadRequest` which will publish a signature of the MSK using\n        // this device. In this case, we ignore the request: since the user hasn't\n        // actually re-verified the MSK, we don't publish a new signature. (`.verify`\n        // doesn't store the signature, and if we drop the request here it won't be\n        // retried.)\n        //\n        // Not publishing the signature is consistent with the behaviour of\n        // matrix-crypto-sdk when the private key is imported via\n        // `importCrossSigningKeys`, and when the identity is verified via interactive\n        // verification.\n        //\n        // [Aside: device signatures on the MSK are not considered by the rust-sdk to\n        // establish the trust of the user identity so in any case, what we actually do\n        // here is somewhat moot.]\n    }\n}\n\n/**\n * Checks if the legacy store has a trusted public master key, and returns it if so.\n *\n * @param legacyStore - The legacy store to check.\n *\n * @returns `null` if there were no cross signing keys or if they were not trusted. The trusted public master key if it was.\n */\nasync function getLegacyTrustedPublicMasterKeyBase64(legacyStore: CryptoStore): Promise<string | null> {\n    let maybeTrustedKeys: string | null = null;\n    await legacyStore.doTxn(\"readonly\", \"account\", (txn) => {\n        legacyStore.getCrossSigningKeys(txn, (keys) => {\n            // can be an empty object after resetting cross-signing keys, see storeTrustedSelfKeys\n            const msk = keys?.master;\n            if (msk && Object.keys(msk.keys).length != 0) {\n                // `msk.keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n                maybeTrustedKeys = Object.values(msk.keys)[0];\n            }\n        });\n    });\n\n    return maybeTrustedKeys;\n}\n","/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { StoreHandle } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { RustCrypto } from \"./rust-crypto.ts\";\nimport { IHttpOpts, MatrixHttpApi } from \"../http-api/index.ts\";\nimport { ServerSideSecretStorage } from \"../secret-storage.ts\";\nimport { Logger } from \"../logger.ts\";\nimport { CryptoStore, MigrationState } from \"../crypto/store/base.ts\";\nimport {\n    migrateFromLegacyCrypto,\n    migrateLegacyLocalTrustIfNeeded,\n    migrateRoomSettingsFromLegacyCrypto,\n} from \"./libolm_migration.ts\";\nimport { CryptoCallbacks } from \"../crypto-api/index.ts\";\n\n/**\n * Create a new `RustCrypto` implementation\n *\n * @param args - Parameter object\n * @internal\n */\nexport async function initRustCrypto(args: {\n    /** A `Logger` instance that will be used for debug output. */\n    logger: Logger;\n\n    /**\n     * Low-level HTTP interface: used to make outgoing requests required by the rust SDK.\n     * We expect it to set the access token, etc.\n     */\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>;\n\n    /** The local user's User ID. */\n    userId: string;\n\n    /** The local user's Device ID. */\n    deviceId: string;\n\n    /** Interface to server-side secret storage. */\n    secretStorage: ServerSideSecretStorage;\n\n    /** Crypto callbacks provided by the application. */\n    cryptoCallbacks: CryptoCallbacks;\n\n    /**\n     * The prefix to use on the indexeddbs created by rust-crypto.\n     * If `null`, a memory store will be used.\n     */\n    storePrefix: string | null;\n\n    /**\n     * A passphrase to use to encrypt the indexeddb created by rust-crypto.\n     *\n     * Ignored if `storePrefix` is null, or `storeKey` is set.  If neither this nor `storeKey` is set\n     * (and `storePrefix` is not null), the indexeddb will be unencrypted.\n     */\n    storePassphrase?: string;\n\n    /**\n     * A key to use to encrypt the indexeddb created by rust-crypto.\n     *\n     * Ignored if `storePrefix` is null. Otherwise, if it is set, it must be a 32-byte cryptographic key, which\n     * will be used to encrypt the indexeddb. See also `storePassphrase`.\n     */\n    storeKey?: Uint8Array;\n\n    /** If defined, we will check if any data needs migrating from this store to the rust store. */\n    legacyCryptoStore?: CryptoStore;\n\n    /** The pickle key for `legacyCryptoStore` */\n    legacyPickleKey?: string;\n\n    /**\n     * A callback which will receive progress updates on migration from `legacyCryptoStore`.\n     *\n     * Called with (-1, -1) to mark the end of migration.\n     */\n    legacyMigrationProgressListener?: (progress: number, total: number) => void;\n}): Promise<RustCrypto> {\n    const { logger } = args;\n\n    // initialise the rust matrix-sdk-crypto-wasm, if it hasn't already been done\n    logger.debug(\"Initialising Rust crypto-sdk WASM artifact\");\n    await RustSdkCryptoJs.initAsync();\n\n    // enable tracing in the rust-sdk\n    new RustSdkCryptoJs.Tracing(RustSdkCryptoJs.LoggerLevel.Debug).turnOn();\n\n    logger.debug(\"Opening Rust CryptoStore\");\n    let storeHandle;\n    if (args.storePrefix) {\n        if (args.storeKey) {\n            storeHandle = await StoreHandle.openWithKey(args.storePrefix, args.storeKey);\n        } else {\n            storeHandle = await StoreHandle.open(args.storePrefix, args.storePassphrase);\n        }\n    } else {\n        storeHandle = await StoreHandle.open();\n    }\n\n    if (args.legacyCryptoStore) {\n        // We have a legacy crypto store, which we may need to migrate from.\n        await migrateFromLegacyCrypto({\n            legacyStore: args.legacyCryptoStore,\n            storeHandle,\n            ...args,\n        });\n    }\n\n    const rustCrypto = await initOlmMachine(\n        logger,\n        args.http,\n        args.userId,\n        args.deviceId,\n        args.secretStorage,\n        args.cryptoCallbacks,\n        storeHandle,\n        args.legacyCryptoStore,\n    );\n\n    storeHandle.free();\n\n    logger.debug(\"Completed rust crypto-sdk setup\");\n    return rustCrypto;\n}\n\nasync function initOlmMachine(\n    logger: Logger,\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n    userId: string,\n    deviceId: string,\n    secretStorage: ServerSideSecretStorage,\n    cryptoCallbacks: CryptoCallbacks,\n    storeHandle: StoreHandle,\n    legacyCryptoStore?: CryptoStore,\n): Promise<RustCrypto> {\n    logger.debug(\"Init OlmMachine\");\n\n    const olmMachine = await RustSdkCryptoJs.OlmMachine.initFromStore(\n        new RustSdkCryptoJs.UserId(userId),\n        new RustSdkCryptoJs.DeviceId(deviceId),\n        storeHandle,\n    );\n\n    // A final migration step, now that we have an OlmMachine.\n    if (legacyCryptoStore) {\n        await migrateRoomSettingsFromLegacyCrypto({\n            logger,\n            legacyStore: legacyCryptoStore,\n            olmMachine,\n        });\n    }\n\n    // Disable room key requests, per https://github.com/vector-im/element-web/issues/26524.\n    olmMachine.roomKeyRequestsEnabled = false;\n\n    const rustCrypto = new RustCrypto(logger, olmMachine, http, userId, deviceId, secretStorage, cryptoCallbacks);\n\n    await olmMachine.registerRoomKeyUpdatedCallback((sessions: RustSdkCryptoJs.RoomKeyInfo[]) =>\n        rustCrypto.onRoomKeysUpdated(sessions),\n    );\n    await olmMachine.registerRoomKeysWithheldCallback((withheld: RustSdkCryptoJs.RoomKeyWithheldInfo[]) =>\n        rustCrypto.onRoomKeysWithheld(withheld),\n    );\n    await olmMachine.registerUserIdentityUpdatedCallback((userId: RustSdkCryptoJs.UserId) =>\n        rustCrypto.onUserIdentityUpdated(userId),\n    );\n    await olmMachine.registerDevicesUpdatedCallback((userIds: string[]) => rustCrypto.onDevicesUpdated(userIds));\n\n    // Check if there are any key backup secrets pending processing. There may be multiple secrets to process if several devices have gossiped them.\n    // The `registerReceiveSecretCallback` function will only be triggered for new secrets. If the client is restarted before processing them, the secrets will need to be manually handled.\n    rustCrypto.checkSecrets(\"m.megolm_backup.v1\");\n\n    // Register a callback to be notified when a new secret is received, as for now only the key backup secret is supported (the cross signing secrets are handled automatically by the OlmMachine)\n    await olmMachine.registerReceiveSecretCallback((name: string, _value: string) =>\n        // Instead of directly checking the secret value, we poll the inbox to get all values for that secret type.\n        // Once we have all the values, we can safely clear the secret inbox.\n        rustCrypto.checkSecrets(name),\n    );\n\n    // Tell the OlmMachine to think about its outgoing requests before we hand control back to the application.\n    //\n    // This is primarily a fudge to get it to correctly populate the `users_for_key_query` list, so that future\n    // calls to getIdentity (etc) block until the key queries are performed.\n    //\n    // Note that we don't actually need to *make* any requests here; it is sufficient to tell the Rust side to think\n    // about them.\n    //\n    // XXX: find a less hacky way to do this.\n    await olmMachine.outgoingRequests();\n\n    if (legacyCryptoStore && (await legacyCryptoStore.containsData())) {\n        const migrationState = await legacyCryptoStore.getMigrationState();\n        if (migrationState < MigrationState.INITIAL_OWN_KEY_QUERY_DONE) {\n            logger.debug(`Performing initial key query after migration`);\n            // We need to do an initial keys query so that the rust stack can properly update trust of\n            // the user device and identity from the migrated private keys.\n            // If not done, there is a short period where the own device/identity trust will be undefined after migration.\n            let initialKeyQueryDone = false;\n            while (!initialKeyQueryDone) {\n                try {\n                    await rustCrypto.userHasCrossSigningKeys(userId);\n                    initialKeyQueryDone = true;\n                } catch (e) {\n                    // If the initial key query fails, we retry until it succeeds.\n                    logger.error(\"Failed to check for cross-signing keys after migration, retrying\", e);\n                }\n            }\n\n            // If the private master cross-signing key was not cached in the legacy store, the rust session\n            // will not be able to establish the trust of the user identity.\n            // That means that after migration the session could revert to unverified.\n            // In order to avoid asking the users to re-verify their sessions, we need to migrate the legacy local trust\n            // (if the legacy session was already verified) to the new session.\n            await migrateLegacyLocalTrustIfNeeded({ legacyCryptoStore, rustCrypto, logger });\n\n            await legacyCryptoStore.setMigrationState(MigrationState.INITIAL_OWN_KEY_QUERY_DONE);\n        }\n    }\n\n    return rustCrypto;\n}\n"],"names":["wasm","__wbg_set_wasm","val","WASM_VECTOR_LEN","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","lTextEncoder","TextEncoder","module","require","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","ptr","subarray","len","mem","offset","code","charCodeAt","slice","ret","cachedDataViewMemory0","getDataViewMemory0","detached","DataView","addToExternrefTable0","obj","idx","__externref_table_alloc","__wbindgen_export_4","handleError","f","args","apply","this","e","__wbindgen_exn_store","lTextDecoder","TextDecoder","cachedTextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","isLikeNone","x","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_6","get","dtor","a","b","makeMutClosure","arg0","arg1","cnt","real","original","makeClosure","debugString","type","description","name","Array","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","passArray8ToWasm0","takeFromExternrefTable0","value","__externref_table_dealloc","_assertClass","instance","klass","getArrayU8FromWasm0","passArrayJsValueToWasm0","array","setUint32","getArrayJsValueFromWasm0","result","push","getUint32","__externref_drop_slice","cachedUint16ArrayMemory0","getUint16ArrayMemory0","Uint16Array","getArrayU16FromWasm0","getVersions","Versions","__wrap","start","__wbg_adapter_58","arg2","closure29_externref_shim_multivalue_shim","__wbg_adapter_61","_dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__heca5c4426cc7e703","__wbg_adapter_64","closure735_externref_shim","__wbg_adapter_67","closure415_externref_shim","__wbg_adapter_70","_dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h41d552962a79dfb4","__wbg_adapter_758","arg3","closure431_externref_shim","DecryptionErrorCode","Object","freeze","MissingRoomKey","UnknownMessageIndex","MismatchedIdentityKeys","UnknownSenderDevice","UnsignedSenderDevice","SenderIdentityVerificationViolation","UnableToDecrypt","DeviceKeyAlgorithmName","Ed25519","Curve25519","Unknown","DeviceKeyName","EncryptionAlgorithm","OlmV1Curve25519AesSha2","MegolmV1AesSha2","HistoryVisibility","Invited","Joined","Shared","WorldReadable","LocalTrust","Verified","BlackListed","Ignored","Unset","LoggerLevel","Trace","Debug","Info","Warn","QrCodeMode","Login","Reciprocate","QrState","Created","Scanned","Confirmed","Reciprocated","Done","Cancelled","RequestType","KeysUpload","KeysQuery","KeysClaim","ToDevice","SignatureUpload","RoomMessage","KeysBackup","ShieldColor","Red","Grey","None","ShieldStateCode","AuthenticityNotGuaranteed","UnknownDevice","UnsignedDevice","UnverifiedIdentity","SentInClear","VerificationViolation","SignatureState","Missing","Invalid","ValidButNotTrusted","ValidAndTrusted","TrustRequirement","Untrusted","CrossSignedOrLegacy","CrossSigned","VerificationMethod","SasV1","QrCodeScanV1","QrCodeShowV1","ReciprocateV1","VerificationRequestPhase","Requested","Ready","Transitioned","__wbindgen_enum_IdbRequestReadyState","__wbindgen_enum_IdbTransactionMode","AttachmentFinalization","__wbg_attachment_free","Attachment","__destroy_into_raw","__wbg_ptr","free","encrypt","ptr0","__wbindgen_malloc","len0","attachment_encrypt","EncryptedAttachment","decrypt","attachment","attachment_decrypt","v1","__wbindgen_free","BackupDecryptionKeyFinalization","__wbg_backupdecryptionkey_free","BackupDecryptionKey","create","prototype","createRandomKey","backupdecryptionkey_createRandomKey","fromBase64","key","__wbindgen_realloc","backupdecryptionkey_fromBase64","toBase64","backupdecryptionkey_toBase64","megolmV1PublicKey","backupdecryptionkey_megolmV1PublicKey","MegolmV1BackupKey","decryptV1","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","backupdecryptionkey_decryptV1","ptr4","len4","BackupKeysFinalization","__wbg_backupkeys_free","BackupKeys","decryptionKey","__wbg_get_backupkeys_decryptionKey","__wbg_set_backupkeys_decryptionKey","backupVersion","__wbg_get_backupkeys_backupVersion","__wbg_set_backupkeys_backupVersion","decryptionKeyBase64","backupkeys_decryptionKeyBase64","BackupSecretsBundleFinalization","__wbg_backupsecretsbundle_free","BackupSecretsBundle","deferred1_0","deferred1_1","__wbg_get_backupsecretsbundle_key","__wbg_set_backupsecretsbundle_key","backup_version","__wbg_get_backupsecretsbundle_backup_version","__wbg_set_backupsecretsbundle_backup_version","BaseMigrationDataFinalization","__wbg_basemigrationdata_free","BaseMigrationData","userId","__wbg_get_basemigrationdata_userId","UserId","__wbg_set_basemigrationdata_userId","deviceId","__wbg_get_basemigrationdata_deviceId","DeviceId","__wbg_set_basemigrationdata_deviceId","pickledAccount","__wbg_get_basemigrationdata_pickledAccount","__wbg_get_basemigrationdata_backupVersion","__wbg_set_basemigrationdata_backupVersion","backupRecoveryKey","__wbg_get_basemigrationdata_backupRecoveryKey","__wbg_set_basemigrationdata_backupRecoveryKey","privateCrossSigningMasterKey","__wbg_get_basemigrationdata_privateCrossSigningMasterKey","__wbg_set_basemigrationdata_privateCrossSigningMasterKey","privateCrossSigningSelfSigningKey","__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey","__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey","privateCrossSigningUserSigningKey","__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey","__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey","constructor","basemigrationdata_new","CancelInfoFinalization","__wbg_cancelinfo_free","CancelInfo","reason","cancelinfo_reason","cancelCode","cancelinfo_cancelCode","cancelledbyUs","cancelinfo_cancelledbyUs","CheckCodeFinalization","__wbg_checkcode_free","CheckCode","as_bytes","checkcode_as_bytes","to_digit","checkcode_to_digit","CollectStrategyFinalization","__wbg_collectstrategy_free","CollectStrategy","eq","other","collectstrategy_eq","deviceBasedStrategy","only_allow_trusted_devices","error_on_verified_user_problem","collectstrategy_deviceBasedStrategy","identityBasedStrategy","collectstrategy_identityBasedStrategy","CrossSigningBootstrapRequestsFinalization","__wbg_crosssigningbootstraprequests_free","CrossSigningBootstrapRequests","uploadKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadKeysRequest","uploadSigningKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest","UploadSigningKeysRequest","uploadSignaturesRequest","__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","__wbg_crosssigningkeyexport_free","CrossSigningKeyExport","masterKey","crosssigningkeyexport_masterKey","self_signing_key","crosssigningkeyexport_self_signing_key","userSigningKey","crosssigningkeyexport_userSigningKey","CrossSigningStatusFinalization","__wbg_crosssigningstatus_free","CrossSigningStatus","hasMaster","crosssigningstatus_hasMaster","hasSelfSigning","crosssigningstatus_hasSelfSigning","hasUserSigning","crosssigningstatus_hasUserSigning","Curve25519PublicKeyFinalization","__wbg_curve25519publickey_free","Curve25519PublicKey","curve25519publickey_new","curve25519publickey_length","curve25519publickey_toBase64","DecryptedRoomEventFinalization","__wbg_decryptedroomevent_free","DecryptedRoomEvent","event","__wbg_get_decryptedroomevent_event","sender","decryptedroomevent_sender","senderDevice","decryptedroomevent_senderDevice","senderCurve25519Key","decryptedroomevent_senderCurve25519Key","senderClaimedEd25519Key","decryptedroomevent_senderClaimedEd25519Key","forwardingCurve25519KeyChain","decryptedroomevent_forwardingCurve25519KeyChain","shieldState","strict","decryptedroomevent_shieldState","ShieldState","DecryptionSettingsFinalization","__wbg_decryptionsettings_free","DecryptionSettings","sender_device_trust_requirement","__wbg_get_decryptionsettings_sender_device_trust_requirement","__wbg_set_decryptionsettings_sender_device_trust_requirement","decryptionsettings_new","DehydratedDeviceFinalization","__wbg_dehydrateddevice_free","DehydratedDevice","keysForUpload","initial_device_display_name","dehydrated_device_key","DehydratedDeviceKey","dehydrateddevice_keysForUpload","DehydratedDeviceKeyFinalization","__wbg_dehydrateddevicekey_free","dehydrateddevicekey_createRandomKey","createKeyFromArray","dehydrateddevicekey_createKeyFromArray","dehydrateddevicekey_toBase64","DehydratedDevicesFinalization","__wbg_dehydrateddevices_free","DehydratedDevices","dehydrateddevices_create","rehydrate","device_id","device_data","dehydrateddevices_rehydrate","getDehydratedDeviceKey","dehydrateddevices_getDehydratedDeviceKey","saveDehydratedDeviceKey","dehydrateddevices_saveDehydratedDeviceKey","deleteDehydratedDeviceKey","dehydrateddevices_deleteDehydratedDeviceKey","DeviceFinalization","__wbg_device_free","Device","requestVerification","methods","device_requestVerification","encryptToDeviceEvent","event_type","content","device_encryptToDeviceEvent","isVerified","device_isVerified","isCrossSigningTrusted","device_isCrossSigningTrusted","isCrossSignedByOwner","device_isCrossSignedByOwner","setLocalTrust","local_state","device_setLocalTrust","device_userId","device_deviceId","displayName","device_displayName","getKey","algorithm","device_getKey","DeviceKey","curve25519Key","device_curve25519Key","ed25519Key","device_ed25519Key","Ed25519PublicKey","keys","device_keys","algorithms","device_algorithms","signatures","device_signatures","Signatures","localTrustState","device_localTrustState","isLocallyTrusted","device_isLocallyTrusted","isBlacklisted","device_isBlacklisted","isDeleted","device_isDeleted","firstTimeSeen","device_firstTimeSeen","BigInt","asUintN","verify","device_verify","isDehydrated","device_isDehydrated","DeviceIdFinalization","__wbg_deviceid_free","id","deviceid_new","deviceid_toString","DeviceKeyFinalization","__wbg_devicekey_free","devicekey_name","curve25519","devicekey_curve25519","ed25519","devicekey_ed25519","unknown","devicekey_unknown","devicekey_toBase64","DeviceKeyAlgorithmFinalization","__wbg_devicekeyalgorithm_free","DeviceKeyAlgorithm","devicekeyalgorithm_name","devicekeyalgorithm_toString","DeviceKeyIdFinalization","__wbg_devicekeyid_free","DeviceKeyId","devicekeyid_new","devicekeyid_algorithm","devicekeyid_deviceId","devicekeyid_toString","DeviceListsFinalization","__wbg_devicelists_free","DeviceLists","changed","left","devicelists_new","isEmpty","devicelists_isEmpty","devicelists_changed","devicelists_left","EciesFinalization","__wbg_ecies_free","Ecies","ecies_new","public_key","ecies_public_key","establish_inbound_channel","initial_message","ecies_establish_inbound_channel","InboundCreationResult","establish_outbound_channel","ecies_establish_outbound_channel","OutboundCreationResult","Ed25519PublicKeyFinalization","__wbg_ed25519publickey_free","ed25519publickey_length","ed25519publickey_toBase64","Ed25519SignatureFinalization","__wbg_ed25519signature_free","Ed25519Signature","signature","ed25519signature_new","ed25519signature_toBase64","EmojiFinalization","__wbg_emoji_free","Emoji","symbol","emoji_symbol","emoji_description","EncryptedAttachmentFinalization","__wbg_encryptedattachment_free","encrypted_data","media_encryption_info","encryptedattachment_new","encryptedData","encryptedattachment_encryptedData","mediaEncryptionInfo","encryptedattachment_mediaEncryptionInfo","hasMediaEncryptionInfoBeenConsumed","encryptedattachment_hasMediaEncryptionInfoBeenConsumed","EncryptionInfoFinalization","__wbg_encryptioninfo_free","EncryptionInfo","encryptioninfo_sender","encryptioninfo_senderDevice","encryptioninfo_senderCurve25519Key","encryptioninfo_senderClaimedEd25519Key","encryptioninfo_shieldState","EncryptionSettingsFinalization","__wbg_encryptionsettings_free","EncryptionSettings","__wbg_get_encryptionsettings_algorithm","__wbg_set_encryptionsettings_algorithm","rotationPeriod","__wbg_get_encryptionsettings_rotationPeriod","__wbg_set_encryptionsettings_rotationPeriod","rotationPeriodMessages","__wbg_get_encryptionsettings_rotationPeriodMessages","__wbg_set_encryptionsettings_rotationPeriodMessages","historyVisibility","__wbg_get_encryptionsettings_historyVisibility","__wbg_set_encryptionsettings_historyVisibility","sharingStrategy","__wbg_get_encryptionsettings_sharingStrategy","__wbg_set_encryptionsettings_sharingStrategy","encryptionsettings_new","EstablishedEciesFinalization","__wbg_establishedecies_free","EstablishedEcies","establishedecies_public_key","deferred2_0","deferred2_1","establishedecies_encrypt","deferred3_0","deferred3_1","establishedecies_decrypt","check_code","establishedecies_check_code","EventIdFinalization","__wbg_eventid_free","EventId","eventid_new","localpart","eventid_localpart","serverName","eventid_serverName","ServerName","eventid_toString","IdentityKeysFinalization","__wbg_identitykeys_free","IdentityKeys","__wbg_get_identitykeys_ed25519","__wbg_set_identitykeys_ed25519","__wbg_get_identitykeys_curve25519","__wbg_set_identitykeys_curve25519","InboundCreationResultFinalization","__wbg_inboundcreationresult_free","channel","__wbg_get_inboundcreationresult_channel","__wbg_set_inboundcreationresult_channel","__wbg_get_inboundcreationresult_message","InboundGroupSessionFinalization","__wbg_inboundgroupsession_free","InboundGroupSession","roomId","inboundgroupsession_roomId","RoomId","senderKey","inboundgroupsession_senderKey","sessionId","inboundgroupsession_sessionId","hasBeenImported","inboundgroupsession_hasBeenImported","KeysBackupRequestFinalization","__wbg_keysbackuprequest_free","KeysBackupRequest","__wbg_get_keysbackuprequest_id","body","__wbg_get_keysbackuprequest_body","version","__wbg_get_keysbackuprequest_version","keysbackuprequest_new","keysbackuprequest_type","KeysClaimRequestFinalization","__wbg_keysclaimrequest_free","KeysClaimRequest","__wbg_get_keysclaimrequest_id","__wbg_get_keysclaimrequest_body","keysclaimrequest_new","keysclaimrequest_type","KeysQueryRequestFinalization","__wbg_keysqueryrequest_free","KeysQueryRequest","__wbg_get_keysqueryrequest_id","__wbg_get_keysqueryrequest_body","keysqueryrequest_new","keysqueryrequest_type","KeysUploadRequestFinalization","__wbg_keysuploadrequest_free","KeysUploadRequest","__wbg_get_keysuploadrequest_id","__wbg_get_keysuploadrequest_body","keysuploadrequest_new","keysuploadrequest_type","MaybeSignatureFinalization","__wbg_maybesignature_free","MaybeSignature","isValid","maybesignature_isValid","isInvalid","maybesignature_isInvalid","maybesignature_signature","Signature","invalidSignatureSource","maybesignature_invalidSignatureSource","MegolmDecryptionErrorFinalization","__wbg_megolmdecryptionerror_free","MegolmDecryptionError","__wbg_get_megolmdecryptionerror_code","__wbg_get_megolmdecryptionerror_description","maybe_withheld","__wbg_get_megolmdecryptionerror_maybe_withheld","MegolmV1BackupKeyFinalization","__wbg_megolmv1backupkey_free","publicKeyBase64","megolmv1backupkey_publicKeyBase64","megolmv1backupkey_algorithm","MigrationFinalization","__wbg_migration_free","Migration","migrateBaseData","data","pickle_key","store_handle","StoreHandle","migration_migrateBaseData","migrateOlmSessions","sessions","migration_migrateOlmSessions","migrateMegolmSessions","migration_migrateMegolmSessions","OlmMachineFinalization","__wbg_olmmachine_free","OlmMachine","olmmachine_new","initialize","user_id","store_name","store_passphrase","olmmachine_initialize","initFromStore","olmmachine_initFromStore","olmmachine_userId","olmmachine_deviceId","deviceCreationTimeMs","olmmachine_deviceCreationTimeMs","identityKeys","olmmachine_identityKeys","olmmachine_displayName","roomKeyRequestsEnabled","olmmachine_roomKeyRequestsEnabled","enabled","olmmachine_set_roomKeyRequestsEnabled","roomKeyForwardingEnabled","olmmachine_roomKeyForwardingEnabled","olmmachine_set_roomKeyForwardingEnabled","trackedUsers","olmmachine_trackedUsers","updateTrackedUsers","users","olmmachine_updateTrackedUsers","markAllTrackedUsersAsDirty","olmmachine_markAllTrackedUsersAsDirty","receiveSyncChanges","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","olmmachine_receiveSyncChanges","outgoingRequests","olmmachine_outgoingRequests","markRequestAsSent","request_id","request_type","response","olmmachine_markRequestAsSent","encryptRoomEvent","room_id","olmmachine_encryptRoomEvent","decryptRoomEvent","decryption_settings","olmmachine_decryptRoomEvent","getRoomEventEncryptionInfo","olmmachine_getRoomEventEncryptionInfo","crossSigningStatus","olmmachine_crossSigningStatus","exportSecretsBundle","olmmachine_exportSecretsBundle","importSecretsBundle","bundle","SecretsBundle","olmmachine_importSecretsBundle","exportCrossSigningKeys","olmmachine_exportCrossSigningKeys","importCrossSigningKeys","master_key","user_signing_key","olmmachine_importCrossSigningKeys","bootstrapCrossSigning","reset","olmmachine_bootstrapCrossSigning","getIdentity","olmmachine_getIdentity","sign","olmmachine_sign","invalidateGroupSession","olmmachine_invalidateGroupSession","shareRoomKey","encryption_settings","olmmachine_shareRoomKey","queryKeysForUsers","olmmachine_queryKeysForUsers","getMissingSessions","olmmachine_getMissingSessions","getUserDevices","timeout_secs","olmmachine_getUserDevices","getDevice","olmmachine_getDevice","getVerification","flow_id","olmmachine_getVerification","getVerificationRequest","olmmachine_getVerificationRequest","VerificationRequest","getVerificationRequests","olmmachine_getVerificationRequests","receiveVerificationEvent","olmmachine_receiveVerificationEvent","exportRoomKeys","predicate","olmmachine_exportRoomKeys","importRoomKeys","exported_room_keys","progress_listener","olmmachine_importRoomKeys","importExportedRoomKeys","olmmachine_importExportedRoomKeys","importBackedUpRoomKeys","backed_up_room_keys","olmmachine_importBackedUpRoomKeys","saveBackupDecryptionKey","decryption_key","olmmachine_saveBackupDecryptionKey","getBackupKeys","olmmachine_getBackupKeys","verifyBackup","backup_info","olmmachine_verifyBackup","enableBackupV1","public_key_base_64","olmmachine_enableBackupV1","isBackupEnabled","olmmachine_isBackupEnabled","disableBackup","olmmachine_disableBackup","backupRoomKeys","olmmachine_backupRoomKeys","roomKeyCounts","olmmachine_roomKeyCounts","encryptExportedRoomKeys","passphrase","rounds","deferred4_0","deferred4_1","olmmachine_encryptExportedRoomKeys","ptr3","len3","decryptExportedRoomKeys","encrypted_exported_room_keys","olmmachine_decryptExportedRoomKeys","registerRoomKeyUpdatedCallback","callback","olmmachine_registerRoomKeyUpdatedCallback","registerRoomKeysWithheldCallback","olmmachine_registerRoomKeysWithheldCallback","registerUserIdentityUpdatedCallback","olmmachine_registerUserIdentityUpdatedCallback","registerDevicesUpdatedCallback","olmmachine_registerDevicesUpdatedCallback","registerReceiveSecretCallback","olmmachine_registerReceiveSecretCallback","getSecretsFromInbox","secret_name","olmmachine_getSecretsFromInbox","deleteSecretsFromInbox","olmmachine_deleteSecretsFromInbox","requestMissingSecretsIfNeeded","olmmachine_requestMissingSecretsIfNeeded","getRoomSettings","olmmachine_getRoomSettings","setRoomSettings","room_settings","RoomSettings","olmmachine_setRoomSettings","dehydratedDevices","olmmachine_dehydratedDevices","close","olmmachine_close","OtherUserIdentityFinalization","__wbg_otheruseridentity_free","OtherUserIdentity","otheruseridentity_isVerified","otheruseridentity_verify","request_event_id","otheruseridentity_requestVerification","verificationRequestContent","otheruseridentity_verificationRequestContent","otheruseridentity_masterKey","selfSigningKey","otheruseridentity_selfSigningKey","pinCurrentMasterKey","otheruseridentity_pinCurrentMasterKey","identityNeedsUserApproval","otheruseridentity_identityNeedsUserApproval","wasPreviouslyVerified","otheruseridentity_wasPreviouslyVerified","withdrawVerification","otheruseridentity_withdrawVerification","hasVerificationViolation","otheruseridentity_hasVerificationViolation","OutboundCreationResultFinalization","__wbg_outboundcreationresult_free","__wbg_get_outboundcreationresult_initial_message","OwnUserIdentityFinalization","__wbg_ownuseridentity_free","OwnUserIdentity","ownuseridentity_isVerified","ownuseridentity_verify","ownuseridentity_requestVerification","trustsOurOwnDevice","ownuseridentity_trustsOurOwnDevice","ownuseridentity_masterKey","ownuseridentity_selfSigningKey","ownuseridentity_userSigningKey","ownuseridentity_wasPreviouslyVerified","ownuseridentity_withdrawVerification","ownuseridentity_hasVerificationViolation","PickledInboundGroupSessionFinalization","__wbg_pickledinboundgroupsession_free","PickledInboundGroupSession","__unwrap","jsValue","pickle","__wbg_get_pickledinboundgroupsession_pickle","__wbg_get_pickledinboundgroupsession_senderKey","senderSigningKey","__wbg_get_pickledinboundgroupsession_senderSigningKey","__wbg_get_pickledinboundgroupsession_roomId","__wbg_set_pickledinboundgroupsession_roomId","imported","__wbg_get_pickledinboundgroupsession_imported","__wbg_set_pickledinboundgroupsession_imported","backedUp","__wbg_get_pickledinboundgroupsession_backedUp","__wbg_set_pickledinboundgroupsession_backedUp","pickledinboundgroupsession_new","PickledSessionFinalization","__wbg_pickledsession_free","PickledSession","__wbg_get_pickledsession_pickle","__wbg_get_pickledsession_senderKey","createdUsingFallbackKey","__wbg_get_pickledsession_createdUsingFallbackKey","__wbg_set_pickledsession_createdUsingFallbackKey","creationTime","__wbg_get_pickledsession_creationTime","__wbg_set_pickledsession_creationTime","lastUseTime","__wbg_get_pickledsession_lastUseTime","__wbg_set_pickledsession_lastUseTime","pickledsession_new","PutDehydratedDeviceRequestFinalization","__wbg_putdehydrateddevicerequest_free","PutDehydratedDeviceRequest","__wbg_get_putdehydrateddevicerequest_body","putdehydrateddevicerequest_new","QrFinalization","__wbg_qr_free","Qr","qr_state","hasBeenScanned","qr_hasBeenScanned","hasBeenConfirmed","qr_hasBeenConfirmed","qr_userId","otherUserId","qr_otherUserId","otherDeviceId","qr_otherDeviceId","weStarted","qr_weStarted","cancelInfo","qr_cancelInfo","isDone","qr_isDone","isCancelled","qr_isCancelled","isSelfVerification","qr_isSelfVerification","reciprocated","qr_reciprocated","flowId","qr_flowId","qr_roomId","toQrCode","qr_toQrCode","QrCode","toBytes","qr_toBytes","reciprocate","qr_reciprocate","confirmScanning","qr_confirmScanning","cancel","qr_cancel","cancelWithCode","qr_cancelWithCode","registerChangesCallback","qr_registerChangesCallback","QrCodeFinalization","__wbg_qrcode_free","renderIntoBuffer","qrcode_renderIntoBuffer","QrCodeDataFinalization","__wbg_qrcodedata_free","QrCodeData","rendezvous_url","server_name","qrcodedata_new","fromBytes","bytes","qrcodedata_fromBytes","qrcodedata_toBytes","qrcodedata_fromBase64","qrcodedata_toBase64","publicKey","qrcodedata_publicKey","rendezvousUrl","qrcodedata_rendezvousUrl","qrcodedata_serverName","mode","qrcodedata_mode","QrCodeScanFinalization","__wbg_qrcodescan_free","QrCodeScan","qrcodescan_fromBytes","RehydratedDeviceFinalization","__wbg_rehydrateddevice_free","RehydratedDevice","receiveEvents","rehydrateddevice_receiveEvents","RoomIdFinalization","__wbg_roomid_free","roomid_new","roomid_toString","RoomKeyCountsFinalization","__wbg_roomkeycounts_free","RoomKeyCounts","total","__wbg_get_roomkeycounts_total","__wbg_set_roomkeycounts_total","__wbg_get_roomkeycounts_backedUp","__wbg_set_roomkeycounts_backedUp","RoomKeyImportResultFinalization","__wbg_roomkeyimportresult_free","RoomKeyImportResult","importedCount","__wbg_get_roomkeyimportresult_importedCount","totalCount","__wbg_get_roomkeyimportresult_totalCount","roomkeyimportresult_keys","RoomKeyInfoFinalization","__wbg_roomkeyinfo_free","RoomKeyInfo","roomkeyinfo_algorithm","roomkeyinfo_roomId","roomkeyinfo_senderKey","roomkeyinfo_sessionId","RoomKeyWithheldInfoFinalization","__wbg_roomkeywithheldinfo_free","RoomKeyWithheldInfo","roomkeywithheldinfo_sender","roomkeywithheldinfo_algorithm","withheldCode","roomkeywithheldinfo_withheldCode","roomkeywithheldinfo_roomId","roomkeywithheldinfo_sessionId","RoomMessageRequestFinalization","__wbg_roommessagerequest_free","RoomMessageRequest","__wbg_get_roommessagerequest_id","__wbg_get_roommessagerequest_room_id","txn_id","__wbg_get_roommessagerequest_txn_id","__wbg_get_roommessagerequest_event_type","__wbg_get_roommessagerequest_body","roommessagerequest_new","roommessagerequest_type","RoomSettingsFinalization","__wbg_roomsettings_free","__wbg_get_roomsettings_algorithm","__wbg_set_roomsettings_algorithm","onlyAllowTrustedDevices","__wbg_get_roomsettings_onlyAllowTrustedDevices","__wbg_set_roomsettings_onlyAllowTrustedDevices","sessionRotationPeriodMs","__wbg_get_roomsettings_sessionRotationPeriodMs","__wbg_set_roomsettings_sessionRotationPeriodMs","sessionRotationPeriodMessages","__wbg_get_roomsettings_sessionRotationPeriodMessages","__wbg_set_roomsettings_sessionRotationPeriodMessages","roomsettings_new","SasFinalization","__wbg_sas_free","Sas","sas_userId","sas_deviceId","sas_otherUserId","sas_otherDeviceId","sas_flowId","sas_roomId","supportsEmoji","sas_supportsEmoji","startedFromRequest","sas_startedFromRequest","sas_isSelfVerification","haveWeConfirmed","sas_haveWeConfirmed","hasBeenAccepted","sas_hasBeenAccepted","sas_cancelInfo","sas_weStarted","accept","sas_accept","confirm","sas_confirm","sas_cancel","sas_cancelWithCode","timedOut","sas_timedOut","canBePresented","sas_canBePresented","sas_isDone","sas_isCancelled","emoji","sas_emoji","emojiIndex","sas_emojiIndex","decimals","sas_decimals","sas_registerChangesCallback","SecretsBundleFinalization","__wbg_secretsbundle_free","secretsbundle_masterKey","secretsbundle_selfSigningKey","secretsbundle_userSigningKey","backupBundle","secretsbundle_backupBundle","to_json","secretsbundle_to_json","from_json","json","secretsbundle_from_json","ServerNameFinalization","__wbg_servername_free","servername_new","host","servername_host","port","servername_port","isIpLiteral","servername_isIpLiteral","ShieldStateFinalization","__wbg_shieldstate_free","color","__wbg_get_shieldstate_color","__wbg_set_shieldstate_color","__wbg_get_shieldstate_code","__wbg_set_shieldstate_code","shieldstate_message","SignatureFinalization","__wbg_signature_free","signature_ed25519","signature_toBase64","SignatureUploadRequestFinalization","__wbg_signatureuploadrequest_free","__wbg_get_signatureuploadrequest_id","__wbg_get_signatureuploadrequest_body","signed_keys","signatureuploadrequest_new","signatureuploadrequest_type","SignatureVerificationFinalization","__wbg_signatureverification_free","SignatureVerification","deviceState","signatureverification_deviceState","userState","signatureverification_userState","trusted","signatureverification_trusted","SignaturesFinalization","__wbg_signatures_free","signatures_new","addSignature","signer","key_id","signatures_addSignature","getSignature","signatures_getSignature","signatures_get","clear","signatures_clear","signatures_isEmpty","count","signatures_count","asJSON","signatures_asJSON","StoreHandleFinalization","__wbg_storehandle_free","open","storehandle_open","openWithKey","store_key","storehandle_openWithKey","ToDeviceRequestFinalization","__wbg_todevicerequest_free","ToDeviceRequest","__wbg_get_todevicerequest_id","__wbg_get_todevicerequest_event_type","__wbg_get_todevicerequest_txn_id","__wbg_get_todevicerequest_body","todevicerequest_new","todevicerequest_type","TracingFinalization","__wbg_tracing_free","Tracing","isAvailable","tracing_isAvailable","min_level","tracing_new","minLevel","tracing_set_minLevel","turnOn","tracing_turnOn","turnOff","tracing_turnOff","UploadSigningKeysRequestFinalization","__wbg_uploadsigningkeysrequest_free","__wbg_get_uploadsigningkeysrequest_body","uploadsigningkeysrequest_new","UserDevicesFinalization","__wbg_userdevices_free","UserDevices","userdevices_get","isAnyVerified","userdevices_isAnyVerified","userdevices_keys","devices","userdevices_devices","UserIdFinalization","__wbg_userid_free","userid_new","userid_localpart","userid_serverName","isHistorical","userid_isHistorical","userid_toString","clone","userid_clone","VerificationRequestFinalization","__wbg_verificationrequest_free","request","own_user_id","own_device_id","other_user_id","verificationrequest_request","ownUserId","verificationrequest_ownUserId","verificationrequest_otherUserId","verificationrequest_otherDeviceId","verificationrequest_roomId","verificationrequest_cancelInfo","isPassive","verificationrequest_isPassive","isReady","verificationrequest_isReady","verificationrequest_timedOut","timeRemainingMillis","verificationrequest_timeRemainingMillis","theirSupportedMethods","verificationrequest_theirSupportedMethods","ourSupportedMethods","verificationrequest_ourSupportedMethods","verificationrequest_flowId","verificationrequest_isSelfVerification","verificationrequest_weStarted","verificationrequest_isDone","phase","verificationrequest_phase","verificationrequest_getVerification","verificationrequest_registerChangesCallback","verificationrequest_isCancelled","acceptWithMethods","verificationrequest_acceptWithMethods","verificationrequest_accept","verificationrequest_cancel","startSas","verificationrequest_startSas","generateQrCode","verificationrequest_generateQrCode","scanQrCode","verificationrequest_scanQrCode","VersionsFinalization","__wbg_versions_free","vodozemac","__wbg_get_versions_vodozemac","matrix_sdk_crypto","__wbg_get_versions_matrix_sdk_crypto","git_sha","__wbg_get_versions_git_sha","git_description","__wbg_get_versions_git_description","__wbg_String_8f0eb39a4a4c2f66","String","setInt32","__wbg_String_eecc4a11987127d6","__wbg_Window_b0044ac7db258535","Window","__wbg_WorkerGlobalScope_b74cefefc62a37da","WorkerGlobalScope","__wbg_add_0d9e99fb9c2d2cc5","add","__wbg_add_c836e3d4b14cd062","arguments","__wbg_at_479807bfddde3a33","at","__wbg_backupkeys_new","__wbg_bound_1918c0826c5b9363","IDBKeyRange","bound","__wbg_bound_324dfb8899c9798c","__wbg_buffer_61b7ce01341d7f88","__wbg_call_3b770f0d6eb4720e","__wbg_call_500db948e69c7330","__wbg_call_9bd6f269d4835e33","arg4","__wbg_call_b0d8e36992d9900d","__wbg_clearTimeout_5a54f8841c30079a","clearTimeout","__wbg_clear_da83758e0bea0eb6","__wbg_close_f6e618ed8b0326a3","__wbg_code_71136b86e2aa7f41","__wbg_continue_bd44561c014cacea","continue","__wbg_count_244aa4118e005b59","__wbg_count_4df50ef6c1ddd770","__wbg_createIndex_14571b3c4eec1628","createIndex","__wbg_createIndex_1d4b2bbb6b21b8f8","__wbg_createObjectStore_b6f14aa10f83a300","createObjectStore","__wbg_crosssigningbootstraprequests_new","__wbg_crosssigningkeyexport_new","__wbg_crosssigningstatus_new","__wbg_crypto_ed58b8e10a292839","crypto","__wbg_debug_156ca727dbc3150f","console","__wbg_debug_3acd668e6e6c6087","__wbg_decryptedroomevent_new","__wbg_dehydrateddevice_new","__wbg_dehydrateddevicekey_new","__wbg_deleteObjectStore_1f50ba0263875deb","deleteObjectStore","__wbg_delete_5c33e4966f59624d","delete","__wbg_delete_d97b2b4ff716c553","__wbg_device_new","__wbg_deviceid_new","__wbg_devicekey_new","__wbg_devicekeyid_new","__wbg_done_f22c1561fa919baa","done","__wbg_emoji_new","__wbg_encryptioninfo_new","__wbg_entries_4f2bb9b0d701c0f6","entries","__wbg_entries_82bf0e755ef54a5f","__wbg_error_32fda676ae978f6e","error","__wbg_error_7534b8e9a36f1ab4","deferred0_0","deferred0_1","__wbg_error_77233c625ed0c533","__wbg_error_fab41a42d22bf2bc","__wbg_from_d68eaa96dba25449","from","__wbg_getAllKeys_ad97dc28822a6891","getAllKeys","__wbg_getAll_72e2faaa06d1a8cf","getAll","__wbg_getAll_8f38031e5969c7f5","__wbg_getAll_8fa84589faccab36","__wbg_getRandomValues_bcb4912f16000dc4","getRandomValues","__wbg_getTime_ab8b72009983c537","getTime","__wbg_get_6a4f854f5cca7403","__wbg_get_7081edc0440983a5","__wbg_get_9aa3dff3f0266054","__wbg_get_bbccf8970793c087","Reflect","__wbg_getwithrefkey_1dc361bd10053bfe","__wbg_getwithrefkey_6550b2c093d2eb18","__wbg_global_b6f5c73312f62313","global","__wbg_inboundgroupsession_new","__wbg_index_871d874253bae760","index","__wbg_indexedDB_601ec26c63e333de","indexedDB","__wbg_indexedDB_72e2ca071222fd9e","__wbg_indexedDB_e34a5e9b3d2fcfa1","__wbg_info_c3044c86ae29faab","info","__wbg_info_ed71056bef15b91a","__wbg_instanceof_ArrayBuffer_670ddde44cdb2602","ArrayBuffer","__wbg_instanceof_Map_98ecb30afec5acdb","Map","__wbg_instanceof_Promise_0aa3a90cfe6672c9","Promise","__wbg_instanceof_Uint8Array_28af5bc19d6acad8","__wbg_isArray_1ba11a930108ec51","__wbg_isSafeInteger_12f5549b2fca23f4","Number","isSafeInteger","__wbg_item_7156a8ffa4d816bc","item","__wbg_iterator_23604bb983791576","Symbol","iterator","__wbg_key_87db8226759da642","__wbg_keysbackuprequest_new","__wbg_keysclaimrequest_new","__wbg_keysqueryrequest_new","__wbg_keysuploadrequest_new","__wbg_length_65d1cd11729ced11","__wbg_length_d65cf0786bfc5739","__wbg_length_f4d79409aa324811","__wbg_lowerBound_3aa47caa33c7e1e6","lowerBound","__wbg_maybesignature_new","__wbg_megolmdecryptionerror_new","__wbg_message_d19bdb65f0a41cf5","__wbg_msCrypto_0a36e2ec3a343d26","msCrypto","__wbg_name_8862cd49ad807c59","__wbg_new_0f1bd659dcd47068","Set","__wbg_new_254fa9eac11932ae","__wbg_new_3d446df9155128ef","state0","cb0","__wbg_new_3ff5b33b1ce712df","__wbg_new_41257536af60ed14","Date","__wbg_new_688846f374351c92","__wbg_new_8a6f238a6ece86ea","__wbg_new_9451f3dcb42e0e37","Uint8ClampedArray","__wbg_new_bc96c6a1c0786643","__wbg_newnoargs_fd9e4bf8be2bc16d","Function","__wbg_newwithbyteoffsetandlength_ba35896968751d91","__wbg_newwithbyteoffsetandlength_c0c90653f73c7dfb","__wbg_newwithlength_2aede0ef4e6e97ec","__wbg_newwithlength_34ce8f1051e74449","__wbg_newwithmessage_80e6436058862fd4","DOMException","__wbg_next_01dd9234a5bf6d05","next","__wbg_next_137428deb98342b0","__wbg_node_02999533c4ea02e3","node","__wbg_now_2c95c9de01293173","now","__wbg_now_64d0bb151e5d3889","__wbg_objectStoreNames_cb00c8113b3cf5df","objectStoreNames","__wbg_objectStore_cdbc73ee600a2cfa","objectStore","__wbg_oldVersion_a31d9f8577239dd8","oldVersion","__wbg_olmmachine_new","__wbg_openCursor_37e21d9af1a61159","openCursor","__wbg_openCursor_da08cc74542711ad","__wbg_openCursor_e7a3f6453a0f6725","__wbg_open_4588c85c0c43671d","__wbg_open_5c51d4d6d7ab6da6","__wbg_otheruseridentity_new","__wbg_ownuseridentity_new","__wbg_parse_161c68378e086ae1","parse","__wbg_performance_7a3ffd0b17f663ad","performance","__wbg_pickledinboundgroupsession_unwrap","__wbg_pickledsession_unwrap","__wbg_process_5c1d670bc53614b8","process","__wbg_push_6edad0df4b546b2c","__wbg_put_5393e88dbe742e8f","put","__wbg_putdehydrateddevicerequest_new","__wbg_qr_new","__wbg_queueMicrotask_2181040e064c0dc8","queueMicrotask","__wbg_queueMicrotask_ef9ac43769cbcc4f","__wbg_randomFillSync_ab2cfe79ebbf2740","randomFillSync","__wbg_readyState_8428fa7c5e093401","readyState","indexOf","__wbg_rehydrateddevice_new","__wbg_require_79b1e9274cde3c87","__wbg_resolve_0bf7c44d641804f9","resolve","__wbg_result_e6ba6a347dcb7470","__wbg_roomid_unwrap","__wbg_roomkeycounts_new","__wbg_roomkeyimportresult_new","__wbg_roomkeyinfo_new","__wbg_roomkeywithheldinfo_new","__wbg_roommessagerequest_new","__wbg_roomsettings_new","__wbg_sas_new","__wbg_secretsbundle_new","__wbg_setTimeout_db2dbaeefb6f39c7","setTimeout","__wbg_set_1d80752d0d5f0b21","__wbg_set_23d69db4e5c66a6e","__wbg_set_3807d5f0bfc24aa7","__wbg_set_3f1d0b984ed272ed","__wbg_set_76818dc3c59a63d5","__wbg_set_9592f7d5b752cae3","__wbg_setonabort_ade6cac5c35a572f","onabort","__wbg_setonblocked_d13048be9383f4dc","onblocked","__wbg_setoncomplete_2747fb71ae0af4a8","oncomplete","__wbg_setonerror_72b33e31f9edb045","onerror","__wbg_setonerror_e4beb2652cf66635","__wbg_setonsuccess_57167b1c2650357c","onsuccess","__wbg_setonupgradeneeded_887c7a5fca66011e","onupgradeneeded","__wbg_setonversionchange_a6f60bd1d110795d","onversionchange","__wbg_setunique_cfc477dc5825e1c4","unique","__wbg_signatures_new","__wbg_signatureuploadrequest_new","__wbg_signatureverification_new","__wbg_stack_0ed75d68575b0f3c","__wbg_static_accessor_GLOBAL_0be7472e492ad3e3","__wbg_static_accessor_GLOBAL_THIS_1a6eb482d12c9bfb","globalThis","__wbg_static_accessor_SELF_1dc398a895c82351","self","__wbg_static_accessor_WINDOW_ae1c80c7eea8d64a","window","__wbg_storehandle_new","__wbg_stringify_f4f701bc34ceda61","__wbg_subarray_46adeb9b86949d12","__wbg_target_a8fe593e7ee79c21","target","__wbg_then_0438fad860fe38e1","then","__wbg_then_0ffafeddf0e182a4","__wbg_todevicerequest_new","__wbg_transaction_bc71c2aaaf467420","transaction","__wbg_transaction_d2b6d520837fbe7f","__wbg_transaction_dbab9cd9ea849958","__wbg_update_211ddccaf2cec6ee","update","__wbg_userdevices_new","__wbg_userid_new","__wbg_userid_unwrap","__wbg_value_0ad6f37677c8ee74","__wbg_value_4c32fd138a88eee2","__wbg_values_7aa03dd078978c86","values","__wbg_verificationrequest_new","__wbg_version_2b650c9d4f0a2438","__wbg_versions_c71aa1626a93e0a1","versions","__wbg_warn_123db6aa8948382e","warn","__wbg_warn_9d038df1589cb1bd","__wbindgen_as_number","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbindgen_bigint_get_as_i64","v","setBigInt64","__wbindgen_boolean_get","__wbindgen_cb_drop","__wbindgen_closure_wrapper1050","__wbindgen_closure_wrapper2213","__wbindgen_closure_wrapper5386","__wbindgen_closure_wrapper6843","__wbindgen_closure_wrapper6848","__wbindgen_debug_string","__wbindgen_error_new","__wbindgen_in","__wbindgen_init_externref_table","table","grow","__wbindgen_is_array","__wbindgen_is_bigint","__wbindgen_is_function","__wbindgen_is_null","__wbindgen_is_object","__wbindgen_is_string","__wbindgen_is_undefined","__wbindgen_jsval_eq","__wbindgen_jsval_loose_eq","__wbindgen_memory","__wbindgen_number_get","setFloat64","__wbindgen_number_new","__wbindgen_string_get","__wbindgen_string_new","__wbindgen_throw","__wbindgen_try_into_number","moduleUrl","URL","bindings","Proxy","modPromise","async","loadModuleAsync","WebAssembly","instantiateStreaming","fetch","exports","__wbindgen_start","initAsync","RoomEncryptor","olmMachine","keyClaimManager","outgoingRequestManager","room","encryptionSettings","_defineProperty","prefixedLogger","logger","getChild","concat","members","getJoinedMembers","map","u","RustSdkCryptoJs","catch","onCryptoEvent","config","onRoomMembership","member","membership","KnownMembership","Join","Invite","shouldEncryptForInvitedMembers","prepareForEncryption","globalBlacklistUnverifiedDevices","deviceIsolationMode","_this","_asyncToGenerator","encryptEvent","_event$getTxnId","_this2","LogSpan","getTxnId","prom","currentEncryptionPromise","logDuration","ensureEncryptionSession","encryptEventInner","_this3","getEncryptionTargetMembers","lazyLoadedMembersResolved","doProcessOutgoingRequests","userList","ensureSessionsForUsers","rustEncryptionSettings","toRustHistoryVisibility","getHistoryVisibility","rotation_period_ms","rotation_period_msgs","kind","DeviceIsolationModeKind","AllDevicesIsolationMode","_this3$room$getBlackl","getBlacklistUnverifiedDevices","errorOnVerifiedUserProblems","OnlySignedDevicesIsolationMode","shareMessages","m","outgoingRequestProcessor","makeOutgoingRequest","forceDiscardSession","_this4","r","_this5","encryptedContent","getType","getContent","makeEncrypted","EventType","RoomMessageEncrypted","visibility","RustHistoryVisibility","UnstablePrefix","SECRET_STORAGE_NAME","DEHYDRATION_INTERVAL","DehydratedDeviceManager","TypedEventEmitter","http","secretStorage","super","cacheKey","emit","CryptoEvent","DehydrationKeyCached","isSupported","authedRequest","Method","Get","prefix","err","errcode","_arguments","opts","createNewKey","onlyIfKeyCached","stop","rehydrateDeviceIfAvailable","RehydrationError","resetKey","scheduleDeviceDehydration","isKeyStored","Boolean","isStored","store","_this6","cachedKey","keyB64","decodeBase64","fill","_this7","dehydratedDeviceResp","RehydrationStarted","rehydratedDevice","nextBatch","toDeviceCount","roomKeyCount","path","encodeUri","$device_id","eventResp","Post","next_batch","events","roomKeyInfos","RehydrationProgress","RehydrationCompleted","createAndUploadDehydratedDevice","_this8","dehydratedDevice","DehydratedDeviceCreated","DehydratedDeviceUploaded","_this9","intervalId","setInterval","DehydratedDeviceRotationError","clearInterval","OutgoingRequestProcessor","msg","uiaCallback","resp","requestWithRetry","Put","sendToDeviceRequest","encodeURIComponent","makeRequestWithUIA","_path","DehydrationUnstablePrefix","rawJsonRequest","getPrototypeOf","log","trace","parsedBody","messageList","perUserMessages","messages","ToDeviceMessageId","method","queryParams","makeRequest","_ref2","auth","newBody","_objectSpread","_x","currentRetryCount","backoff","calculateRetryBackoff","sleep","headers","KeyClaimManager","currentClaimPromise","stopped","ensureSessionsForUsersInner","claimRequest","rustDeviceToJsDevice","device","keyId","verified","DeviceVerification","Unverified","Blocked","mayBeSignatureMap","convertedSignatures","_key","rustAlgorithms","forEach","dehydrated","deviceKeysToDeviceMap","deviceKeys","_ref","downloadDeviceToJsDevice","_device$unsigned","unsigned","device_display_name","CrossSigningIdentity","setupNewCrossSigning","resetCrossSigning","authUploadDeviceSigningKeys","olmDeviceStatus","masterKeyFromSecretStorage","selfSigningKeyFromSecretStorage","userSigningKeyFromSecretStorage","privateKeysInSecretStorage","olmDeviceHasKeys","olmDeviceHasMaster","olmDeviceHasUserSigning","olmDeviceHasSelfSigning","hasKey","exportCrossSigningKeysToStorage","status","req","exported","secretStorageContainsCrossSigningKeys","_secretStorageContainsCrossSigningKeys","secretStorageCanAccessSecrets","_x2","_x3","_secretStorageCanAccessSecrets","secretNames","defaultKeyId","getDefaultKeyId","secretName","record","RustVerificationRequest","inner","supportedVerificationMethods","reEmitter","TypedReEmitter","weakThis","WeakRef","_weakThis$deref","deref","onChange","verification","_verifier","RustQrCodeVerifier","setVerifier","RustSASVerifier","replaceInner","VerificationRequestEvent","Change","verifier","stopReEmitting","reEmit","transactionId","_this$inner$roomId","initiatedByMe","_this$inner$otherDevi","getOtherDevice","VerificationPhase","_accepting","verificationPhase","pending","accepting","declining","_cancelling","timeout","chosenMethod","Started","otherPartySupportsMethod","theirMethods","requiredMethod","verificationMethodsByIdentifier","some","verificationMethodIdentifierToMethod","params","beginKeyVerification","targetDevice","startVerification","res","scanQRCode","uint8Array","scan","getQRCodeBytes","generateQRCode","innerVerifier","cancellationCode","_this$inner$cancelInf","_this$inner$cancelInf2","cancellingUserId","BaseRustVerifer","completionDeferred","defer","_weakThis$deref2","promise","reject","hasBeenCancelled","getShowSasCallbacks","getReciprocateQrCodeCallbacks","callbacks","VerifierEvent","ShowReciprocateQr","_verificationRequest","sendAccept","_this10","_this11","decimal","sas","_confirm","requests","mismatch","ShowSas","_weakThis$deref3","ScanQrCode","ShowQrCode","meth","isVerificationEvent","KeyVerificationCancel","KeyVerificationDone","KeyVerificationMac","KeyVerificationStart","KeyVerificationKey","KeyVerificationReady","KeyVerificationAccept","msgtype","MsgType","KeyVerificationRequest","RustBackupManager","getActiveBackupVersion","activeBackupVersion","getServerBackupInfo","checkKeyBackupAndEnable","serverBackupInfo","isKeyBackupTrusted","signatureVerification","backupKeys","backupMatchesSavedPrivateKey","backupInfoMatchesBackupDecryptionKey","matchesDecryptionKey","force","checkedForBackup","keyBackupCheckInProgress","doCheckKeyBackup","finally","handleBackupSecretReceived","secret","_backupCheck$backupIn","backupCheck","backupInfo","trustInfo","backupDecryptionKey","privateKeyMatches","KeyBackupDecryptionKeyCached","importRoomKeysAsJson","jsonKeys","progress","_opts$progressCallbac","importOpt","successes","stage","failures","progressCallback","keysByRoom","has","session_id","_opts$progressCallbac2","requestKeyBackupVersion","activeVersion","disableKeyBackup","enableKeyBackup","auth_data","KeyBackupStatus","backupKeysLoop","maybeUploadKey","_this12","_this13","maxDelay","backupKeysLoopRunning","delay","Math","random","numFailures","remainingToUploadCount","isFirstIteration","KeyBackupSessionsRemaining","keyCount","keysCountInBatch","max","MatrixError","errCode","KeyBackupFailed","isRateLimitError","waitTime","getRetryAfterMs","pow","min","batch","countKeysInBackup","_this14","setupKeyBackup","signObject","_this15","deleteAllKeyBackupVersions","randomKey","pubKey","authData","ClientPrefix","V3","_this16","_yield$_this16$reques","_yield$_this16$reques2","current","_yield$_this16$reques3","_yield$_this16$reques4","deleteKeyBackupVersion","_this17","$version","Delete","createBackupDecryptor","RustBackupDecryptor","restoreKeyBackup","backupDecryptor","_this18","_opts$progressCallbac3","keyBackup","downloadKeyBackup","importKeyBackup","_this19","CHUNK_SIZE","totalKeyCount","totalImported","totalFailures","handleChunkCallback","roomChunks","_opts$progressCallbac4","currentChunk","_loop","decryptedSessions","decryptSessions","session","groupChunkCount","chunkGroupByRoom","roomData","rooms","sessionsForRoom","_info$auth_data","sourceTrusted","ciphertexts","_this20","sessionData","decrypted","session_data","ephemeral","_requestKeyBackupVersion","decryptionKeyMatchesKeyBackupInfo","keyBackupInfo","OutgoingRequestsManager","nextLoopDeferred","outgoingRequestLoopRunning","outgoingRequestLoop","deferred","processOutgoingRequests","_ret","KEY_BACKUP_BACKOFF","KeyDownloadErrorCode","KeyDownloadError","KeyDownloadRateLimitError","retryMillis","PerSessionKeyBackupDownloader","backupManager","hasConfigurationProblem","configuration","getOrCreateBackupConfiguration","downloadKeysLoop","on","onBackupStatusChanged","isKeyBackupDownloadConfigured","onDecryptionKeyMissingError","megolmSessionId","isAlreadyInQueue","wasRequestedRecently","queuedRequests","off","markAsNotFoundInBackup","sessionLastCheckAttemptedTime","size","filter","sid","ts","lastCheck","getBackupDecryptionKey","_unused","requestRoomKeyFromBackup","$roomId","$sessionId","downloadLoopRunning","queryKeyBackup","decryptAndImport","shift","MISSING_DECRYPTION_KEY","NETWORK_ERROR","STOPPED","targetRoomId","targetSessionId","_waitTime","_e$getRetryAfterMs","sessionInfo","sessionsToImport","decryptor","k","currentBackupVersionCheck","internalCheckFromServer","_currentServerVersion","_currentServerVersion2","_currentServerVersion4","_currentServerVersion3","currentServerVersion","ALL_VERIFICATION_METHODS","RustCrypto","_deviceId","cryptoCallbacks","outgoingRequestsManager","perSessionBackupDownloader","dehydratedDeviceManager","eventDecryptor","EventDecryptor","reemitter","crossSigningIdentity","getOlmMachineOrThrow","ClientStoppedError","globalErrorOnUnknownDevices","_v","_room","getRoomId","encryptor","roomEncryptors","decryptEvent","attemptEventDecryption","getEventEncryptionInfo","_event$getSenderKey","getSenderKey","getWireContent","encrypted","authenticated","mismatchedSender","checkUserTrust","UserVerificationStatus","getStoredCrossSigningForUser","checkOwnCrossSigningTrust","getBackupDecryptor","privKey","encodeBase64","getVersion","setDeviceIsolationMode","isolationMode","isEncryptionEnabledInRoom","roomSettings","getOwnDeviceKeys","prepareToEncrypt","_this$roomEncryptors$","raw","exportRoomKeysAsJson","userHasCrossSigningKeys","rustTrackedUser","downloadUncached","rustTrackedUsers","userIdentity","_keyResult$master_key","keyResult","downloadDeviceList","master_keys","getUserDeviceInfo","userIds","_arguments2","deviceMapByUserId","rustUserId","untrackedUsers","_userId","queryResult","userDevices","deviceArray","d","queryBody","user","getTrustCrossSignedDevices","_trustCrossSignedDevices","setTrustCrossSignedDevices","setDeviceVerified","_arguments3","crossSignDevice","outgoingRequest","getDeviceVerificationStatus","DeviceVerificationStatus","signedByOwner","crossSigningVerified","localVerified","trustCrossSignedDevices","getUserVerificationStatus","wasVerified","needsUserApproval","pinCurrentUserIdentity","withdrawVerificationRequirement","isCrossSigningReady","_this21","privateKeysCachedLocally","getCrossSigningStatus","hasKeysInCache","identity","getOwnIdentity","getCrossSigningKeyId","_arguments4","_this22","CrossSigningKey","Master","privateKeysOnDevice","SelfSigning","UserSigning","parsedKey","_this23","isSecretStorageReady","_this24","secretsToCheck","keyBackupEnabled","bootstrapSecretStorage","_arguments5","_this25","createSecretStorageKey","setupNewSecretStorage","setupNewKeyBackup","isNewSecretStorageKeyNeeded","secretStorageHasAESKey","recoveryKey","addSecretStorageKeyToSecretStorage","hasPrivateKeys","crossSigningPrivateKeys","resetKeyBackup","saveBackupKeyToStorage","_this26","backupKeyBase64","secretStorageKey","_this27","_secretStorageKey$key","_secretStorageKey$key2","_this27$cryptoCallbac","_this27$cryptoCallbac2","secretStorageKeyObject","addKey","SECRET_STORAGE_ALGORITHM_V1_AES","keyInfo","privateKey","setDefaultKeyId","cacheSecretStorageKey","_this28","secretStorageKeyTuple","_this29","publicKeysOnDevice","createRecoveryKeyFromPassphrase","password","_this30","salt","secureRandomString","deriveRecoveryKeyFromPassphrase","RECOVERY_KEY_DERIVATION_ITERATIONS","iterations","encodedPrivateKey","encodeRecoveryKey","getEncryptionInfoForEvent","_this31","getVerificationRequestsToDeviceInProgress","_supportedVerificationMethods","findVerificationRequestDMInProgress","find","_request$roomId","requestVerificationDM","_this32","verificationEventContent","eventId","sendVerificationRequestContent","_this33","txId","event_id","setSupportedVerificationMethods","requestOwnUserVerification","_this34","requestDeviceVerification","_this35","getSessionBackupPrivateKey","_this36","storeSessionBackupPrivateKey","_this37","base64Key","loadSessionBackupPrivateKeyFromSecretStorage","_this38","backupKey","getActiveSessionBackupVersion","_this39","getKeyBackupInfo","_this40","_this41","_this42","_this43","_this44","o","_this45","sigs","userSignatures","canonalizedJson","anotherjson","fromEntries","restoreKeyBackupWithPassphrase","_this46","keyFromAuthData","_this47","decodedDecryptionKey","isDehydrationSupported","_this48","startDehydration","_arguments6","_this49","secrets","_this50","secretsBundle","_this51","encryptToDeviceMessages","eventType","payload","_this52","uniqueUsers","all","_ref4","_ref3","encryptedPayload","resetEncryption","_this53","_ref5","_this54","oneTimeKeysCounts","unusedFallbackKeys","preprocessToDeviceMessages","_this55","processed","transaction_id","onIncomingKeyVerificationRequest","processKeyCounts","_this56","mapOneTimeKeysCount","setUnusedFallbackKeys","processDeviceLists","deviceLists","_this57","_deviceLists$changed","_deviceLists$left","_this58","settings","existingEncryptor","onSyncCompleted","syncState","VerificationRequestReceived","oldMembership","enc","onRoomKeysUpdated","_this59","onRoomKeyUpdated","_this60","pendingList","getEventsPendingRoomKey","getId","ev","attemptDecryption","isRetry","_e","onRoomKeysWithheld","withheld","_this61","onUserIdentityUpdated","_this62","newVerification","UserTrustStatusChanged","KeysChanged","onDevicesUpdated","_this63","WillUpdateDevices","DevicesUpdated","handleSecretReceived","_this64","checkSecrets","_this65","pendingValues","onLiveEventFromSync","_this66","isState","getUnsigned","processEvent","_ref7","evt","onKeyVerificationEvent","isDecryptionFailure","isEncrypted","TIMEOUT_DELAY","timeoutId","MatrixEventEvent","Decrypted","onDecrypted","decryptedEvent","_this67","getSender","state_key","getStateKey","origin_server_ts","getTs","_this68","MapWithDefault","_this69","trustRequirement","addEventToPendingList","stringifyEvent","removeEventFromPendingList","clearEvent","claimedEd25519Key","DecryptionError","DecryptionFailureCode","UNKNOWN_ERROR","onMegolmDecryptionError","errorDetails","sender_key","getMembershipAtEvent","HISTORICAL_MESSAGE_USER_NOT_JOINED","HISTORICAL_MESSAGE_NO_KEY_BACKUP","HISTORICAL_MESSAGE_WORKING_BACKUP","HISTORICAL_MESSAGE_BACKUP_UNCONFIGURED","failureCode","MEGOLM_KEY_WITHHELD_FOR_UNVERIFIED_DEVICE","MEGOLM_KEY_WITHHELD","MEGOLM_UNKNOWN_INBOUND_SESSION_ID","OLM_UNKNOWN_MESSAGE_INDEX","SENDER_IDENTITY_PREVIOUSLY_VERIFIED","UNKNOWN_SENDER_DEVICE","UNSIGNED_SENDER_DEVICE","_this70","getClearContent","shieldColour","EventShieldColour","NONE","shieldReason","encryptionInfo","rustEncryptionInfoToJsEncryptionInfo","roomPendingEvents","eventsPendingKey","sessionPendingEvents","getOrCreate","getWireType","GREY","RED","EventShieldReason","AUTHENTICITY_NOT_GUARANTEED","UNKNOWN_DEVICE","UNSIGNED_DEVICE","UNVERIFIED_IDENTITY","SENT_IN_CLEAR","VERIFICATION_VIOLATION","migrateFromLegacyCrypto","_migrateFromLegacyCrypto","_args$legacyMigration2","legacyStore","containsData","startup","accountPickle","doTxn","IndexedDBCryptoStore","STORE_ACCOUNT","txn","getAccount","acctPickle","migrationState","getMigrationState","MigrationState","MEGOLM_SESSIONS_MIGRATED","nOlmSessions","countOlmSessions","nMegolmSessions","countMegolmSessions","totalSteps","stepsDone","onProgress","pickleKey","legacyPickleKey","NOT_STARTED","storeHandle","INITIAL_DATA_MIGRATED","setMigrationState","OLM_SESSIONS_MIGRATED","legacyMigrationProgressListener","steps","_args$legacyMigration","_x4","_x5","_x6","_x7","_x8","_migrateBaseData","migrationData","getAndDecryptCachedSecretKey","backupCallDone","_backupInfo$auth_data","_x9","_x10","_countOlmSessions","nSessions","STORE_SESSIONS","countEndToEndSessions","n","_x11","_x12","_countMegolmSessions","countEndToEndInboundGroupSessions","_x13","_x14","_x15","_x16","_x17","_migrateOlmSessions","onBatchDone","getEndToEndSessionsBatch","pickledSession","deviceKey","lastReceivedMessageTs","deleteEndToEndSessionsBatch","_x18","_x19","_x20","_x21","_x22","_migrateMegolmSessions","getEndToEndInboundGroupSessionsBatch","_sessionData$keysClai","keysClaimed","needsBackup","untrusted","deleteEndToEndInboundGroupSessionsBatch","migrateRoomSettingsFromLegacyCrypto","_x23","_migrateRoomSettingsFromLegacyCrypto","ROOM_SETTINGS_MIGRATED","legacySettings","STORE_ROOMS","getEndToEndRooms","rustSettings","_x24","_x25","_x26","_getAndDecryptCachedSecretKey","getSecretStorePrivateKey","iv","decryptAESSecretStorageItem","migrateLegacyLocalTrustIfNeeded","_x27","_migrateLegacyLocalTrustIfNeeded","legacyCryptoStore","rustCrypto","rustOwnIdentity","legacyLocallyTrustedMSK","getLegacyTrustedPublicMasterKeyBase64","mskInfo","rustSeenMSK","_x28","_getLegacyTrustedPublicMasterKeyBase","maybeTrustedKeys","getCrossSigningKeys","msk","master","initRustCrypto","_initRustCrypto","storePrefix","storeKey","storePassphrase","initOlmMachine","_initOlmMachine","_value","INITIAL_OWN_KEY_QUERY_DONE","initialKeyQueryDone"],"sourceRoot":""}